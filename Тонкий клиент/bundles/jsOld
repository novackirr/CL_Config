/*!
 * Bootstrap v3.2.0 (http://getbootstrap.com)
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */

if (typeof jQuery === 'undefined') { throw new Error('Bootstrap\'s JavaScript requires jQuery') }

/* ========================================================================
 * Bootstrap: transition.js v3.2.0
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: alert.js v3.2.0
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.2.0'

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.hasClass('alert') ? $this : $this.parent()
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one('bsTransitionEnd', removeElement)
        .emulateTransitionEnd(150) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert             = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.2.0
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION  = '3.2.0'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state = state + 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    $el[val](data[state] == null ? this.options[state] : data[state])

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked') && this.$element.hasClass('active')) changed = false
        else $parent.find('.active').removeClass('active')
      }
      if (changed) $input.prop('checked', !this.$element.hasClass('active')).trigger('change')
    }

    if (changed) this.$element.toggleClass('active')
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button             = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document).on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
    var $btn = $(e.target)
    if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
    Plugin.call($btn, 'toggle')
    e.preventDefault()
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: carousel.js v3.2.0
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element).on('keydown.bs.carousel', $.proxy(this.keydown, this))
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      =
    this.sliding     =
    this.interval    =
    this.$active     =
    this.$items      = null

    this.options.pause == 'hover' && this.$element
      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
  }

  Carousel.VERSION  = '3.2.0'

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true
  }

  Carousel.prototype.keydown = function (e) {
    switch (e.which) {
      case 37: this.prev(); break
      case 39: this.next(); break
      default: return
    }

    e.preventDefault()
  }

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item')
    return this.$items.index(item || this.$active)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', $(this.$items[pos]))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || $active[type]()
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var fallback  = type == 'next' ? 'first' : 'last'
    var that      = this

    if (!$next.length) {
      if (!this.options.wrap) return
      $next = this.$element.find('.item')[fallback]()
    }

    if ($next.hasClass('active')) return (this.sliding = false)

    var relatedTarget = $next[0]
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    })
    this.$element.trigger(slideEvent)
    if (slideEvent.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
      $nextIndicator && $nextIndicator.addClass('active')
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one('bsTransitionEnd', function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () {
            that.$element.trigger(slidEvent)
          }, 0)
        })
        .emulateTransitionEnd($active.css('transition-duration').slice(0, -1) * 1000)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger(slidEvent)
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  var old = $.fn.carousel

  $.fn.carousel             = Plugin
  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  $(document).on('click.bs.carousel.data-api', '[data-slide], [data-slide-to]', function (e) {
    var href
    var $this   = $(this)
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
    if (!$target.hasClass('carousel')) return
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    Plugin.call($target, options)

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  })

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      Plugin.call($carousel, $carousel.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.2.0
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.transitioning = null

    if (this.options.parent) this.$parent = $(this.options.parent)
    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.2.0'

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var actives = this.$parent && this.$parent.find('> .panel > .in')

    if (actives && actives.length) {
      var hasData = actives.data('bs.collapse')
      if (hasData && hasData.transitioning) return
      Plugin.call(actives, 'hide')
      hasData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(350)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse')
      .removeClass('in')

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .trigger('hidden.bs.collapse')
        .removeClass('collapsing')
        .addClass('collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(350)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && option == 'show') option = !option
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var href
    var $this   = $(this)
    var target  = $this.attr('data-target')
        || e.preventDefault()
        || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7
    var $target = $(target)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()
    var parent  = $this.attr('data-parent')
    var $parent = parent && $(parent)

    if (!data || !data.transitioning) {
      if ($parent) $parent.find('[data-toggle="collapse"][data-parent="' + parent + '"]').not($this).addClass('collapsed')
      $this[$target.hasClass('in') ? 'addClass' : 'removeClass']('collapsed')
    }

    Plugin.call($target, option)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: dropdown.js v3.2.0
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.2.0'

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.trigger('focus')

      $parent
        .toggleClass('open')
        .trigger('shown.bs.dropdown', relatedTarget)
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27)/.test(e.keyCode)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive || (isActive && e.keyCode == 27)) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.divider):visible a'
    var $items = $parent.find('[role="menu"]' + desc + ', [role="listbox"]' + desc)

    if (!$items.length) return

    var index = $items.index($items.filter(':focus'))

    if (e.keyCode == 38 && index > 0)                 index--                        // up
    if (e.keyCode == 40 && index < $items.length - 1) index++                        // down
    if (!~index)                                      index = 0

    $items.eq(index).trigger('focus')
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $parent = getParent($(this))
      var relatedTarget = { relatedTarget: this }
      if (!$parent.hasClass('open')) return
      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))
      if (e.isDefaultPrevented()) return
      $parent.removeClass('open').trigger('hidden.bs.dropdown', relatedTarget)
    })
  }

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle + ', [role="menu"], [role="listbox"]', Dropdown.prototype.keydown)

}(jQuery);

/* ========================================================================
 * Bootstrap: modal.js v3.2.0
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options        = options
    this.$body          = $(document.body)
    this.$element       = $(element)
    this.$backdrop      =
    this.isShown        = null
    this.scrollbarWidth = 0

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION  = '3.2.0'

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.$body.addClass('modal-open')

    this.setScrollbar()
    this.escape()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element
        .addClass('in')
        .attr('aria-hidden', false)

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$element.find('.modal-dialog') // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(300) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.$body.removeClass('modal-open')

    this.resetScrollbar()
    this.escape()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .attr('aria-hidden', true)
      .off('click.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(300) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keyup.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keyup.dismiss.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
        .appendTo(this.$body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus.call(this.$element[0])
          : this.hide.call(this)
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(150) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(150) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  Modal.prototype.checkScrollbar = function () {
    if (document.body.clientWidth >= window.innerWidth) return
    this.scrollbarWidth = this.scrollbarWidth || this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    if (this.scrollbarWidth) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', '')
  }

  Modal.prototype.measureScrollbar = function () { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal             = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.2.0
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       =
    this.options    =
    this.enabled    =
    this.timeout    =
    this.hoverState =
    this.$element   = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION  = '3.2.0'

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $(this.options.viewport.selector || this.options.viewport)

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(document.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var $parent      = this.$element.parent()
        var parentDim    = this.getPosition($parent)

        placement = placement == 'bottom' && pos.top   + pos.height       + actualHeight - parentDim.scroll > parentDim.height ? 'top'    :
                    placement == 'top'    && pos.top   - parentDim.scroll - actualHeight < 0                                   ? 'bottom' :
                    placement == 'right'  && pos.right + actualWidth      > parentDim.width                                    ? 'left'   :
                    placement == 'left'   && pos.left  - actualWidth      < parentDim.left                                     ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(150) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  = offset.top  + marginTop
    offset.left = offset.left + marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var arrowDelta          = delta.left ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowPosition       = delta.left ? 'left'        : 'top'
    var arrowOffsetPosition = delta.left ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], arrowPosition)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, position) {
    this.arrow().css(position, delta ? (50 * (1 - delta / dimension) + '%') : '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function () {
    var that = this
    var $tip = this.tip()
    var e    = $.Event('hide.bs.' + this.type)

    this.$element.removeAttr('aria-describedby')

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      that.$element.trigger('hidden.bs.' + that.type)
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && this.$tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(150) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof ($e.attr('data-original-title')) != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element
    var el     = $element[0]
    var isBody = el.tagName == 'BODY'
    return $.extend({}, (typeof el.getBoundingClientRect == 'function') ? el.getBoundingClientRect() : null, {
      scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop(),
      width:  isBody ? $(window).width()  : $element.outerWidth(),
      height: isBody ? $(window).height() : $element.outerHeight()
    }, isBody ? { top: 0, left: 0 } : $element.offset())
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2  } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2  } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width   }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.width) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    return (this.$tip = this.$tip || $(this.options.template))
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.validate = function () {
    if (!this.$element[0].parentNode) {
      this.hide()
      this.$element = null
      this.options  = null
    }
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
  }

  Tooltip.prototype.destroy = function () {
    clearTimeout(this.timeout)
    this.hide().$element.off('.' + this.type).removeData('bs.' + this.type)
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && option == 'destroy') return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip             = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.2.0
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.VERSION  = '3.2.0'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content').empty()[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }

  Popover.prototype.tip = function () {
    if (!this.$tip) this.$tip = $(this.options.template)
    return this.$tip
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && option == 'destroy') return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover             = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: scrollspy.js v3.2.0
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    var process  = $.proxy(this.process, this)

    this.$body          = $('body')
    this.$scrollElement = $(element).is('body') ? $(window) : $(element)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target || '') + ' .nav li > a'
    this.offsets        = []
    this.targets        = []
    this.activeTarget   = null
    this.scrollHeight   = 0

    this.$scrollElement.on('scroll.bs.scrollspy', process)
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION  = '3.2.0'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var offsetMethod = 'offset'
    var offsetBase   = 0

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase   = this.$scrollElement.scrollTop()
    }

    this.offsets = []
    this.targets = []
    this.scrollHeight = this.getScrollHeight()

    var self     = this

    this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        self.offsets.push(this[0])
        self.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop <= offsets[0]) {
      return activeTarget != (i = targets[0]) && this.activate(i)
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (!offsets[i + 1] || scrollTop <= offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')

    var selector = this.selector +
        '[data-target="' + target + '"],' +
        this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy             = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.2.0
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    this.element = $(element)
  }

  Tab.VERSION = '3.2.0'

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var previous = $ul.find('.active:last a')[0]
    var e        = $.Event('show.bs.tab', {
      relatedTarget: previous
    })

    $this.trigger(e)

    if (e.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: previous
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && $active.hasClass('fade')

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
        .removeClass('active')

      element.addClass('active')

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu')) {
        element.closest('li.dropdown').addClass('active')
      }

      callback && callback()
    }

    transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(150) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  $(document).on('click.bs.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: affix.js v3.2.0
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2014 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    this.$target = $(this.options.target)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      =
    this.unpin        =
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION  = '3.2.0'

  Affix.RESET    = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var scrollHeight = $(document).height()
    var scrollTop    = this.$target.scrollTop()
    var position     = this.$element.offset()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.unpin   != null && (scrollTop + this.unpin <= position.top) ? false :
                offsetBottom != null && (position.top + this.$element.height() >= scrollHeight - offsetBottom) ? 'bottom' :
                offsetTop    != null && (scrollTop <= offsetTop) ? 'top' : false

    if (this.affixed === affix) return
    if (this.unpin != null) this.$element.css('top', '')

    var affixType = 'affix' + (affix ? '-' + affix : '')
    var e         = $.Event(affixType + '.bs.affix')

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    this.affixed = affix
    this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

    this.$element
      .removeClass(Affix.RESET)
      .addClass(affixType)
      .trigger($.Event(affixType.replace('affix', 'affixed')))

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - this.$element.height() - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix             = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom) data.offset.bottom = data.offsetBottom
      if (data.offsetTop)    data.offset.top    = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);

!function(a){var b=function(){window.asyncWebshims||(window.asyncWebshims={cfg:[],ready:[]})},c=function(){window.jQuery&&(a(jQuery),a=function(){return window.webshims})};window.webshims={setOptions:function(){b(),window.asyncWebshims.cfg.push(arguments)},ready:function(){b(),window.asyncWebshims.ready.push(arguments)},activeLang:function(a){b(),window.asyncWebshims.lang=a},polyfill:function(a){b(),window.asyncWebshims.polyfill=a},_curScript:function(){var a,b,c,d=document.currentScript;if(!d){try{throw new Error("")}catch(e){c=(e.sourceURL||e.stack||"").split("\n"),c=((c[c.length-1]||c[c.length-2]||"").match(/(?:fil|htt|wid|abo|app|res)(.)+/i)||[""])[0].replace(/[\:\s\(]+[\d\:\)\(\s]+$/,"")}for(a=document.scripts||document.getElementsByTagName("script"),b=0;b<a.length&&(!a[b].getAttribute("src")||(d=a[b],"interactive"!=a[b].readyState&&c!=a[b].src));b++);}return d}()},window.webshim=window.webshims,window.webshims.timer=setInterval(c,0),c(),"function"==typeof define&&define.amd&&define("polyfiller",["jquery"],a)}(function(a){"use strict";function b(a){return document.createElement(a)}var c,d,e=window.navigator,f=window.webshims,g="dom-support",h=a.event.special,i=a([]),j=window.asyncWebshims,k={},l=window.Object,m=function(a){return a+"\n//# sourceURL="+this.url},n=function(a){return o.enhanceAuto||"auto"!=a?a:!1};clearInterval(f.timer),k.advancedObjectProperties=k.objectAccessor=k.ES5=!!("create"in l&&"seal"in l),!k.ES5||"toJSON"in Date.prototype||(k.ES5=!1),d=a.support.hrefNormalized===!1?f._curScript.getAttribute("src",4):f._curScript.src,d=d.split("?")[0].slice(0,d.lastIndexOf("/")+1)+"shims/",a.extend(f,{version:"1.14.4",cfg:{enhanceAuto:window.Audio&&(!window.matchMedia||matchMedia("(min-device-width: 721px)").matches),waitReady:!0,loadStyles:!0,wsdoc:document,wspopover:{appendTo:"auto",hideOnBlur:!0},ajax:{},loadScript:function(b,c){a.ajax&&a.ajaxSettings.xhr?a.ajax(a.extend({},o.ajax,{url:b,success:c,dataType:"script",cache:!0,global:!1,dataFilter:m})):window.yepnope?yepnope.injectJs(b,c):window.require&&require([b],c)},basePath:d},support:k,bugs:{},modules:{},features:{},featureList:[],setOptions:function(b,c){"string"==typeof b&&arguments.length>1?o[b]=a.isPlainObject(c)?a.extend(!0,o[b]||{},c):c:"object"==typeof b&&a.extend(!0,o,b)},getLazyFn:function(a,b){var c=function(){v(b)};return r("WINDOWLOAD",c),function(){var d=arguments,e=this;c(),r(b,function(){e[a].apply(e,d)})}},_getAutoEnhance:n,addPolyfill:function(b,c){c=c||{};var d=c.f||b;p[d]||(p[d]=[],f.featureList.push(d),o[d]={}),p[d].push(b),c.options=a.extend(o[d],c.options),w(b,c),c.methodNames&&a.each(c.methodNames,function(a,b){f.addMethodName(b)})},polyfill:function(){return function(a){a||(a=f.featureList),"string"==typeof a&&(a=a.split(" "));return f._polyfill(a)}}(),_polyfill:function(b){var d,e=[];c.run||(d=-1!==a.inArray("forms-ext",b),c(),d&&-1==a.inArray("forms",b)&&b.push("forms"),o.loadStyles&&u.loadCSS("styles/shim"+(d&&!t["form-number-date-ui"].test()?"-ext":"")+".css")),o.waitReady&&(a.readyWait++,r(b,function(){a.ready(!0)})),a.each(b,function(a,b){return"xhr2"==b&&(b="filereader"),"promise"==b&&(b="es6"),p[b]?(b!==p[b][0]&&r(p[b],function(){q(b,!0)}),void(e=e.concat(p[b]))):void q(b,!0)}),v(e),a.each(b,function(a,b){var c=o[b];c&&("mediaelement"==b&&(c.replaceUI=n(c.replaceUI))&&c.plugins.unshift("mediacontrols"),c.plugins&&c.plugins.length&&v(o[b].plugins))})},reTest:function(){var b,c=function(c,d){var e=t[d],f=d+"Ready";!e||e.loaded||(e.test&&a.isFunction(e.test)?e.test([]):e.test)||(h[f]&&delete h[f],p[e.f],b.push(d))};return function(d){"string"==typeof d&&(d=d.split(" ")),b=[],a.each(d,c),v(b)}}(),isReady:function(b,c){if(b+="Ready",c){if(h[b]&&h[b].add)return!0;h[b]=a.extend(h[b]||{},{add:function(a){a.handler.call(this,b)}}),a(document).triggerHandler(b)}return!(!h[b]||!h[b].add)||!1},ready:function(b,c){var d=arguments[2];if("string"==typeof b&&(b=b.split(" ")),d||(b=a.map(a.grep(b,function(a){return!q(a)}),function(a){return a+"Ready"})),!b.length)return void c(a,f,window,document);var e=b.shift(),g=function(){r(b,c,!0)};a(document).one(e,g)},capturingEvents:function(b,c){document.addEventListener&&("string"==typeof b&&(b=[b]),a.each(b,function(b,d){var e=function(b){return b=a.event.fix(b),c&&f.capturingEventPrevented&&f.capturingEventPrevented(b),a.event.dispatch.call(this,b)};h[d]=h[d]||{},h[d].setup||h[d].teardown||a.extend(h[d],{setup:function(){this.addEventListener(d,e,!0)},teardown:function(){this.removeEventListener(d,e,!0)}})}))},register:function(b,c){var d=t[b];if(!d)return void f.error("can't find module: "+b);d.loaded=!0;var e=function(){c(a,f,window,document,void 0,d.options),q(b,!0)};d.d&&d.d.length?r(d.d,e):e()},c:{},loader:{addModule:function(b,c){t[b]=c,c.name=c.name||b,c.c||(c.c=[]),a.each(c.c,function(a,c){f.c[c]||(f.c[c]=[]),f.c[c].push(b)})},loadList:function(){var b=[],c=function(c,d){"string"==typeof d&&(d=[d]),a.merge(b,d),u.loadScript(c,!1,d)},d=function(c,d){if(q(c)||-1!=a.inArray(c,b))return!0;var e,f=t[c];return f?(e=f.test&&a.isFunction(f.test)?f.test(d):f.test,e?(q(c,!0),!0):!1):!0},e=function(b,c){if(b.d&&b.d.length){var e=function(b,e){d(e,c)||-1!=a.inArray(e,c)||c.push(e)};a.each(b.d,function(b,c){t[c]?t[c].loaded||e(b,c):p[c]&&(a.each(p[c],e),r(p[c],function(){q(c,!0)}))}),b.noAutoCallback||(b.noAutoCallback=!0)}};return function(g){var h,i,j,k,l=[],m=function(d,e){return k=e,a.each(f.c[e],function(c,d){return-1==a.inArray(d,l)||-1!=a.inArray(d,b)?(k=!1,!1):void 0}),k?(c("combos/"+k,f.c[k]),!1):void 0};for(i=0;i<g.length;i++)h=t[g[i]],h&&!d(h.name,g)&&(h.css&&o.loadStyles&&u.loadCSS(h.css),h.loadInit&&h.loadInit(),e(h,g),h.loaded||l.push(h.name),h.loaded=!0);for(i=0,j=l.length;j>i;i++)k=!1,h=l[i],-1==a.inArray(h,b)&&("noCombo"!=o.debug&&a.each(t[h].c,m),k||c(t[h].src||h,h))}}(),makePath:function(a){return-1!=a.indexOf("//")||0===a.indexOf("/")?a:(-1==a.indexOf(".")&&(a+=".js"),o.addCacheBuster&&(a+=o.addCacheBuster),o.basePath+a)},loadCSS:function(){var b,c={};return function(d){d=this.makePath(d),c[d]||(b=b||a("link, style")[0]||a("script")[0],c[d]=1,a('<link rel="stylesheet" />').insertBefore(b).attr({href:d}))}}(),loadScript:function(){var b={};return function(c,d,e,f){if(f||(c=u.makePath(c)),!b[c]){var g=function(){d&&d(),e&&("string"==typeof e&&(e=e.split(" ")),a.each(e,function(a,b){t[b]&&(t[b].afterLoad&&t[b].afterLoad(),q(t[b].noAutoCallback?b+"FileLoaded":b,!0))}))};b[c]=1,o.loadScript(c,g,a.noop)}}}()}});var o=f.cfg,p=f.features,q=f.isReady,r=f.ready,s=f.addPolyfill,t=f.modules,u=f.loader,v=u.loadList,w=u.addModule,x=f.bugs,y=[],z={warn:1,error:1},A=a.fn;return f.addMethodName=function(a){a=a.split(":");var b=a[1];1==a.length?(b=a[0],a=a[0]):a=a[0],A[a]=function(){return this.callProp(b,arguments)}},A.callProp=function(b,c){var d;return c||(c=[]),this.each(function(){var e=a.prop(this,b);if(e&&e.apply){if(d=e.apply(this,c),void 0!==d)return!1}else f.warn(b+" is not a method of "+this)}),void 0!==d?d:this},f.activeLang=function(){"language"in e||(e.language=e.browserLanguage||"");var b=a.attr(document.documentElement,"lang")||e.language;return r("webshimLocalization",function(){f.activeLang(b)}),function(a){if(a)if("string"==typeof a)b=a;else if("object"==typeof a){var c=arguments,d=this;r("webshimLocalization",function(){f.activeLang.apply(d,c)})}return b}}(),f.errorLog=[],a.each(["log","error","warn","info"],function(a,b){f[b]=function(a){(z[b]&&o.debug!==!1||o.debug)&&(f.errorLog.push(a),window.console&&console.log&&console[console[b]?b:"log"](a))}}),function(){a.isDOMReady=a.isReady;var b=function(){a.isDOMReady=!0,q("DOM",!0),setTimeout(function(){q("WINDOWLOAD",!0)},9999)};c=function(){if(!c.run){if((o.debug||!("crossDomain"in o.ajax)&&location.protocol.indexOf("http"))&&(o.ajax.crossDomain=!0),!a.isDOMReady&&o.waitReady){var d=a.ready;a.ready=function(a){return a!==!0&&document.body&&b(),d.apply(this,arguments)},a.ready.promise=d.promise}o.readyEvt?a(document).one(o.readyEvt,b):a(b)}c.run=!0},a(window).on("load",function(){b(),setTimeout(function(){q("WINDOWLOAD",!0)},9)});var d=[],e=function(){1==this.nodeType&&f.triggerDomUpdate(this)};a.extend(f,{addReady:function(a){var b=function(b,c){f.ready("DOM",function(){a(b,c)})};d.push(b),o.wsdoc&&b(o.wsdoc,i)},triggerDomUpdate:function(b){if(!b||!b.nodeType)return void(b&&b.jquery&&b.each(function(){f.triggerDomUpdate(this)}));var c=b.nodeType;if(1==c||9==c){var e=b!==document?a(b):i;a.each(d,function(a,c){c(b,e)})}}}),A.clonePolyfill=A.clone,A.htmlPolyfill=function(b){if(!arguments.length)return a(this.clonePolyfill()).html();var c=A.html.call(this,b);return c===this&&a.isDOMReady&&this.each(e),c},A.jProp=function(){return this.pushStack(a(A.prop.apply(this,arguments)||[]))},a.each(["after","before","append","prepend","replaceWith"],function(b,c){A[c+"Polyfill"]=function(b){return b=a(b),A[c].call(this,b),a.isDOMReady&&b.each(e),this}}),a.each(["insertAfter","insertBefore","appendTo","prependTo","replaceAll"],function(b,c){A[c.replace(/[A-Z]/,function(a){return"Polyfill"+a})]=function(){return A[c].apply(this,arguments),a.isDOMReady&&f.triggerDomUpdate(this),this}}),A.updatePolyfill=function(){return a.isDOMReady&&f.triggerDomUpdate(this),this},a.each(["getNativeElement","getShadowElement","getShadowFocusElement"],function(a,b){A[b]=function(){return this.pushStack(this)}})}(),l.create&&(f.objectCreate=function(b,c,d){var e=l.create(b);return d&&(e.options=a.extend(!0,{},e.options||{},d),d=e.options),e._create&&a.isFunction(e._create)&&e._create(d),e}),w("swfmini",{test:function(){return window.swfobject&&!window.swfmini&&(window.swfmini=window.swfobject),"swfmini"in window},c:[16,7,2,8,1,12,23]}),t.swfmini.test(),w("sizzle",{test:a.expr.filters}),w("jajax",{test:a.ajax&&a.ajaxSettings.xhr}),s("es5",{test:!(!k.ES5||!Function.prototype.bind),d:["sizzle"]}),s("dom-extend",{f:g,noAutoCallback:!0,d:["es5"],c:[16,7,2,15,30,3,8,4,9,10,25,31,34]}),b("picture"),s("picture",{test:"picturefill"in window||!!window.HTMLPictureElement,d:["matchMedia"],c:[18],loadInit:function(){q("picture",!0)}}),s("matchMedia",{test:!(!window.matchMedia||!matchMedia("all").addListener),c:[18]}),s("es6",{test:!!(Math.imul&&Number.MIN_SAFE_INTEGER&&l.is&&window.Promise&&Promise.all),d:["es5"]}),s("geolocation",{test:"geolocation"in e,options:{destroyWrite:!0},c:[21]}),function(){s("canvas",{src:"excanvas",test:"getContext"in b("canvas"),options:{type:"flash"},noAutoCallback:!0,loadInit:function(){var a=this.options.type;!a||-1===a.indexOf("flash")||t.swfmini.test()&&!swfmini.hasFlashPlayerVersion("9.0.0")||(this.src="flash"==a?"FlashCanvas/flashcanvas":"FlashCanvasPro/flashcanvas")},methodNames:["getContext"],d:[g]})}(),function(){var c,d,h="form-shim-extend",i="formvalidation",j="form-number-date-api",l=!1,m=!1,p=!1,q={},r=b("progress"),u=b("output"),v=function(){var d,f,g=b("input");if(f=a('<fieldset><textarea required="" /></fieldset>')[0],k.inputtypes=q,a.each(["number","range","date","datetime-local","month","color"],function(a,b){g.setAttribute("type",b),q[b]=g.type==b&&(g.value="(")&&"("!=g.value}),k.datalist=!!("options"in b("datalist")&&window.HTMLDataListElement),k[i]="checkValidity"in g,k.fieldsetelements="elements"in f,k.fieldsetdisabled="disabled"in f){try{f.querySelector(":invalid")&&(f.disabled=!0,d=!f.querySelector(":invalid"))}catch(j){}k.fieldsetdisabled=!!d}return k[i]?(m=!(k.fieldsetdisabled&&k.fieldsetelements&&"value"in r&&"value"in u),p=m&&/Android/i.test(e.userAgent),x.bustedValidity=l=window.opera||x.bustedValidity||m||!k.datalist):x.bustedValidity=!1,c=k[i]&&!l?"form-native-extend":h,v=a.noop,!1};f.validationMessages=f.validityMessages={langSrc:"i18n/formcfg-",availableLangs:"ar cs el es fa fr he hi hu it ja lt nl pl pt pt-BR pt-PT ru sv zh-CN zh-TW".split(" ")},f.formcfg=a.extend({},f.validationMessages),f.inputTypes={},s("form-core",{f:"forms",d:["es5"],options:{placeholderType:"value",messagePopover:{},test:v,list:{popover:{constrainWidth:!0}},iVal:{sel:".ws-validate",handleBubble:"hide",recheckDelay:400}},methodNames:["setCustomValidity","checkValidity","setSelectionRange"],c:[16,7,2,8,1,15,30,3,31]}),d=o.forms,s("form-native-extend",{f:"forms",test:function(b){return v(),!k[i]||l||-1==a.inArray(j,b||[])||t[j].test()},d:["form-core",g,"form-message"],c:[6,5,14,29]}),s(h,{f:"forms",test:function(){return v(),k[i]&&!l},d:["form-core",g,"sizzle"],c:[16,15,28]}),s(h+"2",{f:"forms",test:function(){return v(),k[i]&&!m},d:[h],c:[27]}),s("form-message",{f:"forms",test:function(a){return v(),!(d.customMessages||!k[i]||l||!t[c].test(a))},d:[g],c:[16,7,15,30,3,8,4,14,28]}),s(j,{f:"forms-ext",options:{types:"date time range number"},test:function(){var b=!0,c=this.options;return c._types||(c._types=c.types.split(" ")),v(),a.each(c._types,function(a,c){return c in q&&!q[c]?(b=!1,!1):void 0}),b},methodNames:["stepUp","stepDown"],d:["forms",g],c:[6,5,17,14,28,29,33]}),w("range-ui",{options:{},noAutoCallback:!0,test:function(){return!!A.rangeUI},d:["es5"],c:[6,5,9,10,17,11]}),s("form-number-date-ui",{f:"forms-ext",test:function(){var a=this.options;return a.replaceUI=n(a.replaceUI),v(),!a.replaceUI&&p&&(a.replaceUI=!0),!a.replaceUI&&t[j].test()},d:["forms",g,j,"range-ui"],options:{widgets:{calculateWidth:!0,animate:!0}},c:[6,5,9,10,17,11]}),s("form-datalist",{f:"forms",test:function(){return v(),p&&(d.customDatalist=!0),k.datalist&&!d.fD},d:["form-core",g],c:[16,7,6,2,9,15,30,31,28,33]})}(),webshim.loader.addModule("moxie",{src:"moxie/js/moxie",c:[26]}),s("filereader",{test:"FileReader"in window&&"FormData"in window,d:[g,"jajax"],c:[25,26,27]}),s("details",{test:"open"in b("details"),d:[g],options:{text:"Details"},c:[21,22]}),function(){f.mediaelement={};var c=b("video"),d=b("track");if(k.mediaelement="canPlayType"in c,k.texttrackapi="addTextTrack"in c,k.track="kind"in d,b("audio"),!(x.track=!k.texttrackapi))try{x.track=!("oncuechange"in c.addTextTrack("metadata"))}catch(e){}s("mediaelement-core",{f:"mediaelement",noAutoCallback:!0,options:{jme:{},plugins:[],vars:{},params:{},attrs:{},changeSWF:a.noop},methodNames:["play","pause","canPlayType","mediaLoad:load"],d:["swfmini"],c:[16,7,2,8,1,12,13,23]}),s("mediaelement-jaris",{f:"mediaelement",d:["mediaelement-core",g],test:function(){var a=this.options;return!k.mediaelement||f.mediaelement.loadSwf?!1:(a.preferFlash&&!t.swfmini.test()&&(a.preferFlash=!1),!(a.preferFlash&&swfmini.hasFlashPlayerVersion("10.0.3")))},c:[21,25]}),s("track",{options:{positionDisplay:!0,override:x.track},test:function(){var a=this.options;return a.override=n(a.override),!a.override&&!x.track},d:["mediaelement",g],methodNames:["addTextTrack"],c:[21,12,13,22,34]}),w("jmebase",{src:"jme/base",c:[98,99,97]}),a.each([["mediacontrols",{c:[98,99],css:"jme/controls.css"}],["playlist",{c:[98,97]}],["alternate-media"]],function(b,c){w(c[0],a.extend({src:"jme/"+c[0],d:["jmebase"]},c[1]))}),w("track-ui",{d:["track",g]})}(),s("feature-dummy",{test:!0,loaded:!0,c:y}),f.$=a,a.webshims=f,a.webshim=webshim,f.callAsync=function(){f.callAsync=a.noop,j&&(j.cfg&&(j.cfg.length||(j.cfg=[[j.cfg]]),a.each(j.cfg,function(a,b){f.setOptions.apply(f,b)})),j.ready&&a.each(j.ready,function(a,b){f.ready.apply(f,b)}),j.lang&&f.activeLang(j.lang),"polyfill"in j&&f.polyfill(j.polyfill)),f.isReady("jquery",!0)},f.callAsync(),f});
/**
 * autoNumeric.js
 * @author: Bob Knothe
 * @contributor: Sokolov Yura
 * @version: 2.0-beta - 2016-01-11 GMT 2:00 PM / 14:00
 *
 * Created by Robert J. Knothe on 2009-08-09. Please report any bugs to https://github.com/BobKnothe/autoNumeric
 *
 * Copyright (c) 2009 Robert J. Knothe http://www.decorplanit.com/plugin/
 *
 * The MIT License (http://www.opensource.org/licenses/mit-license.php)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sub license, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
(function (factory) {
    if (typeof define === "function" && define.amd) {
        /** AMD. Register as an anonymous module. */
        define(["jquery"], factory);
    } else if (typeof module === "object" && module.exports) {
        /** Node/CommonJS */
        module.exports = factory(require("jquery"));
    } else {
        /** Browser globals */
        factory(window.jQuery);
    }
}(function ($) {
    "use strict";
    /*jslint browser: true, bitwise: true*/
    /*global jQuery: false, sessionStorage: false*/

    /**
     * Cross browser routine for getting selected range/cursor position
     */

    function getElementSelection(that) {
        var position = {};
        if (that.selectionStart === undefined) {
            that.focus();
            var select = document.selection.createRange();
            position.length = select.text.length;
            select.moveStart('character', -that.value.length);
            position.end = select.text.length;
            position.start = position.end - position.length;
        } else {
            position.start = that.selectionStart;
            position.end = that.selectionEnd;
            position.length = position.end - position.start;
        }
        return position;
    }

    /**
     * Cross browser routine for setting selected range/cursor position
     */

    function setElementSelection(that, start, end) {
        if (that.selectionStart === undefined) {
            that.focus();
            var r = that.createTextRange();
            r.collapse(true);
            r.moveEnd('character', end);
            r.moveStart('character', start);
            r.select();
        } else {
            that.selectionStart = start;
            that.selectionEnd = end;
        }
    }

    /**
     * Function to handle errors messages
     */

    function throwErr(message, debug) {
        if (debug) {
            var err = new Error(message);
            throw err;
        }
    }

    /**
     * run callbacks in parameters if any
     * any parameter could be a callback:
     * - a function, which invoked with jQuery element, parameters and this parameter name and returns parameter value
     * - a name of function, attached to $(selector).autoNumeric.functionName(){} - which was called previously
     */

    function runCallbacks($this, settings) {
        /**
         * loops through the settings object (option array) to find the following
         * k = option name example k=aNum
         * val = option value example val=0123456789
         */
        $.each(settings, function (k, val) {
            if (typeof val === 'function') {
                settings[k] = val($this, settings, k);
            } else if (typeof $this.autoNumeric[val] === 'function') {
                /**
                 * calls the attached function from the html5 data example: data-a-sign="functionName"
                 */
                settings[k] = $this.autoNumeric[val]($this, settings, k);
            }
        });
    }

    /**
     * Preparing user defined options for further usage
     * merge them with defaults appropriately
     */

    function autoCode($this, settings) {
        runCallbacks($this, settings);
        var vmax = settings.vMax.toString().split('.'),
            vmin = (!settings.vMin && settings.vMin !== 0) ? [] : settings.vMin.toString().split('.');
        settings.aNeg = settings.vMin < 0 ? '-' : '';
        vmax[0] = vmax[0].replace('-', '');
        vmin[0] = vmin[0].replace('-', '');
        settings.mIntPos = Math.max(vmax[0].length, 1);
        settings.mIntNeg = Math.max(vmin[0].length, 1);
        if (settings.mDec === null) {
            var vmaxLength = 0,
                vminLength = 0;
            if (vmax[1]) {
                vmaxLength = vmax[1].length;
            }
            if (vmin[1]) {
                vminLength = vmin[1].length;
            }
            settings.mDec = Math.max(vmaxLength, vminLength);
            settings.oDec = settings.mDec;
        } else {
            settings.mDec = Number(settings.mDec);
        }
        /** set alternative decimal separator key */
        if (settings.altDec === null && settings.mDec > 0) {
            if (settings.aDec === '.' && settings.aSep !== ',') {
                settings.altDec = ',';
            } else if (settings.aDec === ',' && settings.aSep !== '.') {
                settings.altDec = '.';
            }
        }
        /** cache regexps for autoStrip */
        var aNegReg = settings.aNeg ? '([-\\' + settings.aNeg + ']?)' : '(-?)';
        settings.aNegRegAutoStrip = aNegReg;
        settings.skipFirstAutoStrip = new RegExp(aNegReg + '[^-' + (settings.aNeg ? '\\' + settings.aNeg : '') + '\\' + settings.aDec + '\\d]' + '.*?(\\d|\\' + settings.aDec + '\\d)');
        settings.skipLastAutoStrip = new RegExp('(\\d\\' + settings.aDec + '?)[^\\' + settings.aDec + '\\d]\\D*$');
        var allowed = '-' + settings.aNum + '\\' + settings.aDec;
        settings.allowedAutoStrip = new RegExp('[^' + allowed + ']', 'gi');
        settings.numRegAutoStrip = new RegExp(aNegReg + '(?:\\' + settings.aDec + '?(\\d+\\' + settings.aDec + '\\d+)|(\\d*(?:\\' + settings.aDec + '\\d*)?))');
        return settings;
    }

    /**
     * strip all unwanted characters and leave only a number alert
     */

    function autoStrip(s, settings) {
        if (settings.aSign !== '') { /** remove currency sign */
            s = s.replace(settings.aSign, '');
        }
        if (settings.aSuffix) { /** remove suffix */
            while (s.indexOf(settings.aSuffix) > -1) {
                s = s.replace(settings.aSuffix, '');
            }
        }
        s = s.replace(settings.skipFirstAutoStrip, '$1$2'); /** first replace anything before digits */
        if ((settings.pNeg === 's' || (settings.pSign === 's' && settings.pNeg !== 'p')) && s.indexOf('-') > -1 && s !== '') {
            settings.trailingNegative = true;
        }
        s = s.replace(settings.skipLastAutoStrip, '$1'); /** then replace anything after digits */
        s = s.replace(settings.allowedAutoStrip, ''); /** then remove any uninterested characters */
        if (settings.altDec) {
            s = s.replace(settings.altDec, settings.aDec);
        } /** get only number string */
        var m = s.match(settings.numRegAutoStrip);
        s = m ? [m[1], m[2], m[3]].join('') : '';
        if (settings.lZero === 'allow' || settings.lZero === 'keep') {
            var parts = [],
                nSign = '';
            parts = s.split(settings.aDec);
            if (parts[0].indexOf(settings.aNeg) !== -1) {
                nSign = settings.aNeg;
                parts[0] = parts[0].replace(settings.aNeg, '');
            }
            if (nSign === "" && parts[0].length > settings.mIntPos && parts[0].charAt(0) === '0') { /** strip leading zero if need */
                parts[0] = parts[0].slice(1);
            }
            if (nSign !== '' && parts[0].length > settings.mIntNeg && parts[0].charAt(0) === '0') { /** strip leading zero if need */
                parts[0] = parts[0].slice(1);
            }
            s = nSign + parts.join(settings.aDec);
        }
        if ((settings.onOff && settings.lZero === 'deny') || (settings.lZero === 'allow' && settings.onOff === false)) {
            var strip_reg = '^' + settings.aNegRegAutoStrip + '0*(\\d|$)';
            strip_reg = new RegExp(strip_reg);
            s = s.replace(strip_reg, '$1$2');
        }
        return s;
    }

    /**
     * places or removes brackets on negative values
     */

    function negativeBracket(s, settings) {
        if ((settings.pSign === 'p' && settings.pNeg === 'l') || (settings.pSign === 's' && settings.pNeg === 'p')) {
            var brackets = settings.nBracket.split(',');
            if (!settings.onOff) {
                s = s.replace(settings.aNeg, '');
                s = brackets[0] + s + brackets[1];
            } else if (settings.onOff && s.charAt(0) === brackets[0]) {
                s = s.replace(brackets[0], settings.aNeg);
                s = s.replace(brackets[1], '');
            }
        }
        return s;
    }

    /**
     * convert locale format to javaSript numeric string
     * allows locale decimal separator to be a period or comma - no thousand separator allowed of currency signs allowed
     * '1234.56'    OK
     * '-1234.56'   OK
     * '1234.56-'   OK
     * '1234,56'    OK
     * '-1234,56'   OK
     * '1234,56-'   OK
     */

    function convertLocale(s) {
        s = s.replace(',', '.');
        if (s.lastIndexOf('-') !== -1 && s.lastIndexOf('-') === s.length - 1) {
            s = s.replace('-', '');
            s = '-' + s;
        }
        return s;
    }

    /**
     * prepare number string to be converted to real number
     */

    function fixNumber(s, aDec, aNeg) {
        if (aDec && aDec !== '.') {
            s = s.replace(aDec, '.');
        }
        if (aNeg && aNeg !== '-') {
            s = s.replace(aNeg, '-');
        }
        if (!s.match(/\d/)) {
            s += '0';
        }
        return s;
    }

    /**
     * prepare real number to be converted to our format
     */

    function presentNumber(s, aDec, aNeg) {
        if (aNeg && aNeg !== '-') {
            s = s.replace('-', aNeg);
        }
        if (aDec && aDec !== '.') {
            s = s.replace('.', aDec);
        }
        return s;
    }

    /**
     * private function to check for empty value
     */

    function checkEmpty(iv, settings, signOnEmpty) {
        if (iv === '' || iv === settings.aNeg) {
            if (settings.wEmpty === 'always' || signOnEmpty) {
                return (settings.pNeg === 'l') ? iv + settings.aSign + settings.aSuffix : settings.aSign + iv + settings.aSuffix;
            }
            return iv;
        }
        return null;
    }

    /**
     * private function that formats our number
     */
    function autoGroup(iv, settings) {
        iv = autoStrip(iv, settings);
        if (settings.trailingNegative && iv.indexOf('-') === -1) {
            iv = '-' + iv;
        }
        var empty = checkEmpty(iv, settings, true),
            isNeg = iv.indexOf('-') > -1;
        if (isNeg) {
            iv = iv.replace('-', '');
        }
        if (empty !== null) {
            return empty;
        }
        var digitalGroup = '';
        settings.dGroup = settings.dGroup.toString();
        if (settings.dGroup === '2') {
            digitalGroup = /(\d)((\d)(\d{2}?)+)$/;
        } else if (settings.dGroup === '2s') {
            digitalGroup = /(\d)((?:\d{2}){0,2}\d{3}(?:(?:\d{2}){2}\d{3})*?)$/;
        } else if (settings.dGroup === '4') {
            digitalGroup = /(\d)((\d{4}?)+)$/;
        } else {
            digitalGroup = /(\d)((\d{3}?)+)$/;
        } /** splits the string at the decimal string */
        var ivSplit = iv.split(settings.aDec);
        if (settings.altDec && ivSplit.length === 1) {
            ivSplit = iv.split(settings.altDec);
        } /** assigns the whole number to the a variable (s) */
        var s = ivSplit[0];
        if (settings.aSep !== '') {
            while (digitalGroup.test(s)) { /** re-inserts the thousand separator via a regular expression */
                s = s.replace(digitalGroup, '$1' + settings.aSep + '$2');
            }
        }
        if (settings.mDec !== 0 && ivSplit.length > 1) {
            if (ivSplit[1].length > settings.mDec) {
                ivSplit[1] = ivSplit[1].substring(0, settings.mDec);
            } /** joins the whole number with the decimal value */
            iv = s + settings.aDec + ivSplit[1];
        } else { /** if whole numbers only */
            iv = s;
        }
        if (settings.pSign === 'p') {
            if (isNeg && settings.pNeg === 'l') {
                iv = settings.aNeg + settings.aSign + iv;
            }
            if (isNeg && settings.pNeg === 'r') {
                iv = settings.aSign + settings.aNeg + iv;
            }
            if (isNeg && settings.pNeg === 's') {
                iv = settings.aSign + iv + settings.aNeg;
            }
            if (!isNeg) {
                iv = settings.aSign + iv;
            }
        }
        if (settings.pSign === 's') {
            if (isNeg && settings.pNeg === 'r') {
                iv = iv + settings.aSign + settings.aNeg;
            }
            if (isNeg && settings.pNeg === 'l') {
                iv = iv + settings.aNeg + settings.aSign;
            }
            if (isNeg && settings.pNeg === 'p') {
                iv = settings.aNeg + iv + settings.aSign;
            }
            if (!isNeg) {
                iv = iv + settings.aSign;
            }
        }
        if (settings.rawValue < 0 && settings.nBracket !== null) { /** removes the negative sign and places brackets */
            iv = negativeBracket(iv, settings);
        }
        settings.trailingNegative = false;
        return iv + settings.aSuffix;
    }

    /**
     * round number after setting by pasting or $().autoNumericSet()
     * private function for round the number
     * please note this handled as text - JavaScript math function can return inaccurate values
     * also this offers multiple rounding methods that are not easily accomplished in JavaScript
     */

    function autoRound(iv, settings) { /** value to string */
        iv = (iv === '') ? '0' : iv.toString();
        if (settings.mRound === 'N05' || settings.mRound === 'U05' || settings.mRound === 'D05') {
            iv = (settings.mRound === 'N05') ? (Math.round(iv * 20) / 20).toString() : (settings.mRound === 'U05') ? (Math.ceil(iv * 20) / 20).toString() : (Math.floor(iv * 20) / 20).toString();
            return (iv.indexOf('.') === -1) ? iv + '.00' : (iv.length - iv.indexOf('.') < 3) ? iv + '0' : iv;
        }
        var ivRounded = '',
            i = 0,
            nSign = '',
            rDec = (typeof (settings.aPad) === 'boolean' || settings.aPad === null) ? (settings.aPad ? settings.mDec : 0) : Number(settings.aPad);
        var truncateZeros = function (ivRounded) { /** truncate not needed zeros */
            var regex = rDec === 0 ? (/(\.(?:\d*[1-9])?)0*$/) : rDec === 1 ? (/(\.\d(?:\d*[1-9])?)0*$/) : new RegExp('(\\.\\d{' + rDec + '}(?:\\d*[1-9])?)0*');
            ivRounded = ivRounded.replace(regex, '$1'); /** If there are no decimal places, we don't need a decimal point at the end */
            if (rDec === 0) {
                ivRounded = ivRounded.replace(/\.$/, '');
            }
            return ivRounded;
        };
        if (iv.charAt(0) === '-') { /** Checks if the iv (input Value)is a negative value */
            nSign = '-';
            iv = iv.replace('-', ''); /** removes the negative sign will be added back later if required */
        }
        if (!iv.match(/^\d/)) { /** append a zero if first character is not a digit (then it is likely to be a dot)*/
            iv = '0' + iv;
        }
        if (nSign === '-' && Number(iv) === 0) { /** determines if the value is zero - if zero no negative sign */
            nSign = '';
        }
        if ((Number(iv) > 0 && settings.lZero !== 'keep') || (iv.length > 0 && settings.lZero === 'allow')) { /** trims leading zero's if needed */
            iv = iv.replace(/^0*(\d)/, '$1');
        }
        var dPos = iv.lastIndexOf('.'),
            /** virtual decimal position */
            vdPos = (dPos === -1) ? iv.length - 1 : dPos,
            /** checks decimal places to determine if rounding is required */
            cDec = (iv.length - 1) - vdPos; /** check if no rounding is required */
        if (cDec <= settings.mDec) {
            ivRounded = iv; /** check if we need to pad with zeros */
            if (cDec < rDec) {
                if (dPos === -1) {
                    //ivRounded += '.';
                    ivRounded += settings.aDec;
                }
                var zeros = '000000';
                while (cDec < rDec) {
                    zeros = zeros.substring(0, rDec - cDec);
                    ivRounded += zeros;
                    cDec += zeros.length;
                }
            } else if (cDec > rDec) {
                ivRounded = truncateZeros(ivRounded);
            } else if (cDec === 0 && rDec === 0) {
                ivRounded = ivRounded.replace(/\.$/, '');
            }
            return (Number(ivRounded) === 0) ? ivRounded : nSign + ivRounded;
        } /** rounded length of the string after rounding */
        var rLength = dPos + settings.mDec,
            tRound = Number(iv.charAt(rLength + 1)),
            ivArray = iv.substring(0, rLength + 1).split(''),
            odd = (iv.charAt(rLength) === '.') ? (iv.charAt(rLength - 1) % 2) : (iv.charAt(rLength) % 2);
        /*jslint white: true*/
        if ((tRound > 4 && settings.mRound === 'S') || /**                      Round half up symmetric */
            (tRound > 4 && settings.mRound === 'A' && nSign === '') || /**      Round half up asymmetric positive values */
            (tRound > 5 && settings.mRound === 'A' && nSign === '-') || /**     Round half up asymmetric negative values */
            (tRound > 5 && settings.mRound === 's') || /**                      Round half down symmetric */
            (tRound > 5 && settings.mRound === 'a' && nSign === '') || /**      Round half down asymmetric positive values */
            (tRound > 4 && settings.mRound === 'a' && nSign === '-') || /**     Round half down asymmetric negative values */
            (tRound > 5 && settings.mRound === 'B') || /**                      Round half even "Banker's Rounding" */
            (tRound === 5 && settings.mRound === 'B' && odd === 1) || /**       Round half even "Banker's Rounding" */
            (tRound > 0 && settings.mRound === 'C' && nSign === '') || /**      Round to ceiling toward positive infinite */
            (tRound > 0 && settings.mRound === 'F' && nSign === '-') || /**     Round to floor toward negative infinite */
            (tRound > 0 && settings.mRound === 'U')) { /**                      Round up away from zero */
            /*jslint white: false*/
            for (i = (ivArray.length - 1); i >= 0; i -= 1) { /** Round up the last digit if required, and continue until no more 9's are found */
                if (ivArray[i] !== '.') {
                    ivArray[i] = +ivArray[i] + 1;
                    if (ivArray[i] < 10) {
                        break;
                    }
                    if (i > 0) {
                        ivArray[i] = '0';
                    }
                }
            }
        }
        ivArray = ivArray.slice(0, rLength + 1); /** Reconstruct the string, converting any 10's to 0's */
        ivRounded = truncateZeros(ivArray.join('')); /** return rounded value */
        return (Number(ivRounded) === 0) ? ivRounded : nSign + ivRounded;
    }

    /**
     * truncate decimal part of a number
     */

    function truncateDecimal(s, settings, paste) {
        var aDec = settings.aDec,
            mDec = settings.mDec;
        s = (paste === 'paste') ? autoRound(s, settings) : s;
        if (aDec && mDec) {
            var parts = s.split(aDec);
            /** truncate decimal part to satisfying length
             * cause we would round it anyway */
            if (parts[1] && parts[1].length > mDec) {
                if (mDec > 0) {
                    parts[1] = parts[1].substring(0, mDec);
                    s = parts.join(aDec);
                } else {
                    s = parts[0];
                }
            }
        }
        return s;
    }

    /**
     * Function to parse vMin, vMax & the input value to prepare for testing to determine if the value falls within the min / max range
     * Return an object example: vMin: "999999999999999.99" returns the following "{s: -1, e: 12, c: Array[15]}"
     * This function is adapted from Big.js https://github.com/MikeMcl/big.js/
     * Many thanks to Mike
     */

    function parseStr(n) {
        var x = {},
            e,
            i,
            nL,
            j;
        /** Minus zero? */
        if (n === 0 && 1 / n < 0) {
            n = '-0';
        }
        /** Determine sign. 1 positive, -1 negative */
        if (n.charAt(0) === '-') {
            n = n.slice(1);
            x.s = -1;
        } else {
            x.s = 1;
        }
        /** Decimal point? */
        e = n.indexOf('.');
        if (e > -1) {
            n = n.replace('.', '');
        }
        /** length of string if no decimal character */
        if (e < 0) {
            /** Integer. */
            e = n.length;
        }
        /** Determine leading zeros. */
        i = (n.search(/[1-9]/i) === -1) ? n.length : n.search(/[1-9]/i);
        nL = n.length;
        if (i === nL) {
            /** Zero. */
            x.e = 0;
            x.c = [0];
        } else {
            /** Determine trailing zeros. */
            for (j = nL - 1; n.charAt(j) === '0'; j -= 1) {
                nL -= 1;
            }
            nL -= 1;
            /** Decimal location. */
            x.e = e - i - 1;
            x.c = [];
            /** Convert string to array of digits without leading/trailing zeros. */
            for (e = 0; i <= nL; i += 1) {
                x.c[e] = +n.charAt(i);
                e += 1;
            }
        }
        return x;
    }

    /**
     * Function to test if the input value falls with the Min / Max settings
     * This uses the parsed strings for the above parseStr function
     * This function is adapted from Big.js https://github.com/MikeMcl/big.js/
     * Many thanks to Mike
     */

    function testMinMax(y, x) {
        var xNeg,
            xc = x.c,
            yc = y.c,
            i = x.s,
            j = y.s,
            k = x.e,
            l = y.e;
        /** Either zero? */
        if (!xc[0] || !yc[0]) {
            return !xc[0] ? !yc[0] ? 0 : -j : i;
        }
        /** Signs differ? */
        if (i !== j) {
            return i;
        }
        xNeg = i < 0;
        /** Compare exponents. */
        if (k !== l) {
            return k > l ^ xNeg ? 1 : -1;
        }
        i = -1;
        k = xc.length;
        l = yc.length;
        j = (k < l) ? k : l;
        /** Compare digit by digit. */
        for (i += 1; i < j; i += 1) {
            if (xc[i] !== yc[i]) {
                return xc[i] > yc[i] ^ xNeg ? 1 : -1;
            }
        }
        /** Compare lengths */
        return k === l ? 0 : k > l ^ xNeg ? 1 : -1;
    }

    /**
     * checking that number satisfy format conditions
     * and lays between settings.vMin and settings.vMax
     * and the string length does not exceed the digits in settings.vMin and settings.vMax
     */

    function autoCheck(s, settings) {
        s = s.replace(',', '.');
        var minParse = parseStr(settings.vMin),
            maxParse = parseStr(settings.vMax),
            valParse = parseStr(s);
        return testMinMax(minParse, valParse) > -1 && testMinMax(maxParse, valParse) < 1;
    }

    /**
     * Holder object for field properties
     */

    function AutoNumericHolder(that, settings) {
        this.settings = settings;
        this.that = that;
        this.$that = $(that);
        this.formatted = false;
        this.settingsClone = autoCode(this.$that, this.settings);
        this.value = that.value;
    }
    AutoNumericHolder.prototype = {
        init: function (e) {
            this.value = this.that.value;
            this.settingsClone = autoCode(this.$that, this.settings);
            this.ctrlKey = e.ctrlKey;
            this.cmdKey = e.metaKey;
            this.shiftKey = e.shiftKey;
            this.selection = getElementSelection(this.that); /** keypress event overwrites meaningful value of e.keyCode */
            if (e.type === 'keydown' || e.type === 'keyup') {
                this.kdCode = e.keyCode;
            }
            this.which = e.which;
            this.processed = false;
            this.formatted = false;
        },
        setSelection: function (start, end, setReal) {
            start = Math.max(start, 0);
            end = Math.min(end, this.that.value.length);
            this.selection = {
                start: start,
                end: end,
                length: end - start
            };
            if (setReal === undefined || setReal) {
                setElementSelection(this.that, start, end);
            }
        },
        setPosition: function (pos, setReal) {
            this.setSelection(pos, pos, setReal);
        },
        getBeforeAfter: function () {
            var value = this.value,
                left = value.substring(0, this.selection.start),
                right = value.substring(this.selection.end, value.length);
            return [left, right];
        },
        getBeforeAfterStriped: function () {
            var settingsClone = this.settingsClone,
                parts = this.getBeforeAfter();
            parts[0] = autoStrip(parts[0], this.settingsClone);
            parts[1] = autoStrip(parts[1], this.settingsClone);
            if (settingsClone.trailingNegative && parts[0].indexOf('-') === -1) {
                parts[0] = '-' + parts[0];
                parts[1] = (parts[1] === '-') ? '' : parts[1];
            }
            settingsClone.trailingNegative = false;
            return parts;
        },

        /**
         * strip parts from excess characters and leading zeroes
         */
        normalizeParts: function (left, right) {
            var settingsClone = this.settingsClone;
            left = autoStrip(left, settingsClone); /** prevents multiple leading zeros from being entered */
            right = autoStrip(right, settingsClone); /** if right is not empty and first character is not aDec, */
            if (settingsClone.trailingNegative && left.indexOf('-') === -1) {
                left = '-' + left;
                settingsClone.trailingNegative = false;
            }
            if ((left === '' || left === settingsClone.aNeg) && settingsClone.lZero === 'deny') {
                if (right > '') {
                    right = right.replace(/^0*(\d)/, '$1');
                }
            }
            var new_value = left + right; /** insert zero if has leading dot */
            if (settingsClone.aDec) {
                var m = new_value.match(new RegExp('^' + settingsClone.aNegRegAutoStrip + '\\' + settingsClone.aDec));
                if (m) {
                    left = left.replace(m[1], m[1] + '0');
                    new_value = left + right;
                }
            }
            return [left, right];
        },

        /**
         * set part of number to value keeping position of cursor
         */
        setValueParts: function (left, right, paste) {
            var settingsClone = this.settingsClone,
                parts = this.normalizeParts(left, right),
                new_value = parts.join(''),
                position = parts[0].length;
            if (autoCheck(new_value, settingsClone)) {
                new_value = truncateDecimal(new_value, settingsClone, paste);
                var test_value = (new_value.indexOf(',') !== -1) ? new_value.replace(',', '.') : new_value,
                    text_value = test_value;
                if (test_value === '' || test_value === settingsClone.aNeg) {
                    settingsClone.rawValue = '';
                } else {
                    settingsClone.rawValue = text_value;
                }
                if (position > new_value.length) {
                    position = new_value.length;
                }
                this.value = new_value;
                this.setPosition(position, false);
                return true;
            }
            return false;
        },

        /**
         * helper function for expandSelectionOnSign
         * returns sign position of a formatted value
         */
        signPosition: function () {
            var settingsClone = this.settingsClone,
                aSign = settingsClone.aSign,
                that = this.that;
            if (aSign) {
                var aSignLen = aSign.length;
                if (settingsClone.pSign === 'p') {
                    var hasNeg = settingsClone.aNeg && that.value && that.value.charAt(0) === settingsClone.aNeg;
                    return hasNeg ? [1, aSignLen + 1] : [0, aSignLen];
                }
                var valueLen = that.value.length;
                return [valueLen - aSignLen, valueLen];
            }
            return [1000, -1];
        },

        /**
         * expands selection to cover whole sign
         * prevents partial deletion/copying/overwriting of a sign
         */
        expandSelectionOnSign: function (setReal) {
            var sign_position = this.signPosition(),
                selection = this.selection;
            if (selection.start < sign_position[1] && selection.end > sign_position[0]) { /** if selection catches something except sign and catches only space from sign */
                if ((selection.start < sign_position[0] || selection.end > sign_position[1]) && this.value.substring(Math.max(selection.start, sign_position[0]), Math.min(selection.end, sign_position[1])).match(/^\s*$/)) { /** then select without empty space */
                    if (selection.start < sign_position[0]) {
                        this.setSelection(selection.start, sign_position[0], setReal);
                    } else {
                        this.setSelection(sign_position[1], selection.end, setReal);
                    }
                } else { /** else select with whole sign */
                    this.setSelection(Math.min(selection.start, sign_position[0]), Math.max(selection.end, sign_position[1]), setReal);
                }
            }
        },

        /**
         * try to strip pasted value to digits
         */
        checkPaste: function () {
            if (this.valuePartsBeforePaste !== undefined) {
                var parts = this.getBeforeAfter(),
                    oldParts = this.valuePartsBeforePaste;
                delete this.valuePartsBeforePaste; /** try to strip pasted value first */
                parts[0] = parts[0].substr(0, oldParts[0].length) + autoStrip(parts[0].substr(oldParts[0].length), this.settingsClone);
                if (!this.setValueParts(parts[0], parts[1], 'paste')) {
                    this.value = oldParts.join('');
                    this.setPosition(oldParts[0].length, false);
                }
            }
        },

        /**
         * process pasting, cursor moving and skipping of not interesting keys
         * if returns true, further processing is not performed
         */
        skipAllways: function (e) {
            var kdCode = this.kdCode,
                which = this.which,
                ctrlKey = this.ctrlKey,
                cmdKey = this.cmdKey,
                shiftKey = this.shiftKey; /** catch the ctrl up on ctrl-v */
            if (((ctrlKey || cmdKey) && e.type === 'keyup' && this.valuePartsBeforePaste !== undefined) || (shiftKey && kdCode === 45)) {
                this.checkPaste();
                return false;
            }
            /** codes are taken from http://www.cambiaresearch.com/c4/702b8cd1-e5b0-42e6-83ac-25f0306e3e25/Javascript-Char-Codes-Key-Codes.aspx
             * skip Fx keys, windows keys, other special keys
             */
            if ((kdCode >= 112 && kdCode <= 123) || (kdCode >= 91 && kdCode <= 93) || (kdCode >= 9 && kdCode <= 31) || (kdCode < 8 && (which === 0 || which === kdCode)) || kdCode === 144 || kdCode === 145 || kdCode === 45 || kdCode === 224) {
                return true;
            }
            if ((ctrlKey || cmdKey) && kdCode === 65) { /** if select all (a=65)*/
                if (this.settings.sNumber) {
                    e.preventDefault();
                    var valueLen = this.that.value.length,
                        aSignLen = this.settings.aSign.length,
                        negLen = (this.that.value.indexOf('-') === -1) ? 0 : 1,
                        aSuffixLen = this.settings.aSuffix.length,
                        pSign = this.settings.pSign,
                        pNeg = this.settings.pNeg,
                        start = (pSign === 's') ? 0 : (pNeg === 'l' && negLen === 1 && aSignLen > 0) ? aSignLen + 1 : aSignLen,
                        end = (pSign === 'p') ? valueLen - aSuffixLen : (pNeg === 'l') ? valueLen - (aSuffixLen + aSignLen) : (pNeg === 'r') ? (aSignLen > 0) ? valueLen - (aSignLen + negLen + aSuffixLen) : valueLen - (aSignLen + aSuffixLen) : valueLen - (aSignLen + aSuffixLen);
                    setElementSelection(this.that, start, end);
                }
                return true;
            }
            if ((ctrlKey || cmdKey) && (kdCode === 67 || kdCode === 86 || kdCode === 88)) { /** if copy (c=67) paste (v=86) or cut (x=88) */
                if (e.type === 'keydown') {
                    this.expandSelectionOnSign();
                }
                if (kdCode === 86 || kdCode === 45) { /** try to prevent wrong paste */
                    if (e.type === 'keydown' || e.type === 'keypress') {
                        if (this.valuePartsBeforePaste === undefined) {
                            this.valuePartsBeforePaste = this.getBeforeAfter();
                        }
                    } else {
                        this.checkPaste();
                    }
                }
                return e.type === 'keydown' || e.type === 'keypress' || kdCode === 67;
            }
            if (ctrlKey || cmdKey) {
                return true;
            }
            if (kdCode === 37 || kdCode === 39) { /** jump over thousand separator */
                var aSep = this.settingsClone.aSep,
                    aDec = this.settingsClone.aDec,
                    startJump = this.selection.start,
                    value = this.that.value;
                if (e.type === 'keydown' && !this.shiftKey) {
                    if (kdCode === 37 && (value.charAt(startJump - 2) === aSep || value.charAt(startJump - 2) === aDec)) {
                        this.setPosition(startJump - 1);
                    } else if (kdCode === 39 && (value.charAt(startJump + 1) === aSep || value.charAt(startJump + 1) === aDec)) {
                        this.setPosition(startJump + 1);
                    }
                }
                return true;
            }
            if (kdCode >= 34 && kdCode <= 40) {
                return true;
            }
            return false;
        },

        /**
         * process deletion of characters when the minus sign is to the right of the numeric characters
         */
        processTrailing: function (parts) {
            var settingsClone = this.settingsClone;
            if (settingsClone.pSign === 'p' && settingsClone.pNeg === 's') {
                if (this.kdCode === 8) {
                    settingsClone.caretFix = (this.selection.start >= this.value.indexOf(settingsClone.aSuffix) && settingsClone.aSuffix !== '') ? true : false;
                    if (this.value.charAt(this.selection.start - 1) === '-') {
                        parts[0] = parts[0].substring(1);
                    } else if (this.selection.start <= this.value.length - settingsClone.aSuffix.length) {
                        parts[0] = parts[0].substring(0, parts[0].length - 1);
                    }
                } else {
                    settingsClone.caretFix = (this.selection.start >= this.value.indexOf(settingsClone.aSuffix) && settingsClone.aSuffix !== '') ? true : false;
                    if (this.selection.start >= this.value.indexOf(settingsClone.aSign) + settingsClone.aSign.length) {
                        parts[1] = parts[1].substring(1, parts[1].length);
                    }
                    if (parts[0].indexOf('-') > -1 && this.value.charAt(this.selection.start) === '-') {
                        parts[0] = parts[0].substring(1);
                    }
                }
            }
            if (settingsClone.pSign === 's' && settingsClone.pNeg === 'l') {
                settingsClone.caretFix = (this.selection.start >= this.value.indexOf(settingsClone.aNeg) + settingsClone.aNeg.length) ? true : false;
                if (this.kdCode === 8) {
                    if (this.selection.start === (this.value.indexOf(settingsClone.aNeg) + settingsClone.aNeg.length) && this.value.indexOf(settingsClone.aNeg) !== -1) {
                        parts[0] = parts[0].substring(1);
                    } else if (parts[0] !== '-' && ((this.selection.start <= this.value.indexOf(settingsClone.aNeg)) || this.value.indexOf(settingsClone.aNeg) === -1)) {
                        parts[0] = parts[0].substring(0, parts[0].length - 1);
                    }
                } else {
                    if (parts[0][0] === '-') {
                        parts[1] = parts[1].substring(1);
                    }
                    if (this.selection.start === this.value.indexOf(settingsClone.aNeg) && this.value.indexOf(settingsClone.aNeg) !== -1) {
                        parts[0] = parts[0].substring(1);
                    }
                }
            }
            if (settingsClone.pSign === 's' && settingsClone.pNeg === 'r') {
                settingsClone.caretFix = (this.selection.start >= this.value.indexOf(settingsClone.aNeg) + settingsClone.aNeg.length) ? true : false;
                if (this.kdCode === 8) {
                    if (this.selection.start === (this.value.indexOf(settingsClone.aNeg) + settingsClone.aNeg.length)) {
                        parts[0] = parts[0].substring(1);
                    } else if (parts[0] !== '-' && this.selection.start <= (this.value.indexOf(settingsClone.aNeg) - settingsClone.aSign.length)) {
                        parts[0] = parts[0].substring(0, parts[0].length - 1);
                    } else if (parts[0] !== '' && this.value.indexOf(settingsClone.aNeg) === -1) {
                        parts[0] = parts[0].substring(0, parts[0].length - 1);
                    }
                } else {
                    settingsClone.caretFix = (this.selection.start >= this.value.indexOf(settingsClone.aSign) && settingsClone.aSign !== '') ? true : false;
                    if (this.selection.start === this.value.indexOf(settingsClone.aNeg)) {
                        parts[0] = parts[0].substring(1);
                    }
                    parts[1] = parts[1].substring(1);
                }
            }
            return parts;
        },

        /**
         * process deletion of characters
         * returns true if processing performed
         */
        processAllways: function () {
            var settingsClone = this.settingsClone,
                parts = [];
            if (this.kdCode === 8 || this.kdCode === 46) {
                if (!this.selection.length) {
                    parts = this.getBeforeAfterStriped();
                    if (parts[0] === '' && parts[1] === '') {
                        settingsClone.throwInput = false;
                    }
                    if (((settingsClone.pSign === 'p' && settingsClone.pNeg === 's') || (settingsClone.pSign === 's' && (settingsClone.pNeg === 'l' || settingsClone.pNeg === 'r'))) && this.value.indexOf('-') !== -1) {
                        parts = this.processTrailing(parts);
                    } else {
                        if (this.kdCode === 8) {
                            parts[0] = parts[0].substring(0, parts[0].length - 1);
                        } else {
                            parts[1] = parts[1].substring(1, parts[1].length);
                        }
                    }
                    this.setValueParts(parts[0], parts[1]);
                } else {
                    this.expandSelectionOnSign(false);
                    parts = this.getBeforeAfterStriped();
                    this.setValueParts(parts[0], parts[1]);
                }
                return true;
            }
            return false;
        },

        /**
         * process insertion of characters
         * returns true if processing performed
         */
        processKeypress: function () {
            var settingsClone = this.settingsClone,
                cCode = String.fromCharCode(this.which),
                parts = this.getBeforeAfterStriped(),
                left = parts[0],
                right = parts[1];
            settingsClone.throwInput = true;
            /** start rules when the decimal character key is pressed always use numeric pad dot to insert decimal separator */
            if (cCode === settingsClone.aDec || (settingsClone.altDec && cCode === settingsClone.altDec) || ((cCode === '.' || cCode === ',') && this.kdCode === 110)) { /** do not allow decimal character if no decimal part allowed */
                if (!settingsClone.mDec || !settingsClone.aDec) {
                    return true;
                } /** do not allow decimal character before aNeg character */
                if (settingsClone.aNeg && right.indexOf(settingsClone.aNeg) > -1) {
                    return true;
                } /** do not allow decimal character if other decimal character present */
                if (left.indexOf(settingsClone.aDec) > -1) {
                    return true;
                }
                if (right.indexOf(settingsClone.aDec) > 0) {
                    return true;
                }
                if (right.indexOf(settingsClone.aDec) === 0) {
                    right = right.substr(1);
                }
                this.setValueParts(left + settingsClone.aDec, right, null);
                return true;
            }
            if ((cCode === '-' || cCode === '+') && settingsClone.aNeg === '-') { /** prevent minus if not allowed ************************************************************************************************************************************/
                if (!settingsClone) {
                    return true;
                } /** caret is always after minus */
                if ((settingsClone.pSign === 'p' && settingsClone.pNeg === 's') || (settingsClone.pSign === 's' && settingsClone.pNeg !== 'p')) {
                    if (left === '' && right.indexOf(settingsClone.aNeg) > -1) {
                        left = settingsClone.aNeg;
                        right = right.substring(1, right.length);
                    } /** change sign of number, remove part if should */
                    if (left.charAt(0) === '-' || left.indexOf(settingsClone.aNeg) !== -1) {
                        left = left.substring(1, left.length);
                    } else {
                        left = (cCode === '-') ? settingsClone.aNeg + left : left;
                    }
                } else {
                    if (left === '' && right.indexOf(settingsClone.aNeg) > -1) {
                        left = settingsClone.aNeg;
                        right = right.substring(1, right.length);
                    } /** change sign of number, remove part if should */
                    if (left.charAt(0) === settingsClone.aNeg) {
                        left = left.substring(1, left.length);
                    } else {
                        left = (cCode === '-') ? settingsClone.aNeg + left : left;
                    }
                }
                this.setValueParts(left, right, null);
                return true;
            }
            if (cCode >= '0' && cCode <= '9') { /** if try to insert digit before minus */
                if (settingsClone.aNeg && left === '' && right.indexOf(settingsClone.aNeg) > -1) {
                    left = settingsClone.aNeg;
                    right = right.substring(1, right.length);
                }
                if (settingsClone.vMax <= 0 && settingsClone.vMin < settingsClone.vMax && this.value.indexOf(settingsClone.aNeg) === -1 && cCode !== '0') {
                    left = settingsClone.aNeg + left;
                }
                this.setValueParts(left + cCode, right, null);
                return true;
            } /** prevent any other character */
            settingsClone.throwInput = false;
            return true;
        },

        /**
         * formatting of just processed value with keeping of cursor position
         */
        formatQuick: function (e) {
            var settingsClone = this.settingsClone,
                parts = this.getBeforeAfterStriped(),
                leftLength = this.value,
                kuCode = e.keyCode;
            /** no grouping separator and no currency sign */
            if ((settingsClone.aSep === '' || (settingsClone.aSep !== '' && leftLength.indexOf(settingsClone.aSep) === -1)) && (settingsClone.aSign === '' || (settingsClone.aSign !== '' && leftLength.indexOf(settingsClone.aSign) === -1))) {
                var subParts = [],
                    nSign = '';
                subParts = leftLength.split(settingsClone.aDec);
                if (subParts[0].indexOf('-') > -1) {
                    nSign = '-';
                    subParts[0] = subParts[0].replace('-', '');
                    parts[0] = parts[0].replace('-', '');
                }
                if (nSign === '' && subParts[0].length > settingsClone.mIntPos && parts[0].charAt(0) === '0') { /** strip leading zero on positive value if need */
                    parts[0] = parts[0].slice(1);
                }
                if (nSign === '-' && subParts[0].length > settingsClone.mIntNeg && parts[0].charAt(0) === '0') { /** strip leading zero on negative value if need */
                    parts[0] = parts[0].slice(1);
                }
                parts[0] = nSign + parts[0];
            }
            var value = autoGroup(this.value, this.settingsClone);
            var position = value.length;
            if (value) {
                /** prepare regexp which searches for cursor position from unformatted left part */
                var left_ar = parts[0].split(''),
                    i = 0;
                /** fixes caret position with trailing minus sign */
                if ((settingsClone.pNeg === 's' || (settingsClone.pSign === 's' && settingsClone.pNeg !== 'p')) && left_ar[0] === '-' && settingsClone.aNeg !== '') {
                    left_ar.shift();
                    if (settingsClone.pSign === 's' && settingsClone.pNeg === 'l' && (kuCode === 8 || this.kdCode === 8 || kuCode === 46 || this.kdCode === 46) && settingsClone.caretFix) {
                        left_ar.push('-');
                        settingsClone.caretFix = (e.type === 'keydown') ? true : false;
                    }
                    if (settingsClone.pSign === 'p' && settingsClone.pNeg === 's' && (kuCode === 8 || this.kdCode === 8 || kuCode === 46 || this.kdCode === 46) && settingsClone.caretFix) {
                        left_ar.push('-');
                        settingsClone.caretFix = (e.type === 'keydown') ? true : false;
                    }
                    if (settingsClone.pSign === 's' && settingsClone.pNeg === 'r' && (kuCode === 8 || this.kdCode === 8 || kuCode === 46 || this.kdCode === 46) && settingsClone.caretFix) {
                        var signParts = settingsClone.aSign.split(''),
                            escapeChr = ['\\', '^', '$', '.', '|', '?', '*', '+', '(', ')', '['],
                            escapedParts = [],
                            escapedSign = '';
                        $.each(signParts, function (i, miniParts) {
                            miniParts = signParts[i];
                            if ($.inArray(miniParts, escapeChr) !== -1) {
                                escapedParts.push('\\' + miniParts);
                            } else {
                                escapedParts.push(miniParts);
                            }
                        });
                        if (kuCode === 8 || this.kdCode === 8) {
                            escapedParts.push('-');
                        }
                        escapedSign = escapedParts.join('');
                        left_ar.push(escapedSign);
                        settingsClone.caretFix = (e.type === 'keydown') ? true : false;
                    }
                }
                for (i; i < left_ar.length; i += 1) { /** thanks Peter Kovari */
                    if (!left_ar[i].match('\\d')) {
                        left_ar[i] = '\\' + left_ar[i];
                    }
                }
                var leftReg = new RegExp('^.*?' + left_ar.join('.*?')),
                    newLeft = value.match(leftReg); /** search cursor position in formatted value */
                if (newLeft) {
                    position = newLeft[0].length;
                    /** if we are just before sign which is in prefix position */
                    if (((position === 0 && value.charAt(0) !== settingsClone.aNeg) || (position === 1 && value.charAt(0) === settingsClone.aNeg)) && settingsClone.aSign && settingsClone.pSign === 'p') {
                        /** place caret after prefix sign */
                        position = this.settingsClone.aSign.length + (value.charAt(0) === '-' ? 1 : 0);
                    }
                } else {
                    if (settingsClone.aSign && settingsClone.pSign === 's') {
                        /** if we could not find a place for cursor and have a sign as a suffix */
                        /** place caret before suffix currency sign */
                        position -= settingsClone.aSign.length;
                    }
                    if (settingsClone.aSuffix) {
                        /** if we could not find a place for cursor and have a suffix */
                        /** place caret before suffix */
                        position -= settingsClone.aSuffix.length;
                    }
                }
            }
            this.that.value = value;
            this.setPosition(position);
            this.formatted = true;
        }
    };

    /**
     * thanks to Anthony & Evan C
     */

    function autoGet(obj) {
        if (typeof obj === 'string') {
            obj = obj.replace(/\[/g, "\\[").replace(/\]/g, "\\]");
            obj = '#' + obj.replace(/(:|\.)/g, '\\$1');
            /** obj = '#' + obj.replace(/([;&,\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, '\\$1'); */
            /** possible modification to replace the above 2 lines */
        }
        return $(obj);
    }

    /**
     * function to attach data to the element
     * and imitate the holder
     */

    function getHolder($that, settings, update) {
        var data = $that.data('autoNumeric');
        if (!data) {
            data = {};
            $that.data('autoNumeric', data);
        }
        var holder = data.holder;
        if ((holder === undefined && settings) || update) {
            holder = new AutoNumericHolder($that.get(0), settings);
            data.holder = holder;
        }
        return holder;
    }

    /**
     * original settings saved for use when eDec & nSep options are being used
     */

    function originalSettings(settings) {
        settings.oDec = settings.mDec;
        settings.oPad = settings.aPad;
        settings.oBracket = settings.nBracket;
        settings.oSep = settings.aSep;
        settings.oSign = settings.aSign;
        return settings;
    }

    /**
     * original settings saved for use when eDec & nSep options are being used
     * taken from Quirksmode
     */

    function readCookie(name) {
        var nameEQ = name + "=",
            ca = document.cookie.split(';'),
            i = 0,
            c = '';
        for (i; i < ca.length; i += 1) {
            c = ca[i];
            while (c.charAt(0) === ' ') {
                c = c.substring(1, c.length);
            }
            if (c.indexOf(nameEQ) === 0) {
                return c.substring(nameEQ.length, c.length);
            }
        }
        return null;
    }

    /**
     * Test if sessionStorage is supported - taken from moderizr
     */

    function storageTest() {
        var mod = 'modernizr';
        try {
            sessionStorage.setItem(mod, mod);
            sessionStorage.removeItem(mod);
            return true;
        } catch (e) {
            return false;
        }
    }

    /**
     * creates or removes sessionStorage or cookie depending on browser support
     */

    function autoSave($this, settings, toDo) {
        if (settings.aStor) {
            var storedName = ($this[0].name !== '' && $this[0].name !== undefined) ? 'AUTO_' + decodeURIComponent($this[0].name) : 'AUTO_' + $this[0].id;
            if (storageTest() === false) { /** sets cookie for browser that do not support sessionStorage IE 6 & ie7 */
                if (toDo === 'get') {
                    return readCookie(storedName);
                }
                if (toDo === 'set') {
                    document.cookie = storedName + '=' + settings.rawValue + '; expires= ; path=/';
                }
                if (toDo === 'wipe') {
                    var date = new Date();
                    date.setTime(date.getTime() + (-1 * 24 * 60 * 60 * 1000));
                    var expires = "; expires=" + date.toGMTString();
                    document.cookie = storedName + '="" ;' + expires + '; path=/';
                }
            } else {
                if (toDo === 'get') {
                    return sessionStorage.getItem(storedName);
                }
                if (toDo === 'set') {
                    sessionStorage.setItem(storedName, settings.rawValue);
                }
                if (toDo === 'wipe') {
                    sessionStorage.removeItem(storedName);
                }
            }
        }
        return;
    }

    /**
     * Methods supported by autoNumeric
     */
    var methods = {

        /**
         * Method to initiate autoNumeric and attached the settings (default and options passed as a parameter
         * $(someSelector).autoNumeric('init'); // initiate autoNumeric with defaults
         * $(someSelector).autoNumeric('init', {option}); // initiate autoNumeric with options
         * $(someSelector).autoNumeric(); // initiate autoNumeric with defaults
         * $(someSelector).autoNumeric({option}); // initiate autoNumeric with options
         * options passes as a parameter example '{aSep: '.', aDec: ',', aSign: '€ '}
         */
        init: function (options) {
            return this.each(function () {
                var $this = $(this),
                    /** attempt to grab 'autoNumeric' settings, if they don't exist returns "undefined". */
                    settings = $this.data('autoNumeric'),
                    /** attempt to grab HTML5 data, if they don't exist we'll get "undefined".*/
                    tagData = $this.data(),
                    /** supported input types*/
                    $input = $this.is('input[type=text], input[type=hidden], input[type=tel], input:not([type])');
                $.each(tagData, function (key, value) {
                    if (typeof value === 'number') {
                        tagData[key] = value.toString();
                    }
                });
                if (typeof settings !== 'object') { /** If we couldn't grab settings, create them from defaults and passed options. */
                    settings = $.extend({}, $.fn.autoNumeric.defaults, tagData, options, {
                        aNum: '0123456789',
                        onOff: false,
                        runOnce: false,
                        rawValue: '',
                        trailingNegative: false,
                        caretFix: false,
                        throwInput: true,
                        tagList: ['b', 'caption', 'cite', 'code', 'dd', 'del', 'div', 'dfn', 'dt', 'em', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ins', 'kdb', 'label', 'li', 'option', 'output', 'p', 'q', 's', 'sample', 'span', 'strong', 'td', 'th', 'u', 'var']
                    }); /** Merge defaults, tagData and options */
                    if (settings.aDec === settings.aSep) {
                        throwErr('autoNumeric will not function properly when the decimal character aDec: "' + settings.aDec + '" and thousand separator aSep: "' + settings.aSep + '" are the same character', settings.debug);
                    }
                    $.each(settings, function (key, value) {
                        if (value === 'true' || value === 'false') {
                            settings[key] = (value === 'true') ? true : false;
                        }
                    });
                    $this.data('autoNumeric', settings); /** Save our new settings */
                } else {
                    return this;
                }
                settings = originalSettings(settings); /** original settings saved for use when eDec & nSep options are being used */
                var holder = getHolder($this, settings);
                if (!$input && $this.prop('tagName').toLowerCase() === 'input') { /** checks for non-supported input types */
                    throwErr('The input type "' + $this.prop('type') + '" is not supported by autoNumeric()', settings.debug);
                }
                if ($.inArray($this.prop('tagName').toLowerCase(), settings.tagList) === -1 && $this.prop('tagName').toLowerCase() !== 'input') { /** checks for non-supported tags */
                    throwErr('The "<' + $this.prop('tagName').toLowerCase() + '>" is not supported by autoNumeric()', settings.debug);
                }
                if (settings.aDec === settings.aSep) { /** checks if the decimal and thousand are characters are the same */
                    throwErr('autoNumeric will not function properly when the decimal character aDec: "' + settings.aDec + '" and thousand separator aSep: "' + settings.aSep + '" are the same character', settings.debug);
                }
                if (settings.eDec < settings.mDec && settings.eDec !== null) { /** checks the extended decimal places "eDec" is greater than the normal decimal places "mDec" */
                    throwErr('autoNumeric will not function properly when the extended decimal places "eDec: ' + settings.eDec + '" is greater than mDec: "' + settings.mDec + '" value', settings.debug);
                }
                /** routine to format default value on page load */
                if (settings.runOnce === false && settings.aForm) {
                    var setValue = true;
                    if ($input) {
                        /** checks for page reload from back button
                         * also checks for ASP.net form post back
                         * the following HTML data attribute is REQUIRED (data-an-default="same value as the value attribute")
                         * example: <asp:TextBox runat="server" id="someID" text="1234.56" data-an-default="1234.56">
                         */
                        if ((settings.anDefault !== null && settings.anDefault.toString() !== $this.val()) || (settings.anDefault === null && $this.val() !== '' && $this.val() !== $this.attr('value')) || ($this.val() !== '' && $this.attr('type') === 'hidden' && !$.isNumeric($this.val().replace(',', '.')))) {
                            if (settings.eDec !== null && settings.aStor) {
                                settings.rawValue = autoSave($this, settings, 'get');
                            }
                            if (!settings.aStor) {
                                var toStrip = '';
                                if (settings.nBracket !== null && settings.aNeg !== '') {
                                    settings.onOff = true;
                                    toStrip = negativeBracket($this.val(), settings);
                                } else {
                                    toStrip = $this.val();
                                }
                                settings.rawValue = ((settings.pNeg === 's' || (settings.pSign === 's' && settings.pNeg !== 'p')) && settings.aNeg !== '' && $this.val().indexOf('-') > -1) ? '-' + autoStrip(toStrip, settings) : autoStrip(toStrip, settings);
                            }
                            setValue = false;
                        }
                        if ($this.val() === '' && settings.wEmpty === 'focus') {
                            setValue = false;
                        }
                        if ($this.val() === '' && settings.wEmpty === 'always') {
                            $this.val(settings.aSign);
                            setValue = false;
                        }
                        if (setValue && $this.val() !== '' && $this.val() === $this.attr('value')) {
                            $this.autoNumeric('set', $this.val());
                        }
                    }
                    if ($.inArray($this.prop('tagName').toLowerCase(), settings.tagList) !== -1 && $this.text() !== '') {
                        if (settings.anDefault !== null) {
                            if (settings.anDefault === $this.text()) {
                                $this.autoNumeric('set', $this.text());
                            }
                        } else {
                            $this.autoNumeric('set', $this.text());
                        }
                    }
                }
                settings.runOnce = true;
                if ($input) { /**input types supported "text", "hidden", "tel" and no type*/
                    $this.on('focusin.autoNumeric', function () {
                        holder = getHolder($this);
                        var $settings = holder.settingsClone;
                        $settings.onOff = true;
                        if ($settings.nBracket !== null && $settings.aNeg !== '') {
                            $this.val(negativeBracket($this.val(), $settings));
                        }
                        if ($settings.nSep === true) {
                            $settings.aSep = '';
                            $settings.aSign = '';
                        }
                        if ($settings.eDec !== null) {
                            $settings.mDec = $settings.eDec;
                            $this.autoNumeric('set', $settings.rawValue);
                        } else {
                            $this.autoNumeric('set', $settings.rawValue);
                        }
                        holder.inVal = $this.val();
                        holder.lastVal = $this.val();
                        var onEmpty = checkEmpty(holder.inVal, $settings, true);
                        if ((onEmpty !== null && onEmpty !== '') && $settings.wEmpty === 'focus') {
                            $this.val(onEmpty);
                        }
                    });
                    $this.on('keydown.autoNumeric', function (e) {
                        holder = getHolder($this);
                        if (holder.that.readOnly) {
                            holder.processed = true;
                            return true;
                        }
                        /** The below streamed code / comment allows the "enter" keydown to throw a change() event */
                        /** if (e.keyCode === 13 && holder.inVal !== $this.val()){
                            $this.change();
                            holder.inVal = $this.val();
                        }*/
                        holder.init(e);
                        if (holder.skipAllways(e)) {
                            holder.processed = true;
                            return true;
                        }
                        if (holder.processAllways()) {
                            holder.processed = true;
                            holder.formatQuick(e);
                            if (($this.val() !== holder.lastVal) && holder.settingsClone.throwInput) {
                                $this.trigger('input'); /** throws input event in deletion character */
                            }
                            holder.lastVal = $this.val();
                            holder.settingsClone.throwInput = true;
                            e.preventDefault();
                            return false;
                        }
                        holder.formatted = false;
                        return true;
                    });
                    $this.on('keypress.autoNumeric', function (e) {
                        if (e.shiftKey && e.keyCode === 45) { /** FF fix for Shift && insert paste event */
                            return;
                        }
                        holder = getHolder($this);
                        var processed = holder.processed;
                        holder.init(e);
                        if (holder.skipAllways(e)) {
                            return true;
                        }
                        if (processed) {
                            e.preventDefault();
                            return false;
                        }
                        if (holder.processAllways() || holder.processKeypress()) {
                            holder.formatQuick(e);
                            if (($this.val() !== holder.lastVal) && holder.settingsClone.throwInput) {
                                $this.trigger('input'); /** throws input event on adding character */
                            }
                            holder.lastVal = $this.val();
                            holder.settingsClone.throwInput = true;
                            e.preventDefault();
                            return;
                        }
                        holder.formatted = false;
                    });
                    $this.on('keyup.autoNumeric', function (e) {
                        holder = getHolder($this);
                        holder.init(e);
                        var skip = holder.skipAllways(e);
                        holder.kdCode = 0;
                        delete holder.valuePartsBeforePaste;
                        if ($this[0].value === holder.settingsClone.aSign) { /** added to properly place the caret when only the currency sign is present */
                            if (holder.settingsClone.pSign === 's') {
                                setElementSelection(this, 0, 0);
                            } else {
                                setElementSelection(this, holder.settingsClone.aSign.length, holder.settingsClone.aSign.length);
                            }
                        }
                        if ($this[0].value === holder.settingsClone.aSuffix) {
                            setElementSelection(this, 0, 0);
                        }
                        if (holder.settingsClone.rawValue === '' && holder.settingsClone.aSign !== '' && holder.settingsClone.aSuffix !== '') {
                            setElementSelection(this, 0, 0);
                        }
                        if (holder.settingsClone.eDec !== null && holder.settingsClone.aStor) { /** saves the extended decimal to preserve the data when navigating away from the page */
                            autoSave($this, settings, 'set');
                        }
                        if (skip) {
                            return true;
                        }
                        if (this.value === '') {
                            return true;
                        }
                        if (!holder.formatted) {
                            holder.formatQuick(e);
                        }
                    });
                    $this.on('focusout.autoNumeric', function () {
                        holder = getHolder($this);
                        var value = $this.val(),
                            origValue = value,
                            $settings = holder.settingsClone;
                        $settings.onOff = false;
                        if ($settings.aStor) {
                            autoSave($this, $settings, 'set');
                        }
                        if ($settings.nSep === true) {
                            $settings.aSep = $settings.oSep;
                            $settings.aSign = $settings.oSign;
                        }
                        if ($settings.eDec !== null) {
                            $settings.mDec = $settings.oDec;
                            $settings.aPad = $settings.oPad;
                            $settings.nBracket = $settings.oBracket;
                        }
                        if (value !== '') {
                            value = autoStrip(value, $settings);

                            //n.volosatov - введеный ноль терялся при потери фокуса
                            if (value === "") {
                                value = autoRound(origValue, $settings);
                            }

                            if ($settings.trailingNegative) {
                                value = '-' + value;
                                $settings.trailingNegative = false;
                            }
                            if (checkEmpty(value, $settings) === null && autoCheck(value, $settings, $this[0])) {
                                value = fixNumber(value, $settings.aDec, $settings.aNeg);
                                $settings.rawValue = value;
                                value = autoRound(value, $settings);
                                value = presentNumber(value, $settings.aDec, $settings.aNeg);
                            } else {
                                value = $settings.rawValue;
                            }
                        } else {
                            $settings.rawValue = '';
                        }
                        var groupedValue = checkEmpty(value, $settings, false);
                        if (groupedValue === null) {
                            groupedValue = autoGroup(value, $settings);
                        }
                        if (groupedValue !== origValue) {
                            //n.volosatov - для интов
                            if (groupedValue === '' && value === "0") {
                                $this.val(value);
                            } else {
                                $this.val(groupedValue);
                            }
                        }
                        if (groupedValue !== holder.inVal) {
                            $this.change();
                            delete holder.inVal;
                        }
                    });
                    //$this.closest('form').on('submit.autoNumeric', function () {
                    //    holder = getHolder($this);
                    //    var $settings = holder.settingsClone;
                    //    if ($settings.unSetOnSubmit) {
                    //        $this.val($settings.rawValue);
                    //    }

                    //});
                }
            });
        },

        /**
         * method to remove settings and stop autoNumeric() - does not remove the formatting
         * $(someSelector).autoNumeric('destroy'); // destroys autoNumeric
         * no parameters accepted
         */
        destroy: function () {
            return $(this).each(function () {
                var $this = autoGet($(this)),
                    settings = $this.data('autoNumeric');
                if (typeof settings === 'object') {
                    $this.val('');
                    autoSave($this, settings, 'wipe');
                    $this.off('.autoNumeric');
                    $this.removeData('autoNumeric');
                }
            });
        },

        /**
         * method to clear the value and sessionStorage or cookie depending on browser supports
         * $(someSelector).autoNumeric('wipe'); // removes session storage and cookies from memory
         * no parameters accepted
         */
        wipe: function () {
            return $(this).each(function () {
                var $this = autoGet($(this)),
                    settings = $this.data('autoNumeric');
                if (typeof settings === 'object') {
                    $this.val('');
                    settings.rawValue = '';
                    autoSave($this, settings, 'wipe');
                }
            });
        },

        /**
         * method to update settings - can be call as many times
         * $(someSelector).autoNumeric('update', {options}); // updates the settings
         * options passed as a parameter example '{aSep: '.', aDec: ',', aSign: '€ '}
         */
        update: function (options) {
            return $(this).each(function () {
                var $this = autoGet($(this)),
                    settings = $this.data('autoNumeric');
                if (typeof settings !== 'object') {
                    throwErr('Initializing autoNumeric is required prior to calling the "update" method', true);
                }
                var strip = $this.autoNumeric('get');
                settings = $.extend(settings, options);
                settings = originalSettings(settings);
                getHolder($this, settings, true);
                if (settings.aDec === settings.aSep) {
                    throwErr('autoNumeric will not function properly when the decimal character aDec: "' + settings.aDec + '" and thousand separator aSep: "' + settings.aSep + '" are the same character', settings.debug);
                }
                $this.data('autoNumeric', settings);
                if ($this.val() !== '' || $this.text() !== '') {
                    return $this.autoNumeric('set', strip);
                }
                return;
            });
        },

        /**
         * method to format value sent as a parameter ""
         * $(someSelector).autoNumeric('set', 'value'}); // formats the value being passed
         * value passed as a string - can be a integer '1234' or double '1234.56789'
         * must contain only numbers and one decimal (period) character
         */
        set: function (valueIn) {
            return $(this).each(function () {
                if (valueIn === null) {
                    return;
                }
                var $this = autoGet($(this)),
                    settings = $this.data('autoNumeric'),
                    value = valueIn.toString(),
                    $input = $this.is('input[type=text], input[type=hidden], input[type=tel], input:not([type])');
                if (typeof settings !== 'object') {
                    throwErr('Initializing autoNumeric is required prior to calling the "set" method', true);
                }
                /** allows locale decimal separator to be a comma - no thousand separator allowed */
                value = convertLocale(value);
                /** Throws an error if the value being set is not numeric */
                if (!$.isNumeric(Number(value))) {
                    throwErr('The value "' + value + '" being "set" is not numeric and has caused a error to be thrown', settings.debug);
                }
                if (value !== '') {
                    if (autoCheck(value, settings)) {
                        if ($input && settings.eDec !== null) {
                            settings.rawValue = value;
                        }
                        if ($input || $.inArray($this.prop('tagName').toLowerCase(), settings.tagList) !== -1) { /** checks if the value falls within the min max range */
                            value = autoRound(value, settings);
                            if (settings.eDec === null) {
                                settings.rawValue = value;
                            }
                            value = presentNumber(value, settings.aDec, settings.aNeg);
                            value = autoGroup(value, settings);
                        }
                        if (settings.aStor && settings.eDec !== null) {
                            autoSave($this, settings, 'set');
                        }
                    } else {
                        settings.rawValue = '';
                        autoSave($this, settings, 'wipe');
                        value = '';
                        throwErr('The value being set falls outside the min: "' + settings.vMin + ' max: "' + settings.vMax + '" ) settings for this element', settings.debug);
                        return '';
                    }
                } else {
                    return '';
                }
                if ($input) {
                    return $this.val(value);
                }
                if ($.inArray($this.prop('tagName').toLowerCase(), settings.tagList) !== -1) {
                    return $this.text(value);
                }
                return false;
            });
        },

        /**
         * method to un-format inputs - handy to use right before form submission
         * $(someSelector).autoNumeric('unSet'); // parameter optional
         * $(someSelector).autoNumeric('unSet', 'komma'); // returns string '1234,56' with a komma as the decimal character
         * $(someSelector).autoNumeric('unSet', 'checkOptions'); // returns string '1234.56' or '1234.56' depending of the format setting for the input
         */
        unSet: function (outPut) {
            return $(this).each(function () {
                var $this = autoGet($(this)),
                    settings = $this.data('autoNumeric');
                if (typeof settings === 'object') {
                    settings.onOff = true;
                    $this.val($this.autoNumeric('get', outPut));
                }
            });
        },

        /**
         * method to re-format inputs - handy to use right after form submission
         * $(someSelector).autoNumeric('reSet'); // no parameters accepted
         * this is called after the 'unSet' method to reformat the input
         */
        reSet: function () {
            return $(this).each(function () {
                var $this = autoGet($(this)),
                    settings = $this.data('autoNumeric');
                if (typeof settings === 'object') {
                    $this.autoNumeric('set', $this.val());
                }
            });
        },

        /**
         * method to get the unformatted that accepts up to one parameter
         * $(someSelector).autoNumeric('get'); no parameter used - values returned as ISO numeric string "1234.56" where the decimal character is a period
         * $(someSelector).autoNumeric('get', 'asKomma'); values returned as strings "nnnn,nn" where the comma / komma is the decimal character
         * $(someSelector).autoNumeric('get', 'checkOptions'); values returned as strings - either as "nnnn.nn" or "nnnn,mm" depending of the format setting for the input
         * only the first element in the selector is returned
         */
        get: function (outPut) {
            var $this = autoGet($(this)),
                settings = $this.data('autoNumeric'),
                $input = $this.is('input[type=text], input[type=hidden], input[type=tel], input:not([type])');
            if (typeof settings !== 'object') {
                throwErr('Initializing autoNumeric is required prior to calling the "get" method', true);
            }
            var getValue = '';
            /** determine the element type then use .eq(0) selector to grab the value of the first element in selector */
            if ($input) {
                getValue = $this.eq(0).val();
            } else if ($.inArray($this.prop('tagName').toLowerCase(), settings.tagList) !== -1) {
                getValue = $this.eq(0).text();
            } else {
                throwErr('The "<' + $this.prop('tagName').toLowerCase() + '>" is not supported by autoNumeric()', settings.debug);
            }
            if (settings.rawValue !== '') {
                getValue = settings.rawValue;
            }
            if (!((/\d/).test(getValue) || Number(getValue) === 0) && settings.wEmpty === 'focus') {
                return '';
            }
            if (getValue !== '' && settings.nBracket !== null) {
                settings.onOff = true;
                getValue = negativeBracket(getValue, settings);
            }
            getValue = fixNumber(getValue, settings.aDec, settings.aNeg);
            if (Number(getValue) === 0 && settings.lZero !== 'keep') {
                getValue = '0';
            }
            if (outPut === ',') {
                getValue = getValue.replace('.', ',');
            }
            if (outPut === '.-' && getValue.indexOf('-') > -1) {
                getValue = getValue.replace('-', '') + '-';
            }
            if (outPut === ',-' && getValue.indexOf('-') > -1) {
                getValue = getValue.replace('.', ',').replace('-', '') + '-';
            }
            return getValue; /** returned Numeric String */
        },

        /**
         * The 'getString' method used jQuerys .serialize() method that creates a text string in standard URL-encoded notation
         * it then loops through the string and un-formats the inputs with autoNumeric
         * $(someSelector).autoNumeric('getString'); no parameter used - values returned as ISO numeric string "1234.56" where the decimal character is a period
         * $(someSelector).autoNumeric('getString', 'asKomma'); values returned as strings "nnnn,nn" where the comma / komma is the decimal character
         * $(someSelector).autoNumeric('getString', 'checkOptions'); values returned as strings - either as "nnnn.nn" or "nnnn,mm" depending of the format setting for the input
         */
        getString: function (outPut) {
            var $this = autoGet($(this)),
                formFields = $this.serialize(),
                formParts = formFields.split('&'),
                formIndex = $('form').index($this),
                allFormElements = $('form:eq(' + formIndex + ')'),
                aiIndex = [],
                /** all input index */
                scIndex = [],
                /** successful control index */
                rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
                /* from jQuery serialize method */
                rsubmittable = /^(?:input|select|textarea|keygen)/i,
                /* from jQuery serialize method */
                rcheckableType = /^(?:checkbox|radio)$/i,
                rnonAutoNumericTypes = /^(?:button|checkbox|color|date|datetime|datetime-local|email|file|image|month|number|password|radio|range|reset|search|submit|time|url|week)/i,
                count = 0;
            /*jslint unparam: true*/
            /** index of successful elements */
            $.each(allFormElements[0], function (i, field) {
                if (field.name !== '' && rsubmittable.test(field.localName) && !rsubmitterTypes.test(field.type) && !field.disabled && (field.checked || !rcheckableType.test(field.type))) {
                    scIndex.push(count);
                    count = count + 1;
                } else {
                    scIndex.push(-1);
                }
            });
            /** index of all inputs tags except checkbox */
            count = 0;
            $.each(allFormElements[0], function (i, field) {
                if (field.localName === 'input' && (field.type === '' || field.type === 'text' || field.type === 'hidden' || field.type === 'tel')) {
                    aiIndex.push(count);
                    count = count + 1;
                } else {
                    aiIndex.push(-1);
                    if (field.localName === 'input' && rnonAutoNumericTypes.test(field.type)) {
                        count = count + 1;
                    }
                }
            });
            $.each(formParts, function (i, miniParts) {
                miniParts = formParts[i].split('=');
                var scElement = $.inArray(i, scIndex);
                if (scElement > -1 && aiIndex[scElement] > -1) {
                    var testInput = $('form:eq(' + formIndex + ') input:eq(' + aiIndex[scElement] + ')'),
                        settings = testInput.data('autoNumeric');
                    if (typeof settings === 'object') {
                        if (miniParts[1] !== null) {
                            miniParts[1] = $('form:eq(' + formIndex + ') input:eq(' + aiIndex[scElement] + ')').autoNumeric('get', outPut).toString();
                            formParts[i] = miniParts.join('=');
                        }
                    }
                }
            });
            /*jslint unparam: false*/
            return formParts.join('&');
        },

        /**
         * The 'getString' method used jQuerys .serializeArray() method that creates array or objects that can be encoded as a JSON string
         * it then loops through the string and un-formats the inputs with autoNumeric
         * $(someSelector).autoNumeric('getArray'); no parameter used - values returned as ISO numeric string "1234.56" where the decimal character is a period
         * $(someSelector).autoNumeric('getArray', 'asKomma'); values returned as strings "nnnn,nn" where the comma / komma is the decimal character
         * $(someSelector).autoNumeric('getArray', 'checkOptions'); values returned as strings - either as "nnnn.nn" or "nnnn,mm" depending of the format setting for the input
         */
        getArray: function (outPut) {
            var $this = autoGet($(this)),
                formFields = $this.serializeArray(),
                formIndex = $('form').index($this),
                allFormElements = $('form:eq(' + formIndex + ')'),
                aiIndex = [],
                /* all input index */
                scIndex = [],
                /* successful control index */
                rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
                /* from jQuery serialize method */
                rsubmittable = /^(?:input|select|textarea|keygen)/i,
                /* from jQuery serialize method */
                rcheckableType = /^(?:checkbox|radio)$/i,
                rnonAutoNumericTypes = /^(?:button|checkbox|color|date|datetime|datetime-local|email|file|image|month|number|password|radio|range|reset|search|submit|time|url|week)/i,
                count = 0;
            /*jslint unparam: true*/
            /* index of successful elements */
            $.each(allFormElements[0], function (i, field) {
                if (field.name !== '' && rsubmittable.test(field.localName) && !rsubmitterTypes.test(field.type) && !field.disabled && (field.checked || !rcheckableType.test(field.type))) {
                    scIndex.push(count);
                    count = count + 1;
                } else {
                    scIndex.push(-1);
                }
            });
            /* index of all inputs tags */
            count = 0;
            $.each(allFormElements[0], function (i, field) {
                if (field.localName === 'input' && (field.type === '' || field.type === 'text' || field.type === 'hidden' || field.type === 'tel')) {
                    aiIndex.push(count);
                    count = count + 1;
                } else {
                    aiIndex.push(-1);
                    if (field.localName === 'input' && rnonAutoNumericTypes.test(field.type)) {
                        count = count + 1;
                    }
                }
            });
            $.each(formFields, function (i, field) {
                var scElement = $.inArray(i, scIndex);
                if (scElement > -1 && aiIndex[scElement] > -1) {
                    var testInput = $('form:eq(' + formIndex + ') input:eq(' + aiIndex[scElement] + ')'),
                        settings = testInput.data('autoNumeric');
                    if (typeof settings === 'object') {
                        field.value = $('form:eq(' + formIndex + ') input:eq(' + aiIndex[scElement] + ')').autoNumeric('get', outPut).toString();
                    }
                }
            });
            /*jslint unparam: false*/
            return formFields;
        },

        /**
         * The 'getSteetings returns the object with autoNumeric settings for those who need to look under the hood
         * $(someSelector).autoNumeric('getSettings'); // no parameters accepted
         * $(someSelector).autoNumeric('getSettings').aDec; // return the aDec setting as a string - ant valid setting can be used
         */
        getSettings: function () {
            var $this = autoGet($(this));
            return $this.eq(0).data('autoNumeric');
        }
    };

    /**
     * autoNumeric function
     */
    $.fn.autoNumeric = function (method) {
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        }
        if (typeof method === 'object' || !method) {
            return methods.init.apply(this, arguments);
        }
        throwErr('Method "' + method + '" is not supported by autoNumeric()', true);
    };

    /**
     * Defaults are public - these can be overridden by the following:
     * HTML5 data attributes
     * Options passed by the 'init' or 'update' methods
     * Use jQuery's $.extend method for global changes - also a great way to pass ASP.NET current culture settings
     */
    $.fn.autoNumeric.defaults = {
        /** allowed thousand separator characters
         * comma = ','
         * period "full stop" = '.'
         * apostrophe is escaped = '\''
         * space = ' '
         * none = ''
         * NOTE: do not use numeric characters
         */
        aSep: ',',
        /** when true => when the input has focus only the decimal character is visible
         */
        nSep: false,
        /** digital grouping for the thousand separator used in Format
         * dGroup: '2', results in 99,99,99,999 India's lakhs
         * dGroup: '2s', results in 99,999,99,99,999 India's lakhs scaled
         * dGroup: '3', results in 999,999,999 default
         * dGroup: '4', results in 9999,9999,9999 used in some Asian countries
         */
        dGroup: '3',
        /** allowed decimal separator characters
         * period "full stop" = '.'
         * comma = ','
         */
        aDec: '.',
        /** allow to declare alternative decimal separator which is automatically replaced by aDec
         * developed for countries the use a comma ',' as the decimal character
         * and have keyboards\numeric pads that have a period 'full stop' as the decimal characters (Spain is an example)
         */
        altDec: null,
        /** aSign = allowed currency symbol
         * Must be in quotes aSign: '$'
         * space to the right of the currency symbol aSign: '$ '
         * space to the left of the currency symbol aSign: ' $'
         */
        aSign: '',
        /** pSign = placement of currency sign as a p=prefix or s=suffix
         * for prefix pSign: 'p' (default)
         * for suffix pSign: 's'
         */
        pSign: 'p',
        /** placement of negative sign relative to the aSign option l=left, r=right, p=prefix & s=suffix
         * -1,234.56  => defaults no options required
         * 1,234.56-  => {pNeg: 's'}
         * -$1,234.56 => {aSign: '$'}
         * $-1,234.56 => {aSign: '$', pNeg: 'r'}
         * $1,234.56- => {aSign: '$', pNeg: 's'}
         * 1,234.56-$ => {aSign: '$', pSign: 's'}
         * 1,234.56$- => {aSign: '$', pSign: 's', pNeg: 'r'}
         * -1,234.56$ => {aSign: '$', pSign: 's', pNeg: 'p'}
         */
        pNeg: 'l',
        /** Additional suffix
         * Must be in quotes aSuffix: 'gross', a space is allowed aSuffix: ' dollars'
         * Numeric characters and negative sign not allowed'
         */
        aSuffix: '',
        /** maximum possible value
         * value must be enclosed in quotes and use the period for the decimal point
         * value must be larger than vMin
         */
        vMax: '9999999999999.99',
        /** minimum possible value
         * value must be enclosed in quotes and use the period for the decimal point
         * value must be smaller than vMax
         */
        vMin: '-9999999999999.99',
        /** Maximum number of decimal places = used to override decimal places set by the vMin & vMax values
         * value must be enclosed in quotes example mDec: '3',
         */
        mDec: null,
        /** Expanded decimal places visible when input has focus
         * value must be enclosed in quotes example mDec: '3',
         */
        eDec: null,
        /** Set to true to allow the eDec value to be saved with sessionStorage
         * if ie 6 or 7 the value will be saved as a session cookie
         */
        aStor: false,
        /** method used for rounding
         * mRound: 'S', Round-Half-Up Symmetric (default)
         * mRound: 'A', Round-Half-Up Asymmetric
         * mRound: 's', Round-Half-Down Symmetric (lower case s)
         * mRound: 'a', Round-Half-Down Asymmetric (lower case a)
         * mRound: 'B', Round-Half-Even "Bankers Rounding"
         * mRound: 'U', Round Up "Round-Away-From-Zero"
         * mRound: 'D', Round Down "Round-Toward-Zero" - same as truncate
         * mRound: 'C', Round to Ceiling "Toward Positive Infinity"
         * mRound: 'F', Round to Floor "Toward Negative Infinity"
         * mRound: 'N05' Rounds to the nearest .05
         * mRound: 'U05' Rounds up to next .05
         * mRound: 'D05' Rounds down to next .05
         */
        mRound: 'S',
        /** controls decimal padding
         * aPad: true - always Pad decimals with zeros
         * aPad: false - does not pad with zeros.
         * aPad: `some number` - pad decimals with zero to number different from mDec
         * thanks to Jonas Johansson for the suggestion
         */
        aPad: true,
        /** places brackets on negative value -$ 999.99 to (999.99)
         * visible only when the field does NOT have focus the left and right symbols should be enclosed in quotes and separated by a comma
         * nBracket: null - (default)
         * nBracket: '(,)', nBracket: '[,]', nBracket: '<,>' or nBracket: '{,}'
         */
        nBracket: null,
        /** Displayed on empty string ""
         * wEmpty: 'focus' - (default) currency sign displayed and the input receives focus
         * wEmpty: 'press' - currency sign displays on any key being pressed
         * wEmpty: 'always' - always displays the currency sign
         */
        wEmpty: 'focus',
        /** controls leading zero behavior
         * lZero: 'allow', - allows leading zeros to be entered. Zeros will be truncated when entering additional digits. On focusout zeros will be deleted.
         * lZero: 'deny', - allows only one leading zero on values less than one
         * lZero: 'keep', - allows leading zeros to be entered. on focusout zeros will be retained.
         */
        lZero: 'allow',
        /** determine if the default value will be formatted on page ready.
         * true = automatically formats the default value on page ready
         * false = will not format the default value
         */
        aForm: true,
        /** determine if the select all keyboard command will select
         * the complete input text or only the input numeric value
         * if the currency symbol is between the numeric value and the negative sign only the numeric value will selected
         */
        sNumber: false,
        /** helper option for ASP.NET postback
         * should be the value of the unformatted default value
         * examples:
         * no default value='' {anDefault: ''}
         * value=1234.56 {anDefault: '1234.56'}
         */
        anDefault: null,
        /** removes formatting on submit event
         * this output format: positive nnnn.nn, negative -nnnn.nn
         * review the 'unSet' method for other formats
         */
        unSetOnSubmit: false,
        /** error handling function
         * true => all errors are thrown - helpful in site development
         * false => throws errors when calling methods prior to the supported element has been initialized be autoNumeric
         */
        debug: true
    };
}));
/*!
Chosen, a Select Box Enhancer for jQuery and Prototype
by Patrick Filler for Harvest, http://getharvest.com

Version 1.8.2
Full source at https://github.com/harvesthq/chosen
Copyright (c) 2011-2017 Harvest http://getharvest.com

MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
This file is generated by `grunt build`, do not edit it by hand.
*/

(function() {
  var $, AbstractChosen, Chosen, SelectParser,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  SelectParser = (function() {
    function SelectParser() {
      this.options_index = 0;
      this.parsed = [];
    }

    SelectParser.prototype.add_node = function(child) {
      if (child.nodeName.toUpperCase() === "OPTGROUP") {
        return this.add_group(child);
      } else {
        return this.add_option(child);
      }
    };

    SelectParser.prototype.add_group = function(group) {
      var group_position, i, len, option, ref, results1;
      group_position = this.parsed.length;
      this.parsed.push({
        array_index: group_position,
        group: true,
        label: group.label,
        title: group.title ? group.title : void 0,
        children: 0,
        disabled: group.disabled,
        classes: group.className
      });
      ref = group.childNodes;
      results1 = [];
      for (i = 0, len = ref.length; i < len; i++) {
        option = ref[i];
        results1.push(this.add_option(option, group_position, group.disabled));
      }
      return results1;
    };

    SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
      if (option.nodeName.toUpperCase() === "OPTION") {
        if (option.text !== "") {
          if (group_position != null) {
            this.parsed[group_position].children += 1;
          }
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            value: option.value,
            text: option.text,
            html: option.innerHTML,
            title: option.title ? option.title : void 0,
            selected: option.selected,
            disabled: group_disabled === true ? group_disabled : option.disabled,
            group_array_index: group_position,
            group_label: group_position != null ? this.parsed[group_position].label : null,
            classes: option.className,
            style: option.style.cssText
          });
        } else {
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            empty: true
          });
        }
        return this.options_index += 1;
      }
    };

    return SelectParser;

  })();

  SelectParser.select_to_array = function(select) {
    var child, i, len, parser, ref;
    parser = new SelectParser();
    ref = select.childNodes;
    for (i = 0, len = ref.length; i < len; i++) {
      child = ref[i];
      parser.add_node(child);
    }
    return parser.parsed;
  };

  AbstractChosen = (function() {
    function AbstractChosen(form_field, options1) {
      this.form_field = form_field;
      this.options = options1 != null ? options1 : {};
      this.label_click_handler = bind(this.label_click_handler, this);
      if (!AbstractChosen.browser_is_supported()) {
        return;
      }
      this.is_multiple = this.form_field.multiple;
      this.set_default_text();
      this.set_default_values();
      this.setup();
      this.set_up_html();
      this.register_observers();
      this.on_ready();
    }

    AbstractChosen.prototype.set_default_values = function() {
      this.click_test_action = (function(_this) {
        return function(evt) {
          return _this.test_active_click(evt);
        };
      })(this);
      this.activate_action = (function(_this) {
        return function(evt) {
          return _this.activate_field(evt);
        };
      })(this);
      this.active_field = false;
      this.mouse_on_container = false;
      this.results_showing = false;
      this.result_highlighted = null;
      this.is_rtl = this.options.rtl || /\bchosen-rtl\b/.test(this.form_field.className);
      this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
      this.disable_search_threshold = this.options.disable_search_threshold || 0;
      this.disable_search = this.options.disable_search || false;
      this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;
      this.group_search = this.options.group_search != null ? this.options.group_search : true;
      this.search_contains = this.options.search_contains || false;
      this.single_backstroke_delete = this.options.single_backstroke_delete != null ? this.options.single_backstroke_delete : true;
      this.max_selected_options = this.options.max_selected_options || Infinity;
      this.inherit_select_classes = this.options.inherit_select_classes || false;
      this.display_selected_options = this.options.display_selected_options != null ? this.options.display_selected_options : true;
      this.display_disabled_options = this.options.display_disabled_options != null ? this.options.display_disabled_options : true;
      this.include_group_label_in_selected = this.options.include_group_label_in_selected || false;
      this.max_shown_results = this.options.max_shown_results || Number.POSITIVE_INFINITY;
      this.case_sensitive_search = this.options.case_sensitive_search || false;
      return this.hide_results_on_select = this.options.hide_results_on_select != null ? this.options.hide_results_on_select : true;
    };

    AbstractChosen.prototype.set_default_text = function() {
      if (this.form_field.getAttribute("data-placeholder")) {
        this.default_text = this.form_field.getAttribute("data-placeholder");
      } else if (this.is_multiple) {
        this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;
      } else {
        this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;
      }
      this.default_text = this.escape_html(this.default_text);
      return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text;
    };

    AbstractChosen.prototype.choice_label = function(item) {
      if (this.include_group_label_in_selected && (item.group_label != null)) {
        return "<b class='group-name'>" + item.group_label + "</b>" + item.html;
      } else {
        return item.html;
      }
    };

    AbstractChosen.prototype.mouse_enter = function() {
      return this.mouse_on_container = true;
    };

    AbstractChosen.prototype.mouse_leave = function() {
      return this.mouse_on_container = false;
    };

    AbstractChosen.prototype.input_focus = function(evt) {
      if (this.is_multiple) {
        if (!this.active_field) {
          return setTimeout(((function(_this) {
            return function() {
              return _this.container_mousedown();
            };
          })(this)), 50);
        }
      } else {
        if (!this.active_field) {
          return this.activate_field();
        }
      }
    };

    AbstractChosen.prototype.input_blur = function(evt) {
      if (!this.mouse_on_container) {
        this.active_field = false;
        return setTimeout(((function(_this) {
          return function() {
            return _this.blur_test();
          };
        })(this)), 100);
      }
    };

    AbstractChosen.prototype.label_click_handler = function(evt) {
      if (this.is_multiple) {
        return this.container_mousedown(evt);
      } else {
        return this.activate_field();
      }
    };

    AbstractChosen.prototype.results_option_build = function(options) {
      var content, data, data_content, i, len, ref, shown_results;
      content = '';
      shown_results = 0;
      ref = this.results_data;
      for (i = 0, len = ref.length; i < len; i++) {
        data = ref[i];
        data_content = '';
        if (data.group) {
          data_content = this.result_add_group(data);
        } else {
          data_content = this.result_add_option(data);
        }
        if (data_content !== '') {
          shown_results++;
          content += data_content;
        }
        if (options != null ? options.first : void 0) {
          if (data.selected && this.is_multiple) {
            this.choice_build(data);
          } else if (data.selected && !this.is_multiple) {
            this.single_set_selected_text(this.choice_label(data));
          }
        }
        if (shown_results >= this.max_shown_results) {
          break;
        }
      }
      return content;
    };

    AbstractChosen.prototype.result_add_option = function(option) {
      var classes, option_el;
      if (!option.search_match) {
        return '';
      }
      if (!this.include_option_in_results(option)) {
        return '';
      }
      classes = [];
      if (!option.disabled && !(option.selected && this.is_multiple)) {
        classes.push("active-result");
      }
      if (option.disabled && !(option.selected && this.is_multiple)) {
        classes.push("disabled-result");
      }
      if (option.selected) {
        classes.push("result-selected");
      }
      if (option.group_array_index != null) {
        classes.push("group-option");
      }
      if (option.classes !== "") {
        classes.push(option.classes);
      }
      option_el = document.createElement("li");
      option_el.className = classes.join(" ");
      option_el.style.cssText = option.style;
      option_el.setAttribute("data-option-array-index", option.array_index);
      option_el.innerHTML = option.highlighted_html || option.html;
      if (option.title) {
        option_el.title = option.title;
      }
      return this.outerHTML(option_el);
    };

    AbstractChosen.prototype.result_add_group = function(group) {
      var classes, group_el;
      if (!(group.search_match || group.group_match)) {
        return '';
      }
      if (!(group.active_options > 0)) {
        return '';
      }
      classes = [];
      classes.push("group-result");
      if (group.classes) {
        classes.push(group.classes);
      }
      group_el = document.createElement("li");
      group_el.className = classes.join(" ");
      group_el.innerHTML = group.highlighted_html || this.escape_html(group.label);
      if (group.title) {
        group_el.title = group.title;
      }
      return this.outerHTML(group_el);
    };

    AbstractChosen.prototype.results_update_field = function() {
      this.set_default_text();
      if (!this.is_multiple) {
        this.results_reset_cleanup();
      }
      this.result_clear_highlight();
      this.results_build();
      if (this.results_showing) {
        return this.winnow_results();
      }
    };

    AbstractChosen.prototype.reset_single_select_options = function() {
      var i, len, ref, result, results1;
      ref = this.results_data;
      results1 = [];
      for (i = 0, len = ref.length; i < len; i++) {
        result = ref[i];
        if (result.selected) {
          results1.push(result.selected = false);
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    };

    AbstractChosen.prototype.results_toggle = function() {
      if (this.results_showing) {
        return this.results_hide();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.results_search = function(evt) {
      if (this.results_showing) {
        return this.winnow_results();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.winnow_results = function() {
      var escapedQuery, fix, i, len, option, prefix, query, ref, regex, results, results_group, search_match, startpos, suffix, text;
      this.no_results_clear();
      results = 0;
      query = this.get_search_text();
      escapedQuery = query.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
      regex = this.get_search_regex(escapedQuery);
      ref = this.results_data;
      for (i = 0, len = ref.length; i < len; i++) {
        option = ref[i];
        option.search_match = false;
        results_group = null;
        search_match = null;
        option.highlighted_html = '';
        if (this.include_option_in_results(option)) {
          if (option.group) {
            option.group_match = false;
            option.active_options = 0;
          }
          if ((option.group_array_index != null) && this.results_data[option.group_array_index]) {
            results_group = this.results_data[option.group_array_index];
            if (results_group.active_options === 0 && results_group.search_match) {
              results += 1;
            }
            results_group.active_options += 1;
          }
          text = option.group ? option.label : option.text;
          if (!(option.group && !this.group_search)) {
            search_match = this.search_string_match(text, regex);
            option.search_match = search_match != null;
            if (option.search_match && !option.group) {
              results += 1;
            }
            if (option.search_match) {
              if (query.length) {
                startpos = search_match.index;
                prefix = text.slice(0, startpos);
                fix = text.slice(startpos, startpos + query.length);
                suffix = text.slice(startpos + query.length);
                option.highlighted_html = (this.escape_html(prefix)) + "<em>" + (this.escape_html(fix)) + "</em>" + (this.escape_html(suffix));
              }
              if (results_group != null) {
                results_group.group_match = true;
              }
            } else if ((option.group_array_index != null) && this.results_data[option.group_array_index].search_match) {
              option.search_match = true;
            }
          }
        }
      }
      this.result_clear_highlight();
      if (results < 1 && query.length) {
        this.update_results_content("");
        return this.no_results(query);
      } else {
        this.update_results_content(this.results_option_build());
        return this.winnow_results_set_highlight();
      }
    };

    AbstractChosen.prototype.get_search_regex = function(escaped_search_string) {
      var regex_flag, regex_string;
      regex_string = this.search_contains ? escaped_search_string : "(^|\\s|\\b)" + escaped_search_string + "[^\\s]*";
      if (!(this.enable_split_word_search || this.search_contains)) {
        regex_string = "^" + regex_string;
      }
      regex_flag = this.case_sensitive_search ? "" : "i";
      return new RegExp(regex_string, regex_flag);
    };

    AbstractChosen.prototype.search_string_match = function(search_string, regex) {
      var match;
      match = regex.exec(search_string);
      if (!this.search_contains && (match != null ? match[1] : void 0)) {
        match.index += 1;
      }
      return match;
    };

    AbstractChosen.prototype.choices_count = function() {
      var i, len, option, ref;
      if (this.selected_option_count != null) {
        return this.selected_option_count;
      }
      this.selected_option_count = 0;
      ref = this.form_field.options;
      for (i = 0, len = ref.length; i < len; i++) {
        option = ref[i];
        if (option.selected) {
          this.selected_option_count += 1;
        }
      }
      return this.selected_option_count;
    };

    AbstractChosen.prototype.choices_click = function(evt) {
      evt.preventDefault();
      this.activate_field();
      if (!(this.results_showing || this.is_disabled)) {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.keydown_checker = function(evt) {
      var ref, stroke;
      stroke = (ref = evt.which) != null ? ref : evt.keyCode;
      this.search_field_scale();
      if (stroke !== 8 && this.pending_backstroke) {
        this.clear_backstroke();
      }
      switch (stroke) {
        case 8:
          this.backstroke_length = this.get_search_field_value().length;
          break;
        case 9:
          if (this.results_showing && !this.is_multiple) {
            this.result_select(evt);
          }
          this.mouse_on_container = false;
          break;
        case 13:
          if (this.results_showing) {
            evt.preventDefault();
          }
          break;
        case 27:
          if (this.results_showing) {
            evt.preventDefault();
          }
          break;
        case 32:
          if (this.disable_search) {
            evt.preventDefault();
          }
          break;
        case 38:
          evt.preventDefault();
          this.keyup_arrow();
          break;
        case 40:
          evt.preventDefault();
          this.keydown_arrow();
          break;
      }
    };

    AbstractChosen.prototype.keyup_checker = function(evt) {
      var ref, stroke;
      stroke = (ref = evt.which) != null ? ref : evt.keyCode;
      this.search_field_scale();
      switch (stroke) {
        case 8:
          if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {
            this.keydown_backstroke();
          } else if (!this.pending_backstroke) {
            this.result_clear_highlight();
            this.results_search();
          }
          break;
        case 13:
          evt.preventDefault();
          if (this.results_showing) {
            this.result_select(evt);
          }
          break;
        case 27:
          if (this.results_showing) {
            this.results_hide();
          }
          break;
        case 9:
        case 16:
        case 17:
        case 18:
        case 38:
        case 40:
        case 91:
          break;
        default:
          this.results_search();
          break;
      }
    };

    AbstractChosen.prototype.clipboard_event_checker = function(evt) {
      if (this.is_disabled) {
        return;
      }
      return setTimeout(((function(_this) {
        return function() {
          return _this.results_search();
        };
      })(this)), 50);
    };

    AbstractChosen.prototype.container_width = function() {
      if (this.options.width != null) {
        return this.options.width;
      } else {
        return this.form_field.offsetWidth + "px";
      }
    };

    AbstractChosen.prototype.include_option_in_results = function(option) {
      if (this.is_multiple && (!this.display_selected_options && option.selected)) {
        return false;
      }
      if (!this.display_disabled_options && option.disabled) {
        return false;
      }
      if (option.empty) {
        return false;
      }
      return true;
    };

    AbstractChosen.prototype.search_results_touchstart = function(evt) {
      this.touch_started = true;
      return this.search_results_mouseover(evt);
    };

    AbstractChosen.prototype.search_results_touchmove = function(evt) {
      this.touch_started = false;
      return this.search_results_mouseout(evt);
    };

    AbstractChosen.prototype.search_results_touchend = function(evt) {
      if (this.touch_started) {
        return this.search_results_mouseup(evt);
      }
    };

    AbstractChosen.prototype.outerHTML = function(element) {
      var tmp;
      if (element.outerHTML) {
        return element.outerHTML;
      }
      tmp = document.createElement("div");
      tmp.appendChild(element);
      return tmp.innerHTML;
    };

    AbstractChosen.prototype.get_single_html = function() {
        return "<a class=\"chosen-single chosen-default\">\n  <span>" + this.default_text + "</span>\n<div><li class=\"caret\"></li></div>\n</a>\n<div class=\"chosen-drop\">\n  <div class=\"chosen-search\">\n    <input class=\"chosen-search-input\" type=\"text\" autocomplete=\"off\" />\n  </div>\n  <ul class=\"chosen-results\"></ul>\n</div>";
    };

    AbstractChosen.prototype.get_multi_html = function() {
      return "<ul class=\"chosen-choices\">\n  <li class=\"search-field\">\n    <input class=\"chosen-search-input\" type=\"text\" autocomplete=\"off\" value=\"" + this.default_text + "\" />\n  </li>\n</ul>\n<div class=\"chosen-drop\">\n  <ul class=\"chosen-results\"></ul>\n</div>";
    };

    AbstractChosen.prototype.get_no_results_html = function(terms) {
      return "<li class=\"no-results\">\n  " + this.results_none_found + " <span>" + (this.escape_html(terms)) + "</span>\n</li>";
    };

    AbstractChosen.browser_is_supported = function() {
      if ("Microsoft Internet Explorer" === window.navigator.appName) {
        return document.documentMode >= 8;
      }
      if (/iP(od|hone)/i.test(window.navigator.userAgent) || /IEMobile/i.test(window.navigator.userAgent) || /Windows Phone/i.test(window.navigator.userAgent) || /BlackBerry/i.test(window.navigator.userAgent) || /BB10/i.test(window.navigator.userAgent) || /Android.*Mobile/i.test(window.navigator.userAgent)) {
        return false;
      }
      return true;
    };

    AbstractChosen.default_multiple_text = "Select Some Options";

    AbstractChosen.default_single_text = "Select an Option";

    AbstractChosen.default_no_result_text = "Совпадений не найдено";

    return AbstractChosen;

  })();

  $ = jQuery;

  $.fn.extend({
    chosen: function(options) {
      if (!AbstractChosen.browser_is_supported()) {
        return this;
      }
      return this.each(function(input_field) {
        var $this, chosen;
        $this = $(this);
        chosen = $this.data('chosen');
        if (options === 'destroy') {
          if (chosen instanceof Chosen) {
            chosen.destroy();
          }
          return;
        }
        if (!(chosen instanceof Chosen)) {
          $this.data('chosen', new Chosen(this, options));
        }
      });
    }
  });

  Chosen = (function(superClass) {
    extend(Chosen, superClass);

    function Chosen() {
      return Chosen.__super__.constructor.apply(this, arguments);
    }

    Chosen.prototype.setup = function() {
      this.form_field_jq = $(this.form_field);
      return this.current_selectedIndex = this.form_field.selectedIndex;
    };

    Chosen.prototype.set_up_html = function() {
      var container_classes, container_props;
      container_classes = ["chosen-container"];
      container_classes.push("chosen-container-" + (this.is_multiple ? "multi" : "single"));
      if (this.inherit_select_classes && this.form_field.className) {
        container_classes.push(this.form_field.className);
      }
      if (this.is_rtl) {
        container_classes.push("chosen-rtl");
      }
      container_props = {
        'class': container_classes.join(' '),
        'title': this.form_field.title
      };
      if (this.form_field.id.length) {
        container_props.id = this.form_field.id.replace(/[^\w]/g, '_') + "_chosen";
      }
      this.container = $("<div />", container_props);
      this.container.width(this.container_width());
      if (this.is_multiple) {
        this.container.html(this.get_multi_html());
      } else {
        this.container.html(this.get_single_html());
      }
      this.form_field_jq.hide().after(this.container);
      this.dropdown = this.container.find('div.chosen-drop').first();
      this.search_field = this.container.find('input').first();
      this.search_results = this.container.find('ul.chosen-results').first();
      this.search_field_scale();
      this.search_no_results = this.container.find('li.no-results').first();
      if (this.is_multiple) {
        this.search_choices = this.container.find('ul.chosen-choices').first();
        this.search_container = this.container.find('li.search-field').first();
      } else {
        this.search_container = this.container.find('div.chosen-search').first();
        this.selected_item = this.container.find('.chosen-single').first();
      }
      this.results_build();
      this.set_tab_index();
      return this.set_label_behavior();
    };

    Chosen.prototype.on_ready = function() {
      return this.form_field_jq.trigger("chosen:ready", {
        chosen: this
      });
    };

    Chosen.prototype.register_observers = function() {
      this.container.on('touchstart.chosen', (function(_this) {
        return function(evt) {
          _this.container_mousedown(evt);
        };
      })(this));
      this.container.on('touchend.chosen', (function(_this) {
        return function(evt) {
          _this.container_mouseup(evt);
        };
      })(this));
      this.container.on('mousedown.chosen', (function(_this) {
        return function(evt) {
          _this.container_mousedown(evt);
        };
      })(this));
      this.container.on('mouseup.chosen', (function(_this) {
        return function(evt) {
          _this.container_mouseup(evt);
        };
      })(this));
      this.container.on('mouseenter.chosen', (function(_this) {
        return function(evt) {
          _this.mouse_enter(evt);
        };
      })(this));
      this.container.on('mouseleave.chosen', (function(_this) {
        return function(evt) {
          _this.mouse_leave(evt);
        };
      })(this));
      this.search_results.on('mouseup.chosen', (function(_this) {
        return function(evt) {
          _this.search_results_mouseup(evt);
        };
      })(this));
      this.search_results.on('mouseover.chosen', (function(_this) {
        return function(evt) {
          _this.search_results_mouseover(evt);
        };
      })(this));
      this.search_results.on('mouseout.chosen', (function(_this) {
        return function(evt) {
          _this.search_results_mouseout(evt);
        };
      })(this));
      this.search_results.on('mousewheel.chosen DOMMouseScroll.chosen', (function(_this) {
        return function(evt) {
          _this.search_results_mousewheel(evt);
        };
      })(this));
      this.search_results.on('touchstart.chosen', (function(_this) {
        return function(evt) {
          _this.search_results_touchstart(evt);
        };
      })(this));
      this.search_results.on('touchmove.chosen', (function(_this) {
        return function(evt) {
          _this.search_results_touchmove(evt);
        };
      })(this));
      this.search_results.on('touchend.chosen', (function(_this) {
        return function(evt) {
          _this.search_results_touchend(evt);
        };
      })(this));
      this.form_field_jq.on("chosen:updated.chosen", (function(_this) {
        return function(evt) {
          _this.results_update_field(evt);
        };
      })(this));
      this.form_field_jq.on("chosen:activate.chosen", (function(_this) {
        return function(evt) {
          _this.activate_field(evt);
        };
      })(this));
      this.form_field_jq.on("chosen:open.chosen", (function(_this) {
        return function(evt) {
          _this.container_mousedown(evt);
        };
      })(this));
      this.form_field_jq.on("chosen:close.chosen", (function(_this) {
        return function(evt) {
          _this.close_field(evt);
        };
      })(this));
      this.search_field.on('blur.chosen', (function(_this) {
        return function(evt) {
          _this.input_blur(evt);
        };
      })(this));
      this.search_field.on('keyup.chosen', (function(_this) {
        return function(evt) {
          _this.keyup_checker(evt);
        };
      })(this));
      this.search_field.on('keydown.chosen', (function(_this) {
        return function(evt) {
          _this.keydown_checker(evt);
        };
      })(this));
      this.search_field.on('focus.chosen', (function(_this) {
        return function(evt) {
          _this.input_focus(evt);
        };
      })(this));
      this.search_field.on('cut.chosen', (function(_this) {
        return function(evt) {
          _this.clipboard_event_checker(evt);
        };
      })(this));
      this.search_field.on('paste.chosen', (function(_this) {
        return function(evt) {
          _this.clipboard_event_checker(evt);
        };
      })(this));
      if (this.is_multiple) {
        return this.search_choices.on('click.chosen', (function(_this) {
          return function(evt) {
            _this.choices_click(evt);
          };
        })(this));
      } else {
        return this.container.on('click.chosen', function(evt) {
          evt.preventDefault();
        });
      }
    };

    Chosen.prototype.destroy = function() {
      $(this.container[0].ownerDocument).off('click.chosen', this.click_test_action);
      if (this.form_field_label.length > 0) {
        this.form_field_label.off('click.chosen');
      }
      if (this.search_field[0].tabIndex) {
        this.form_field_jq[0].tabIndex = this.search_field[0].tabIndex;
      }
      this.container.remove();
      this.form_field_jq.removeData('chosen');
      return this.form_field_jq.show();
    };

    Chosen.prototype.search_field_disabled = function() {
      this.is_disabled = this.form_field.disabled || this.form_field_jq.parents('fieldset').is(':disabled');
      this.container.toggleClass('chosen-disabled', this.is_disabled);
      this.search_field[0].disabled = this.is_disabled;
      if (!this.is_multiple) {
        this.selected_item.off('focus.chosen', this.activate_field);
      }
      if (this.is_disabled) {
        return this.close_field();
      } else if (!this.is_multiple) {
        return this.selected_item.on('focus.chosen', this.activate_field);
      }
    };

    Chosen.prototype.container_mousedown = function(evt) {
      var ref;
      if (this.is_disabled) {
        return;
      }
      if (evt && ((ref = evt.type) === 'mousedown' || ref === 'touchstart') && !this.results_showing) {
        evt.preventDefault();
      }
      if (!((evt != null) && ($(evt.target)).hasClass("search-choice-close"))) {
        if (!this.active_field) {
          if (this.is_multiple) {
            this.search_field.val("");
          }
          $(this.container[0].ownerDocument).on('click.chosen', this.click_test_action);
          this.results_show();
        } else if (!this.is_multiple && evt && (($(evt.target)[0] === this.selected_item[0]) || $(evt.target).parents("a.chosen-single").length)) {
          evt.preventDefault();
          this.results_toggle();
        }
        return this.activate_field();
      }
    };

    Chosen.prototype.container_mouseup = function(evt) {
      if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
        return this.results_reset(evt);
      }
    };

    Chosen.prototype.search_results_mousewheel = function(evt) {
      var delta;
      if (evt.originalEvent) {
        delta = evt.originalEvent.deltaY || -evt.originalEvent.wheelDelta || evt.originalEvent.detail;
      }
      if (delta != null) {
        evt.preventDefault();
        if (evt.type === 'DOMMouseScroll') {
          delta = delta * 40;
        }
        return this.search_results.scrollTop(delta + this.search_results.scrollTop());
      }
    };

    Chosen.prototype.blur_test = function(evt) {
      if (!this.active_field && this.container.hasClass("chosen-container-active")) {
        return this.close_field();
      }
    };

    Chosen.prototype.close_field = function() {
      $(this.container[0].ownerDocument).off("click.chosen", this.click_test_action);
      this.active_field = false;
      this.results_hide();
      this.container.removeClass("chosen-container-active");
      this.clear_backstroke();
      this.show_search_field_default();
      this.search_field_scale();
      return this.search_field.blur();
    };

    Chosen.prototype.activate_field = function() {
      if (this.is_disabled) {
        return;
      }
      this.container.addClass("chosen-container-active");
      this.active_field = true;
      this.search_field.val(this.search_field.val());
      return this.search_field.focus();
    };

    Chosen.prototype.test_active_click = function(evt) {
      var active_container;
      active_container = $(evt.target).closest('.chosen-container');
      if (active_container.length && this.container[0] === active_container[0]) {
        return this.active_field = true;
      } else {
        return this.close_field();
      }
    };

    Chosen.prototype.results_build = function() {
      this.parsing = true;
      this.selected_option_count = null;
      this.results_data = SelectParser.select_to_array(this.form_field);
      if (this.is_multiple) {
        this.search_choices.find("li.search-choice").remove();
      } else if (!this.is_multiple) {
        this.single_set_selected_text();
        if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
          this.search_field[0].readOnly = true;
          this.container.addClass("chosen-container-single-nosearch");
        } else {
          this.search_field[0].readOnly = false;
          this.container.removeClass("chosen-container-single-nosearch");
        }
      }
      this.update_results_content(this.results_option_build({
        first: true
      }));
      this.search_field_disabled();
      this.show_search_field_default();
      this.search_field_scale();
      return this.parsing = false;
    };

    Chosen.prototype.result_do_highlight = function(el) {
      var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
      if (el.length) {
        this.result_clear_highlight();
        this.result_highlight = el;
        this.result_highlight.addClass("highlighted");
        maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
        visible_top = this.search_results.scrollTop();
        visible_bottom = maxHeight + visible_top;
        high_top = this.result_highlight.position().top + this.search_results.scrollTop();
        high_bottom = high_top + this.result_highlight.outerHeight();
        if (high_bottom >= visible_bottom) {
          return this.search_results.scrollTop((high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0);
        } else if (high_top < visible_top) {
          return this.search_results.scrollTop(high_top);
        }
      }
    };

    Chosen.prototype.result_clear_highlight = function() {
      if (this.result_highlight) {
        this.result_highlight.removeClass("highlighted");
      }
      return this.result_highlight = null;
    };

    Chosen.prototype.results_show = function() {
      if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
        this.form_field_jq.trigger("chosen:maxselected", {
          chosen: this
        });
        return false;
      }
      this.container.addClass("chosen-with-drop");
      this.results_showing = true;
      this.search_field.focus();
      this.search_field.val(this.get_search_field_value());
      this.winnow_results();
      return this.form_field_jq.trigger("chosen:showing_dropdown", {
        chosen: this
      });
    };

    Chosen.prototype.update_results_content = function(content) {
      return this.search_results.html(content);
    };

    Chosen.prototype.results_hide = function() {
      if (this.results_showing) {
        this.result_clear_highlight();
        this.container.removeClass("chosen-with-drop");
        this.form_field_jq.trigger("chosen:hiding_dropdown", {
          chosen: this
        });
      }
      return this.results_showing = false;
    };

    Chosen.prototype.set_tab_index = function(el) {
      var ti;
      if (this.form_field.tabIndex) {
        ti = this.form_field.tabIndex;
        this.form_field.tabIndex = -1;
        return this.search_field[0].tabIndex = ti;
      }
    };

    Chosen.prototype.set_label_behavior = function() {
      this.form_field_label = this.form_field_jq.parents("label");
      if (!this.form_field_label.length && this.form_field.id.length) {
        this.form_field_label = $("label[for='" + this.form_field.id + "']");
      }
      if (this.form_field_label.length > 0) {
        return this.form_field_label.on('click.chosen', this.label_click_handler);
      }
    };

    Chosen.prototype.show_search_field_default = function() {
      if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
        this.search_field.val(this.default_text);
        return this.search_field.addClass("default");
      } else {
        this.search_field.val("");
        return this.search_field.removeClass("default");
      }
    };

    Chosen.prototype.search_results_mouseup = function(evt) {
      var target;
      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target.length) {
        this.result_highlight = target;
        this.result_select(evt);
        return this.search_field.focus();
      }
    };

    Chosen.prototype.search_results_mouseover = function(evt) {
      var target;
      target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
      if (target) {
        return this.result_do_highlight(target);
      }
    };

    Chosen.prototype.search_results_mouseout = function(evt) {
      if ($(evt.target).hasClass("active-result") || $(evt.target).parents('.active-result').first()) {
        return this.result_clear_highlight();
      }
    };

    Chosen.prototype.choice_build = function(item) {
      var choice, close_link;
      choice = $('<li />', {
        "class": "search-choice"
      }).html("<span>" + (this.choice_label(item)) + "</span>");
      if (item.disabled) {
        choice.addClass('search-choice-disabled');
      } else {
        close_link = $('<a />', {
          "class": 'search-choice-close',
          'data-option-array-index': item.array_index
        });
        close_link.on('click.chosen', (function(_this) {
          return function(evt) {
            return _this.choice_destroy_link_click(evt);
          };
        })(this));
        choice.append(close_link);
      }
      return this.search_container.before(choice);
    };

    Chosen.prototype.choice_destroy_link_click = function(evt) {
      evt.preventDefault();
      evt.stopPropagation();
      if (!this.is_disabled) {
        return this.choice_destroy($(evt.target));
      }
    };

    Chosen.prototype.choice_destroy = function(link) {
      if (this.result_deselect(link[0].getAttribute("data-option-array-index"))) {
        if (this.active_field) {
          this.search_field.focus();
        } else {
          this.show_search_field_default();
        }
        if (this.is_multiple && this.choices_count() > 0 && this.get_search_field_value().length < 1) {
          this.results_hide();
        }
        link.parents('li').first().remove();
        return this.search_field_scale();
      }
    };

    Chosen.prototype.results_reset = function() {
      this.reset_single_select_options();
      this.form_field.options[0].selected = true;
      this.single_set_selected_text();
      this.show_search_field_default();
      this.results_reset_cleanup();
      this.trigger_form_field_change();
      if (this.active_field) {
        return this.results_hide();
      }
    };

    Chosen.prototype.results_reset_cleanup = function() {
      this.current_selectedIndex = this.form_field.selectedIndex;
      return this.selected_item.find("abbr").remove();
    };

    Chosen.prototype.result_select = function(evt) {
      var high, item;
      if (this.result_highlight) {
        high = this.result_highlight;
        this.result_clear_highlight();
        if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
          this.form_field_jq.trigger("chosen:maxselected", {
            chosen: this
          });
          return false;
        }
        if (this.is_multiple) {
          high.removeClass("active-result");
        } else {
          this.reset_single_select_options();
        }
        high.addClass("result-selected");
        item = this.results_data[high[0].getAttribute("data-option-array-index")];
        item.selected = true;
        this.form_field.options[item.options_index].selected = true;
        this.selected_option_count = null;
        this.search_field.val("");
        if (this.is_multiple) {
          this.choice_build(item);
        } else {
          this.single_set_selected_text(this.choice_label(item));
        }
        if (this.is_multiple && (!this.hide_results_on_select || (evt.metaKey || evt.ctrlKey))) {
          this.winnow_results();
        } else {
          this.results_hide();
          this.show_search_field_default();
        }
        if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {
          this.trigger_form_field_change({
            selected: this.form_field.options[item.options_index].value
          });
        }
        this.current_selectedIndex = this.form_field.selectedIndex;
        evt.preventDefault();
        return this.search_field_scale();
      }
    };

    Chosen.prototype.single_set_selected_text = function(text) {
      if (text == null) {
        text = this.default_text;
      }
      if (text === this.default_text) {
        this.selected_item.addClass("chosen-default");
      } else {
        this.single_deselect_control_build();
        this.selected_item.removeClass("chosen-default");
      }
      return this.selected_item.find("span").html(text);
    };

    Chosen.prototype.result_deselect = function(pos) {
      var result_data;
      result_data = this.results_data[pos];
      if (!this.form_field.options[result_data.options_index].disabled) {
        result_data.selected = false;
        this.form_field.options[result_data.options_index].selected = false;
        this.selected_option_count = null;
        this.result_clear_highlight();
        if (this.results_showing) {
          this.winnow_results();
        }
        this.trigger_form_field_change({
          deselected: this.form_field.options[result_data.options_index].value
        });
        this.search_field_scale();
        return true;
      } else {
        return false;
      }
    };

    Chosen.prototype.single_deselect_control_build = function() {
      if (!this.allow_single_deselect) {
        return;
      }
      if (!this.selected_item.find("abbr").length) {
        this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
      }
      return this.selected_item.addClass("chosen-single-with-deselect");
    };

    Chosen.prototype.get_search_field_value = function() {
      return this.search_field.val();
    };

    Chosen.prototype.get_search_text = function() {
      return $.trim(this.get_search_field_value());
    };

    Chosen.prototype.escape_html = function(text) {
      return $('<div/>').text(text).html();
    };

    Chosen.prototype.winnow_results_set_highlight = function() {
      var do_high, selected_results;
      selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
      do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
      if (do_high != null) {
        return this.result_do_highlight(do_high);
      }
    };

    Chosen.prototype.no_results = function(terms) {
      var no_results_html;
      no_results_html = this.get_no_results_html(terms);
      this.search_results.append(no_results_html);
      return this.form_field_jq.trigger("chosen:no_results", {
        chosen: this
      });
    };

    Chosen.prototype.no_results_clear = function() {
      return this.search_results.find(".no-results").remove();
    };

    Chosen.prototype.keydown_arrow = function() {
      var next_sib;
      if (this.results_showing && this.result_highlight) {
        next_sib = this.result_highlight.nextAll("li.active-result").first();
        if (next_sib) {
          return this.result_do_highlight(next_sib);
        }
      } else {
        return this.results_show();
      }
    };

    Chosen.prototype.keyup_arrow = function() {
      var prev_sibs;
      if (!this.results_showing && !this.is_multiple) {
        return this.results_show();
      } else if (this.result_highlight) {
        prev_sibs = this.result_highlight.prevAll("li.active-result");
        if (prev_sibs.length) {
          return this.result_do_highlight(prev_sibs.first());
        } else {
          if (this.choices_count() > 0) {
            this.results_hide();
          }
          return this.result_clear_highlight();
        }
      }
    };

    Chosen.prototype.keydown_backstroke = function() {
      var next_available_destroy;
      if (this.pending_backstroke) {
        this.choice_destroy(this.pending_backstroke.find("a").first());
        return this.clear_backstroke();
      } else {
        next_available_destroy = this.search_container.siblings("li.search-choice").last();
        if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
          this.pending_backstroke = next_available_destroy;
          if (this.single_backstroke_delete) {
            return this.keydown_backstroke();
          } else {
            return this.pending_backstroke.addClass("search-choice-focus");
          }
        }
      }
    };

    Chosen.prototype.clear_backstroke = function() {
      if (this.pending_backstroke) {
        this.pending_backstroke.removeClass("search-choice-focus");
      }
      return this.pending_backstroke = null;
    };

    Chosen.prototype.search_field_scale = function() {
      var div, i, len, style, style_block, styles, width;
      if (!this.is_multiple) {
        return;
      }
      style_block = {
        position: 'absolute',
        left: '-1000px',
        top: '-1000px',
        display: 'none',
        whiteSpace: 'pre'
      };
      styles = ['fontSize', 'fontStyle', 'fontWeight', 'fontFamily', 'lineHeight', 'textTransform', 'letterSpacing'];
      for (i = 0, len = styles.length; i < len; i++) {
        style = styles[i];
        style_block[style] = this.search_field.css(style);
      }
      div = $('<div />').css(style_block);
      div.text(this.get_search_field_value());
      $('body').append(div);
      width = div.width() + 25;
      div.remove();
      if (this.container.is(':visible')) {
        width = Math.min(this.container.outerWidth() - 10, width);
      }
      return this.search_field.width(width);
    };

    Chosen.prototype.trigger_form_field_change = function(extra) {
      this.form_field_jq.trigger("input", extra);
      return this.form_field_jq.trigger("change", extra);
    };

    return Chosen;

  })(AbstractChosen);

}).call(this);

// Хелпер для работы с формами
var FormHelper = (function () {

    var toggleVisibility = function (elementId) {
        var x = document.getElementById(elementId);

        if (x != null) {
            if (x.style.display === 'none') {
                x.style.display = 'block';
            } else {
                x.style.display = 'none';
            }
        }
    }

    // инициализация формы
    var init = function (options) {

        // обработчик submit формы
        var submitHandler;

        //отключаем автообновление, потому что надо показать сообщение и оно не покажется если страница обновится.
        if (window.docChangeObserver) window.docChangeObserver.disable();

        // документ, в котором находится форма
        var document1 = options.document;
        // dom-объект формы
        var formDomObj = document1.find(".action-form").get(0);

        // Подписка на события формы
        var subscribe = function () {
            $(formDomObj).bind("submit", submitHandler);
        };

        // Отписка от событий формы
        var unsubscribe = function () {
            $(formDomObj).unbind("submit", submitHandler);
        };

        var call = function (func, control, event) {
            if (func == undefined) return;

            var arg = "";
            if (func.indexOf) {
                if (func.indexOf('#') !== -1) {
                    var arr = func.split('#');
                    func = arr[0];
                    arg = arr[1];
                }
            }

            if (typeof func == 'function') {
                func(control, event, arg);
            }
            
            if (typeof func == 'string') {
                window[func](control, event, arg);
            }
        }

        var onStart = function () {          
            $(formDomObj).find("[type='submit']").prop('disabled', true);

            if (options.onStart !== undefined) {
                options.onStart();
            }
        }

        var onFinish = function () {           
            $(formDomObj).find("[type='submit']").prop('disabled', false);

            if (options.onFinish !== undefined) {
                options.onFinish();
            }

            call(options.afterSubmit, options.control, options.event);
        }

        var onSuccess = function () {            
            toggleVisibility('div-context-submit');
            toggleVisibility('div-context-modal');
            toggleVisibility('send-to-eis-question');
            toggleVisibility('action-form');

            if (options.onFinish !== undefined) {
                options.onFinish();
            }

        }

        var submitHandlerInternal = function () {
            if (options.useDefaultSubmit) {
                formDomObj.submit();
                return;
            }
            else if (options.dontSubmit) {
                onSuccess();
                onFinish();
                if (options.document) options.document.modal('toggle');//закрываем модалку
                return;
            }

            // отписываемся от submit
            unsubscribe();

            // submit формы
            ajaxFormSubmit(formDomObj,
                // в случае успеха
                function (data, afterSubmitJs, warnings, jsonData) {
                 
                    if (data && !WorkflowNotificationManager.isNotificationData(data)) {
                        // выводим сообщение об успехе
                        // todo убрать в onMessage?
                        var successMessage = document1.find(".success-message");
                        successMessage.text(data);
                        successMessage.removeClass("hide");
                        var errorMessage = document1.find(".error-message");
                        errorMessage.addClass("hide");
                        
                        var infoMessage = document1.find(".info-message");
                        
                        if (warnings !== undefined) {                             
                            if (!Array.isArray(warnings)) {
                                warnings = [warnings];
                            }

                            infoMessage.text("");
                            var text = "";
                            $.each(warnings, function (i, item) {
                                text = text + item;
                                text = text + " ";
                            });
                            text=text.trim();                           
                          
                            if (text !== '') {
                                infoMessage.text(text);                              
                                infoMessage.removeClass("hide");
                            }
                        }
                        subscribe();
                        onSuccess();

                        if (jsonData && afterSubmitJs) {
                            window[afterSubmitJs](jsonData);
                        }
                    } else {
                        if (options.afterSubmit) {
                            onSuccess();
                            onFinish();
                            if (options.document) options.document.modal('toggle');//закрываем модалку
                        } else {
                            if (WorkflowNotificationManager.isNotificationData(data)) {
                                WorkflowNotificationManager.saveNotificationData(data);
                            }
                            //по умолчанию - страница обновляется
                            var returnUrl = $(formDomObj).find("input[name='returnUrl']").val();
                            //делаем небольшую каку - если returnUrl совпадает с текущим location - обновляем страницу
                            // т.к. если в returnUrl есть якорь, то просто идет переход к якорю без обновления страницы(перехода на нее)

                            if (afterSubmitJs && typeof (afterSubmitJs) !== "undefined") {

                                if (returnUrl && (window.location.href !== returnUrl && (window.location.pathname + window.location.search) !== returnUrl)) {
                                    $("#actionDialog").click();                                    
                                }

                                window.ct.custom[afterSubmitJs](function () {
                                    if (returnUrl && (window.location.href !== returnUrl && (window.location.pathname + window.location.search) !== returnUrl)) {
                                        window.location.href = returnUrl;
                                    } else {
                                        window.location.reload();
                                    }
                                });
                            }
                            else
                            {
                                if (returnUrl && (window.location.href !== returnUrl && (window.location.pathname + window.location.search) !== returnUrl)) {
                                    $("#actionDialog").click();
                                    window.location.href = returnUrl;

                                    if (returnUrl.toLowerCase().indexOf(window.location.pathname.toLowerCase()) !== -1) {
                                        window.ct.common.routesGrid.refresh();
                                    }
                                    
                                } else {
                                    window.location.reload();
                                }
                            }
                        }
                    }
                },
                // в случае ошибки
                function (data) {                   
                    // todo убрать в onMessage?
                    var errorMessage = document1.find(".error-message:last");

                    if (data.allMessages && Array.isArray(data.allMessages) && data.allMessages.length > 0) {
                       
                        var text = data.responseText.replace('.', ":");
                        var title = $("<span/>").text(text);
                        var errorList = $("<ul/>");
                        var l = data.allMessages.length;
                        for (var i = 0; i < l; i++) {
                            var current = data.allMessages[i];
                            var item = $("<li/>").text(current);
                            item.appendTo(errorList);
                        }

                        var wrapper = $("<div/>");                        
                     
                        title.appendTo(wrapper);
                        errorList.appendTo(wrapper);
                        errorMessage.html(wrapper);
                    } else {
                       
                        if (data.fileName!==null) {
                            download(data.fileName, data.responseText);
                            errorMessage.text(data.messageForUser);
                        }
                        else
                            errorMessage.text(data.responseText);
                    }

                    errorMessage.removeClass("hide");
					$('.modal-body').scrollTop(0);

                    subscribe();
                    onFinish();
                });
        }

        function s2ab(s) {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;
        }

        function download(filename, text) {
            var pom = document.createElement('a');         
            var blob = new Blob([s2ab(atob(text, "utf8"))], {
                type: ''
            });
            console.log(window.navigator.appName);
            if (window.navigator.msSaveBlob) {
                window.navigator.msSaveOrOpenBlob(blob, filename);
             
            }
            else {
                pom.setAttribute('href', URL.createObjectURL(blob));
                // link.href = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,' + encodeURIComponent(data);
                pom.setAttribute('download', filename);
                
            }
                if (document.createEvent) {
                    var event = document.createEvent('MouseEvents');
                    event.initEvent('click', true, true);
                    pom.dispatchEvent(event);
                }
                else {
                    pom.click();
                }          

        }

        submitHandler = function (event) {
            onStart();

            // дальше не прокидываем event
            setPreventDefault(event);

            if (options.beforeSubmit !== undefined) {
                var form = document1.find(".action-form");
                var beforeSubmitRes = options.beforeSubmit(event, form);
                //вернулся какой-то результат выполнения действия перед submit
                if (beforeSubmitRes) {
                    if (beforeSubmitRes.then) {//если это promise
                        beforeSubmitRes.then(function (beforeSubmitResAsync) {
                            if (beforeSubmitResAsync) {//от промиса пришла ошибка
                                options.onMessage(beforeSubmitResAsync, true);
                                onFinish();
                            } else {//от промиса пусто - значит все хорошо, идем дальше
                                submitHandlerInternal();
                            }

                        });
                        return;//ждем промис
                    } else {
                        //Произошла ошибка в методе beforeSubmit. Вернулась строка с ошибкой
                        options.onMessage(beforeSubmitRes, true);
                        return;
                    }
                }
            }

            submitHandlerInternal();
        }

        // если не открывалась новая вкладка - повторная подписка на события
        if (!options.isTargetBlank) {
            subscribe();
        }
    }

    // требуется ли валидация для формы
    var requireValidation = function (form) {
        return form.hasClass("parsley-validation");
    }

    // требуется ли подписание формы ЭП
    var requireEds = function (form) {
        return form.find('[name="isSignEDS"]').is(':checked');
    }

    // дефолтный submit формы
    var submitDefault = function (form, options) {
        form.find("[type='submit']").click();
    }

    // submit формы с открытием результата в новой вкладке
    var submitBlank = function (form, options) {
        form.attr("target", "_blank");
       
        if (options.onFinish !== undefined) {
            options.onFinish();
        }

        form.find("[type='submit']").click();
    }

    // submit формы с подписанием ЭП
    var submitEds = function (form, options) {
        var onStart = function () {
            if (options.onStart !== undefined) {
                options.onStart();
            }
        }

        var onFinish = function () {
            form.attr("target", "_blank");
            if (options.onFinish !== undefined) {
                options.onFinish();
            }
        }

        var onMessage = function (message, isError) {

            if (options.onMessage !== undefined) {
                options.onMessage(message, isError);
            }
        }

        // если не выбран серитфикат для подписи - ошибка
        var hasCert = form.find('[name="certificateList"]').find("input:checked").val() != undefined;
        if (!hasCert) {
            onMessage('Выберите сертификат для создания подписи', true);
            return;
        }
        onStart();

        if ($('#signAttachments').is(':checked')) {
            EDS.SignDocumentWithAtachments(function () {
                var isExport = $('[name="isEisExport"]').is(':checked');
                if (isExport) {
                    submitDefault(form);
                } else {
                    onFinish();
                }
            }, onMessage);
        }
        else if ($('[data-name="isSignAllAttachment"]').val()) {
            EDS.SignAttachments(onFinish, onMessage);
        }
        else if ($('[name="isAttachEDS"]').is(':checked')) {
            EDS.SignCreate(onFinish, onMessage);
        }
        else if ($('[name="isEDSAuthentication"]').is(':checked')) {
            EDS.SignAuthentication(onFinish, onMessage);
        }
        else if ($('[name="isActivitySign"]').is(':checked')) {
            EDS.SignCreate(function () {
                var isApproval = $("[data-name='activitySignature']").val();
                isApproval !== undefined ? submitDefault(form) : onFinish();
            },
                onMessage);
        }
        else if ($('[name="isEisExport"]').is(':checked')) {
            EDS.SignForEis(function () { submitDefault(form); }, onMessage);
        } else {
            EDS.SignCreate(function () {
                var isApproval = $("[data-name='activitySignature']").val();
                isApproval !== undefined ? submitDefault(form) : onFinish();
            },
                onMessage);
        }
    }

    var submit = function (options) {
        // документ, в котором находится форма
        var document1 = options.document;

        // форма
        var form = document1.find(".action-form");

        // submit формы
        var submit = function () {

            // непонятно, почему в случае открытия результата в новой вкладке
            // ЭП не проверяется. но так было в common.js, пока не стал трогать - 
            // непонятно, баг это или фича, но выглядит странно.

            // submit и открытие в новое вкладке
            if (options.isTargetBlank) {
                submitBlank(form, { onStart: options.onStart, onFinish: options.onFinish, onMessage: options.onMessage });
            }
            // submit и подписание ЭП
            else if (requireEds(form)) {
                submitEds(form, { onStart: options.onStart, onFinish: options.onFinish, onMessage: options.onMessage });
            }
            // submit по-умолчанию
            else {
                submitDefault(form, { onStart: options.onStart, onFinish: options.onFinish, onMessage: options.onMessage });
            }
        }

        // если требуется валидация формы
        if (requireValidation(form)) {
            var formValidator = form.parsley();
            formValidator.whenValidate().done(submit);
            return false;
        } else {
            submit();
        }

        return true;
    };

    var close = function () {       
        if (window.docChangeObserver) window.docChangeObserver.restart();
    };

    return {
        init: init,
        submit: submit,
        close: close
    }

})($)

// Хелпер для работы с модальными окнами
function ModalHelper(options) {

    options = options || {};

    // модальное окно и его запчасти
    var dialog = $(options.dialog);
    // div, в который выводятся ошибки
    var errors = dialog.find(".modal-errors-wrapper");
    // div, в который выводятся сообщения
    var infos = dialog.find(".modal-info-wrapper");
    // div, в котором отображается контент
    var content = dialog.find(".modal-content-wrapper");
    // div, в котором индикатор-загрузки лежит
    var loading = dialog.find(".modal-loading-wrapper");

    // Очистить модальное окно от ранее загруженного контента
    var clearWindow = function () {

        // очистить список ошибок
        errors.empty();
        errors.hide();

        // очистить список сообщений
        infos.empty();
        infos.hide();

        // очистить контент
        content.empty();
        content.hide();

        // показать индикатор загрузки
        loading.show();
    }

    // Показать модальное окно
    var showWindow = function () {
        // Костылик для EETPZKP-227, чтобы скролл у больших модалок не исчезал.
        // Подробности: https://stackoverflow.com/questions/27646787/bootstrap-scrollbar-disappears-after-closing-modal/27647455
        dialog.css("overflow-y", "scroll");
        dialog.modal('show');
        // ROSTEL-1297 Не закрывать модальное окно при клике вне окна
        dialog.data('bs.modal').options.backdrop = 'static';
    }

    // Обработчик для submit модального окна
    var onModalSubmit = function (event) {

        // ROSTEL-1297 Не закрывать модальное окно при клике вне окна
        dialog.data('bs.modal').options.backdrop = true;

        // очистить список ошибок
        errors.empty();
        errors.hide();

        // очистить список сообщений
        infos.empty();
        infos.hide();
       

        setPreventDefault(event);
        FormHelper.submit({
            document: dialog,
            isTargetBlank: options.isTargetBlank,
            dontSubmit: options.dontSubmit,
            onStart: function () {
                loading.show();
            },
            onFinish: function () {
                loading.hide();

                dialog.find("button[data-dismiss='modal']").click();
            },
            onMessage: function(message, isError) {
                if (isError) {
                    errors.text(message);
                    errors.show();
                    loading.hide();
                } else {
                    infos.text(message);
                    infos.show();
                    loading.hide();
                }
            }
        });
    }

    var onModalClose = function(event) {
        FormHelper.close();
    }


    // Добавить подписки на события модального окна
    var addSubscriptions = function () {
        var submitButton = dialog.find(".btn-submit");

        submitButton.prop('disabled', false);
        submitButton.click(onModalSubmit);
        dialog.on('hidden.bs.modal', function () {
            submitButton.unbind("click", onModalSubmit);
            dialog.children(".modal-dialog").removeClass("modal-large");
            dialog.children(".modal-dialog").removeClass("modal-medium");
            onModalClose();
        });
    }
    
    // todo
    var handleErrors = function() {
        var errorMessage = $('.modal-body-wrapper').attr('data-empty-body-error-message');
        if (errorMessage) {
            errors.text(errorMessage);

            var closeHandler = function (event) {
                setPreventDefault(event);
                dialog.modal('hide');
            };

            dialog.find(".btn-submit").click(closeHandler);
            dialog.on('hidden.bs.modal', function () {
                dialog.find(".btn-submit").unbind("click", closeHandler);
            });

            errors.show();
            dialog.modal('show');
            return;
        }
    }

    var loadContentWithScripts = function(content, url, callback) {
        if (typeof url !== "string") {
            return content;
        }

        var selector,
            response,
            off = url.indexOf(" .");

        if (off > -1) {
            selector = jQuery.trim(url.slice(off));
            url = url.slice(0, off);
        }

        if (content.length > 0) {
            jQuery.ajax({
                url: url,
                type: "GET",
                dataType: "html"
            }).done(function(responseText) {
                response = arguments;
                content.html(selector
                    ? jQuery("<div>").append(jQuery.parseHTML(responseText, undefined, true)).find(selector)
                    : responseText);

                // If the request succeeds, this function gets "data", "status", "jqXHR"
                // but they are ignored because response was set above.
                // If it fails, this function gets "jqXHR", "status", "error"
            }).always(callback &&
                function(jqXHR, status) {
                    content.each(function() {
                        callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
                    });
                });
        }

        return this;
    }

    // Загрузить документ
     // onDocumentLoad - функция, вызываемая при загрузке документа
    var loadDocument = function (onDocumentLoad) {
        // url для загрузки
        var url = appendUrlArgument(options.url, "rand", getTimeStamp());
        url = url + " .context-action-page-body";

        // загрузка документа, елси есть параметр keepScripts вызываем свой лоадер и сохраняем скрипты
        if (options.keepScripts) {
            loadContentWithScripts(content, url, onDocumentLoad);
        } else {
            content.load(url, onDocumentLoad);
        }

    }

 

    // обработка загруженного документа
    var onLoadDocument = function () {
        errors.hide();
        loading.hide();

        // todo
        if (!$(this).html()) {
            handleErrors();
            return;
        }

        // инициализация скриптов в загруженном документе
        DocumentHelper.init(dialog);

        // подписка на события
        addSubscriptions();

        // инициализация формы в загруженном документе
        FormHelper.init({
            document: dialog,
            isTargetBlank: options.isTargetBlank,
            useDefaultSubmit: options.useDefaultSubmit,
            dontSubmit: options.dontSubmit,
            beforeSubmit: options.beforeSubmit,
            afterSubmit: options.afterSubmit,
            control: options.control,
            event: options.event,
            onStart: function () {
                dialog.find(".btn-submit").prop('disabled', true);
                loading.show();
            },
            onFinish: function () {
                dialog.find(".btn-submit").prop('disabled', false);
                loading.hide();
            },
            onMessage: function(message, isError) {
                if (isError) {
                    errors.text(message);
                    errors.show();
                    loading.hide();
                } else {
                    infos.text(message);
                    infos.show();
                    loading.hide();
                }
            }
        });

        // событие загрузки модального окна
        var onModalWindowLoadedParamsObj = {
            validatedFormSelector: ".action-form",
            innerTableContainer: content
        };
        $(document).trigger('onDocumentModalWindowLoaded', onModalWindowLoadedParamsObj);

        updateSubmitButton();
        content.show();
    }

    // Костыль для выключения кнопки, если приходит сообщение, что документ заблокирован на редактировние.
    function updateSubmitButton() {
        var $title = dialog.find(".modal-title");
        if ($title.text() === "Документ редактируется другим пользователем") {
            dialog.find(".btn-submit").prop("disabled", true);
        }
    }

    // Загрузить документ и открыть его в модальном окне
    var openWindow = function () {

        // чистим модальное окно от всего, что было загружено раньше
        clearWindow();

        // показываем модальное окно с индикатором загрузки
        showWindow();

        // загружаем документ
        loadDocument(onLoadDocument);
    };

    return {
        openWindow: openWindow
    };
}

var DocumentHelper = (function () {

    // загрузка и инициализация скриптов документа
    var initScripts = function (document) {

        // инициализация справочников
        resetDictionaryFields();

        
        // scripts.each(function (index, item) {
        //     $.getScript($(item).attr("data-url"));
        // });

        var scripts = document.find(".action-page-scripts .action-page-script");

        var scriptPromise = $.when();

        // загрузка скриптов последовательно
        $.each(scripts, function (index, item) {
            scriptPromise = scriptPromise.then(function () {
                return $.getScript($(item).attr("data-url"));
            }).then(function () {
                console.info("Добавлен скрипт '" + $(item).attr("data-url") + "'.");
            }, function (error) {
                console.log(error);
            });
        });

        scriptPromise.always(function(){
            // инициализация скриптов
            reinitialiseScripts();
        });
    }

    // инициализация документа
    var init = function (document) {

        // инициализация скриптов
        initScripts(document);

        // сокрытие лишних блоков, если есть
        document.find(".action-page-buttons").hide();

        // отображение блоков, если есть
        document.find("#div-context-modal").show();
    }

    return {
        init: init
    }

})($)

/** получить ид элемента справочника со значеним name
	* dictionary название словаря
	* name - название искомого элемента словаря
	* success - обработчик успешного выполнения
	* error - обработчик ошибки
*/
function getDictionaryItemIdByName(dictionary, name, success, error) {
    $.ajax({
        url: getAbsoluteUrl("Dictionary/GetDataIdByName"),
        type: "POST",
        data: { dictionaryName: dictionary, name: name },
        success: function (data) {
            success(data);
        },
        error: function (jqXHR, textStatus, errorThrown) {
            //console.log(errorThrown);
            error(errorThrown);
        }
    });
}

/** для выбранного словарного поля получить ид записи с таким же названием из другого словаря и записать его в поле, которое используется для фильтрации при выборе из уровня ниже
	* 
	* sourceDictionaryField - поле, значение из которого ищется в другом словаре
	* targetDictionaryField - поле, в которое необходимо записать найденное ид
*/
function copyDictionaryValue(sourceDictionaryField, targetDictionaryField) {
    var sourceValue = sourceDictionaryField.val();              // искомое значение
    var dictionaryName = $("#" + targetDictionaryField.attr('name')).attr("data-dict-name");    // словарь, в котором ищем

    var button = $("button[parent-id=" + targetDictionaryField.attr("name") + "]");

    button.prop("disabled", true);
    getDictionaryItemIdByName(dictionaryName, sourceValue,
        function (data) {
            var targetField = targetDictionaryField.next(); // поле, куда надо записывать полученное ид
            if (data.error !== undefined) {     // ошибка при получении ид из словаря
                console.error(data.error);

                targetField.val("-1");          // записываем заведомо несуществующее id, чтобы при выборе из следующего уровня в другом поле не было значений для выбора
            } else {
                targetField.val(data.data);
            }

            button.prop("disabled", false);
        },
        function (data) {
            console.log(data);
            button.prop("disabled", false);
        });

    targetDictionaryField.change();
}


function findDictionaryItemByKey(dictionaryName, name, level, success, error) {
    $.ajax({
        url: getAbsoluteUrl("Dictionary/FindDictionaryItemByKey"),
        type: "POST",
        data: { dictionaryName: dictionaryName, name: name, level: level },
        success: function (data) {
            success(data);
        },
        error: function (jqXHR, textStatus, errorThrown) {
            error(errorThrown);
        }
    });
}

function findDictionaryItemByAttribute(dictionaryName, attributeName, attributeValue, level, success, error) {
    $.ajax({
        url: getAbsoluteUrl("Dictionary/FindDictionaryItemByAttribute"),
        type: "POST",
        data: { dictionaryName: dictionaryName, attributeName: attributeName, attributeValue: attributeValue, level: level },
        success: function (data) {
            success(data);
        },
        error: function (jqXHR, textStatus, errorThrown) {
            error(errorThrown);
        }
    });
}

function findDictionaryItemsByAttribute(dictionaryName, attributeName, attributeValue, level, success, error) {
    $.ajax({
        url: getAbsoluteUrl("Dictionary/FindDictionaryItemsByAttribute"),
        type: "POST",
        data: { dictionaryName: dictionaryName, attributeName: attributeName, attributeValue: attributeValue, level: level },
        success: function (data) {
            success(data);
        },
        error: function (jqXHR, textStatus, errorThrown) {
            error(errorThrown);
        }
    });
}

/* получить элементы словаря
	* dictionaryName название словаря
	* subDicName название подсловаря
	* parentItemId - родительский элемент
	* level - уровень
	* fields - какие поля грузить
	* successCallback - обработчик успешного выполнения
	* errorCalback - обработчик ошибки
*/

function getDictionaryItems(dictionaryName, subDicName, parentItemId, level, fields, successCallback, errorCalback) {
    if (!dictionaryName) {
        console.info("не задано имя словаря, getDictionaryItemChildren");
        return;
    }

    if (!Array.isArray(fields) || fields.length == 0) {
        console.info("не заданы поля, getDictionaryItemChildren");
        return;
    }

    var dicFields = [],
        l = fields.length;

    for (var i = 0; i < l; i++) {
        var current = fields[i];
        dicFields.push({
            DictColumnName: current,
            EditName: i
        });
    }

    var postData = {
        DictionaryFieldInfoList: dicFields
    };

    var encodedFields = encodeURI("&dictFieldsInfo=" + JSON.stringify(postData));

    var url = "Dictionary/GetJson?dictionaryName=" + dictionaryName
        + "&showCodeColumn=False" + "&subDictionaries=" + subDicName
        + "&selectionLevel=" + level + "&parentId=" + parentItemId
        + "&selectionStartLevel=";

    url = encodeURI(url);

    $.ajax({
        url: getAbsoluteUrl(url),
        type: "POST",
        data: encodedFields,
        success: function (repsonse) {
            if (repsonse.data) {
                var data = JSON.parse(repsonse.data);
                if (successCallback)
                    successCallback(data);



            } else if (repsonse.error) {
                console.log(repsonse);
                if (errorCalback)
                    errorCalback(repsonse.error)
            } else {
                console.log(repsonse);
            }
        },
        error: function (jqXHR, textStatus, errorThrown) {
            console.log(textStatus);
            console.log(errorThrown);
            showCommonErrors(errorThrown);
            if (errorCalback)
                errorCalback(textStatus);
        }
    });
}

/* получить дочерние элементы  элементов словаря
	* dictionaryName название словаря
	* subDicName название подсловаря
	* dicItemIds - массив id'шников для кого получаем детей
	* childLevel - уровень
	* fields - какие поля грузить
	* successCallback - обработчик успешного выполнения
	* errorCalback - обработчик ошибки
*/
function getDictionaryItemsChildren(dictionaryName, subDicName, dicItemIds, childLevel, fields, successCallback, errorCalback) {
    if (!dictionaryName) {
        console.info("не задано имя словаря, getDictionaryItemsChildren");
        return;
    }

    if (!Array.isArray(dicItemIds) || dicItemIds.length == 0) {
        console.info("не задан идентификаторы элементов словаря, getDictionaryItemsChildren");
        return;
    }

    if (!childLevel) {
        console.info("не задан уровень вложености, getDictionaryItemsChildren");
        return;
    }

    if (!Array.isArray(fields) || fields.length == 0) {
        console.info("не заданы поля, getDictionaryItemsChildren");
        return;
    }

    var result = {};

    var getDictionaryItemsPromise = function (dictionaryName, subDicName, dicItemId, childLevel, fields) {
        var dfd = jQuery.Deferred();
        getDictionaryItems(dictionaryName, subDicName, dicItemId, childLevel, fields, function (response) {
            result[dicItemId] = response;
            dfd.resolve();
        }, function (error) {
            dfd.reject(errorThrown);
        });
        return dfd.promise();
    };

    var promises = [];
    var l = dicItemIds.length;
    for (var i = 0; i < l; i++) {
        var current = dicItemIds[i];
        promises.push(getDictionaryItemsPromise(dictionaryName, subDicName, current, childLevel, fields));
    }

    $.when.apply($, promises).then(function () {
        successCallback(result);
    }, function (error) {
        errorCalback(error);
    });
}

function getParentFor(dictionaryName, itemId) {

    var url = getRelativeUrl("/Dictionary/GetParentFor");
    url += "?dictionaryName=" + encodeURIComponent(dictionaryName) + "&itemId=" + itemId;

    var defer = jQuery.Deferred();
    $.ajax({
        url: url,
        type: 'GET',
        contentType: false,
        cache: false,
        processData: false,
    }).then(function (response) {
        var data = JSON.parse(response);
        if (data.status === "OK") {
            var data = JSON.parse(data.responseMessage);
            defer.resolve(data);
        } else {
            showCommonErrors([data.responseMessage]);
            defer.reject(data.responseMessage);
        }
    }, function (error) {
        console.log(response);
    });

    return defer.promise();
}

//модуль для упрощения работы с псевдосправочниками
var FormDictionaryHelperModule = (function () {

    function getFormDictionaryItemsIds(formdataDictKey, dictFieldsInfo, formValues, success, error) {
        var docIdObj = parseInt(window.location.pathname.split('/').pop());
        var docIdStr = isNaN(docIdObj) ? '' : docIdObj;

        $.ajax({
            url: getAbsoluteUrl("FormdataDict/GetJson"),
            type: "POST",
            data: { formdataDictKey: formdataDictKey, formValues: formValues, dictFieldsInfo: dictFieldsInfo, documentKey : docIdStr },
            success: function (data) {
                success(data);
            },
            error: function (jqXHR, textStatus, errorThrown) {
                //console.log(errorThrown);
                error(errorThrown);
            }
        });
    }

    function getIdArrayFromFormDictionary(dictName, idColumnName, dictFieldsInfo, formValues, success, error) {
        getFormDictionaryItemsIds(dictName,
            dictFieldsInfo,
            formValues,
            function (data) {
                try {
                    var parsedResponseChildren = JSON.parse(data.data).children;
                    var ids = [];
                    for (var i = 0; i < parsedResponseChildren.length; i++) {
                        ids.push(parsedResponseChildren[i][idColumnName]);
                    }
                    success(ids);
                }
                catch (e) {
                    error(e);
                }
            },
            error);
    }

    return {
        getFormDictionaryItemsIds: getFormDictionaryItemsIds,
        getIdArrayFromFormDictionary: getIdArrayFromFormDictionary,
    }
})();


(function () { }(window.ct = window.ct || {}));
/**
 * ct.dataGrid - модуль с различными утилитами для работы DevExtreme DataGrid.
 * Понемногу переносим функции в этот модуль.
 */
(function (dataGrid) {
    /**
     * Устанавливает ширину видимых колонок в гриде по их содержимому.
     * grid Селектор грида, jQuery-объект или же сам инстанс dx-грида.
     */
    dataGrid.fitColumnsWidth = function(grid) {
        grid = grid.jquery ? grid.dxDataGrid("instance") : grid;
        var columns = grid.getVisibleColumns();
        for (var i = 0; i < columns.length; i++) {
            grid.columnOption(columns[i].index, "width", "auto");
        }
        grid.option("columnAutoWidth", true);
    }
}((window.ct = window.ct || {}, window.ct.dataGrid = window.ct.dataGrid || {})));

function findNestedGridBySelector(e, key, selector) {
    var row = findRowByKey(e, key);
    return findNestedGridInJQObjectBySelector(row, selector);
}

function findNestedGridInJQObjectBySelector(jqObj, selector) {
    var nestedGrid = jqObj.next("tr.dx-master-detail-row").find(selector);
    return nestedGrid;
}

function hideExpandButton($row) {
    $row.find("td.dx-datagrid-expand>div").remove();
    $row.find("td.dx-datagrid-expand").removeClass("dx-datagrid-expand");
}

function findRowByKey(grid, key) {
    return grid.getRowElement(grid.getRowIndexByKey(key));
}

function deleteAttachment(control, event, arg) {
    
    if ($('#' + control).data('dxDataGrid')) {

        if (window.docChangeObserver) window.docChangeObserver.pause();
        
        var decodedUrl = decodeURIComponent(arg);
        var arr = decodedUrl.split("uniqueIds=");
        var keys = arr[arr.length - 1].split("&")[0];
        var grid = $('#' + control).dxDataGrid('instance');
        var key;
        var keyCount;
        var store = grid.getDataSource().store();

        if (keys.indexOf(',') === -1 && keys.indexOf('/') === -1) {

            key = keys;
            keyCount = 1;
            store.remove(key);

        } else {

            var keyParts = keys.indexOf(',') !== -1 ? keys.split(',') : [keys];
            keyCount = 0;
            for (var i = 0; i < keyParts.length; i++) {

                key = keyParts[i];

                if (key.indexOf('/') !== -1)
                    key = key.split('/')[1];
                keyCount++;
                store.remove(key); 
            }    
        }

        setTimeout(function () { grid.refresh() }, 100);  

        if (decodedUrl.indexOf("clientGuid=") !== -1) {
            var clientGuid = decodedUrl.split("clientGuid=")[1].split('&')[0];
            if (clientGuid)
                $("[data-attachment-client-guid='" + clientGuid + "']").html('');
        }

        try {
            var badge = $(".regcard-sidenav .tabs-left .active .badge");
            var badgeValue = badge.text() * 1 - keyCount;
            if (badgeValue >= 0)
                badge.text(badgeValue);
        } catch (e) {
            
        }
        
        var pathArr = window.location.pathname.split('/');
        var docKey = pathArr[pathArr.length - 1];

        if (window.docChangeObserver) window.docChangeObserver.doHashRefresh(docKey);
    }
}

function addRowAttachment() {

    if (typeof window.deleteTableRowAttachmentElement !== "undefined" && window.deleteTableRowAttachmentElement.is(":visible"))
        _deleteTableRowAttachment(window.deleteTableRowAttachmentElement);
    
    if (window.files) {
        $("[name='" + window.attachmentName + "']").val(window.files);
        $("[name='" + window.attachmentKeyName + "']").val(window.fileKeys);
        window.files = "";
        window.fileKeys = "";
        window.deleteTableRowAttachmentElement.show();
    }
}

function dxGridRowAttachmentCellPrepare(param) {
    var field = this.dataField.replace(/^Fields./, "");
    if (param.Fields[field]) {
        var docKey = window.location.pathname.split("/").pop();
        var baseUrl = getBaseUrl();
        var clientGuid = param.Fields[field + '_ИД'];
        return '<a target="_blank" class="search-result-cell-value" data-attachment-client-guid="' + clientGuid + '" href="' + baseUrl + '/Attachment/View?clientGuid=' + clientGuid + '&amp;documentKey=' + docKey + '"><img class="search-result-value-image vertical-middle" src="' + baseUrl + '/Images/attachmentIcons/text.png"><span>' + param.Fields[field] + '</span></a>';
    }

    return param.Fields[field];
}

function gridReady(apiTableName, parent) {
    var def = $.Deferred();

    if (parent) {
        apiTableName = parent + ":" + apiTableName;
    }

    var eventName = apiTableName + ":initialized";
    var selector = "[data-api-table-name='" + apiTableName + "'] > div";

    try {
        var grid = $(selector).dxDataGrid("instance");
        if (!grid) {
            throw "грид не найден";
        }

        def.resolve(grid);
    }
    catch (ex) {
        $(document).on(eventName, function (event, grid) {
            def.resolve(grid);
            $(document).off(eventName);
        });
    }

    return def.promise();
}

function findNestedGrid(grid, key, apiTableName) {
    return findNestedGridBySelector(grid, key, "[data-api-table-name='" + apiTableName + "']");
}

function hideColumnByCaptionName(grid, captionName) {
    for (var i = 0; i < grid.columnCount(); i++) {
        var col = grid.columnOption(i);
        if (col.caption === captionName) {
            grid.columnOption(i, "visible", false);
        }
    }
}

var customState = (function () {
    function customState(name, state) {
        this.Name = name;
        this.State = state;
        this.Selected = false;
        this.Default = false;
    }

    return customState;
})();


// ReSharper disable once InconsistentNaming
var customStateService = (function (CustomState) {
    "use strict";

    function customStateService() {
        var self = this;
        self.Base = $("base").attr("href");
        if (self.Base === "/") self.Base = "";
    }

    customStateService.prototype.ReceiveDxGridCustomState = function (stateKey, before, complete) {
        var self = this;
        var defer = $.Deferred();
        $.ajax({
            type: "get", dataType: "json", url: self.Base + "/TableSettings/Load", cache: false,
            data: {
                'key': stateKey
            },
            error: function (error) {
                console.log("state_key=" + stateKey + ": load error: " + error);
                defer.reject(error);
            },
            success: function (data) {
                if (data === "") {
                    defer.resolve([]);
                    return;
                }

                var parsed = JSON.parse(data);

                if (!Array.isArray(parsed)) {
                    var stateItem = new CustomState("По умолчанию", parsed);
                    stateItem.Selected = true;
                    parsed = [stateItem];
                }

                defer.resolve(parsed);
            },
            complete: function () {
                if (complete)
                    complete();
            },
            beforeSend: function () {
                if (before) before();
            }
        });

        return defer.promise();
    }

    customStateService.prototype.GetStateKeyFromGrid = function (element) {
        return element.parent("div[data-state-key]").attr("data-state-key");
    }

    customStateService.prototype.ApplyStateToGrid = function (grid, state) {
        var self = this;
        grid.state({});
        grid.refresh().then(function () {
            grid.state(state);

            //ручная установка видимости столбцов, т.к. ошибка в штатном функционале
            state.columns.forEach(function (col) {
                grid.columnOption(col.dataField, "visible", col.visible);
            });

            //устанавливаем соотвествующие галки в диалоге выбора столбцов
            self.GridColChooserSyncSelectedColumns(grid);
        });
    }

    customStateService.prototype.GridColChooserSyncSelectedColumns = function (grid) {
        var colList = grid.colChooserList;
        if (colList) {
            var visibleColumnItems = colList.option("items").filter(function (elem) {
                return grid.columnOption(elem.dataField, "visible");
            });
            colList.beginUpdate();
            colList.option("selectedItems", visibleColumnItems);
            colList.endUpdate();
        }
    }

    // кэш для запросов состояния гридов
    var stateCache = {
        data: {},
        remove: function (key) {
            delete stateCache.data[key];
        },
        exist: function (key) {
            return stateCache.data.hasOwnProperty(key) && stateCache.data[key] !== null;
        },
        get: function (key) {
            return stateCache.data[key];
        },
        set: function (key, data) {
            stateCache.remove(key);
            stateCache.data[key] = data;
        }
    };

    customStateService.prototype.GridCustomStateLoad = function (grid) {
        var self = this;
        var key = self.GetStateKeyFromGrid(grid.element);
        if (!key) return;

        var receiveStatePromise;

        if (!stateCache.exist(key)) {
            // сохраняем промис в кэш, если запроса по данному ключу еще не было
            receiveStatePromise = self.ReceiveDxGridCustomState(key, grid.component.beginCustomLoading, grid.component.endCustomLoading);
            stateCache.set(key, receiveStatePromise);
        }
        else {
            // достаем промис из кэша по ключу
            receiveStatePromise = stateCache.get(key);
        }

        receiveStatePromise.then(
            function (state) {
                var promise = $.when();
                var itemToLoad = state.filter(function (i) {
                    return i.Selected;
                })[0];

                if (!itemToLoad) {
                    itemToLoad = state.filter(function (i) { return i.Default; })[0];
                } else {
                    $.each(state,
                        function (i, item) {
                            item.Selected = item.Default;
                        });
                    //console.log("Want saving state.....");
                    //promise = self.SaveChanges(key, state);
                }

                if (itemToLoad) {
                    promise = promise.then(function () { self.ApplyStateToGrid(grid.component, itemToLoad.State); });
                }

                return promise;
            });
    }

    customStateService.prototype.GridCustomStateReset = function (ev) {
        var self = this;
        ev.state({});
        self.GridColChooserSyncSelectedColumns(ev);
    }

    customStateService.prototype.SaveChanges = function (stateKey, state, before, complete) {
        var self = this;
        var defer = $.Deferred();
        $.ajax({
            type: "post", dataType: "json", url: self.Base + "/TableSettings/Save", cache: false,
            data: {
                'key': stateKey,
                'state': JSON.stringify(state)
            },
            error: function (error) {
                console.log("state_key=" + stateKey + ": save error");
                console.log(error);
                defer.reject(error);
            },
            success: function (data) {
                console.log("state_key=" + stateKey + ": saved successfully");
                defer.resolve(data);
            },
            complete: function () {
                if (complete)
                    complete();
            },
            beforeSend: function () {
                if (before)
                    before();
            }
        });

        return defer.promise();
    }

    return customStateService;
})(customState);

// ReSharper disable once InconsistentNaming
var CustomStateDialog = (function (CustomState, CustomStateService, appendTooltip) {
    "use strict";
    function customStateDialog(ev, btn) {
        var self = this;
        self.GridId = ev.element[0].id;
        var _popup = $("#stateSavePopup_" + self.GridId);
        self.Service = new CustomStateService();
        self.State = [];
        self.Button = btn;
        self.Grid = ev.component;
        self.Element = ev.element;
        self.StateKey = self.Service.GetStateKeyFromGrid(ev.element);
        self.Popup = null;

        self.Popup = _popup.dxPopup({
            showCloseButton: true,
            visible: false,
            title: "Список состояний",
            width: 450,
            height: 520,
            onHiding: function () {
                self.List.remove();
            }
        });

        self.PopupContent = this.Popup.find(".dx-popup-content");
        self.SaveButtonComponent = null;
        self.NameTextBoxComponent = null;
        self.List = null;
    }

    customStateDialog.prototype.BuildCreateNewPanel = function () {
        var self = this;
        var form = $("<div class='row dx-add-new-state-form'><div class='col-sm-9'><div id='stateNameTextBox'></div></div><div class='col-sm-3'><div id='addStateButton'></div></div></div>");
        self.PopupContent.append(form);
        var saveButton = $("#addStateButton").dxButton({
            icon: "save",
            hint: "Добавить элемент",
            disabled: true
        });

        var nameTextBoxElement = $("#stateNameTextBox").dxTextBox({
            value: "",
            placeholder: "Имя текущего состояния...",
            showClearButton: true,
            valueChangeEvent: "keyup"
        }).dxValidator({
            validationRules: [{
                type: "stringLength",
                min: 3,
                message: "Имя должно содержать не менее 3 символов"
            }]
        });

        self.SaveButtonComponent = saveButton.dxButton("instance");
        self.NameTextBoxComponent = nameTextBoxElement.dxTextBox("instance");
        self.NameTextBoxComponent.option("onValueChanged", function (data) {
            var text = data.value;
            self.SaveButtonComponent.option("disabled", text.length < 3);
        });

        self.PopupContent.append(form);
    }

    function CreateRowTemplateHTML(name) {
        return $("<div>" +
            "<div data-selection-checkbox class='col-sm-1 dx-states-list-checkbox'>" +
            "</div>" +
            "<label class='col-sm-7 dx-states-list-label'>" +
            name +
            "</label>" +
            "<div class='col-sm-4'>" +
            "<div data-delete-item-button>" +
            "</div>" +
            "<div data-save-changes-button>" +
            "</div>" +
            "<div data-set-default-item-button>" +
            "</div>" +
            "</div>" +
            "</div>");
    }

    customStateDialog.prototype.Confirm = function (message) {
        var self = this;
        var defer = $.Deferred();

        $("#confirmLabel_" + self.GridId).text(message);
        $("#confirm_" + self.GridId).modal("show");
        $("#confirm_modal-yes_" + self.GridId).on("click",
            function () {
                $("#confirm_" + self.GridId).modal("hide");
                defer.resolve();
            });
        $("#confirm_modal-no_" + self.GridId).on("click",
            function () {
                $("#confirm_" + self.GridId).modal("hide");
                defer.reject();
            });

        return defer.promise();
    }

    customStateDialog.prototype.Alert = function (message) {
        var self = this;
        $("#alertLabel_" + self.GridId).text(message);
        $("#alert_" + self.GridId).modal("show");
        var timeoutId = setTimeout(function () {
            $("#alert_" + self.GridId).modal("hide");
        }, 3000);

        $("#alert_modal-yes_" + self.GridId).on("click", function () {
            $("#alert_" + self.GridId).modal("hide");
            clearTimeout(timeoutId);
        });
    }

    customStateDialog.prototype.BuildRowTemplate = function (itemData, itemIndex, itemElement) {
        var self = this;
        var template = CreateRowTemplateHTML(itemData.Name);
        appendTooltip("<span>" + itemData.Name + "</span>", itemElement);
        itemElement.append(template);
        //связывает шаблон со стейтом за который он отвечает
        template.data("state", itemIndex);

        template.find("[data-selection-checkbox]").dxCheckBox({
            value: itemData.Selected,
            onOptionChanged: function (e) {

                $.each(self.State, function (index, item) {
                    item.Selected = false;
                });

                var stateIndex = template.data("state");
                var currentState = self.State[stateIndex];
                currentState.Selected = e.value;
                if (currentState.Selected) {
                    self.ApplyStatesChanges().then(function () {
                        self.Service.ApplyStateToGrid(self.Grid, itemData.State);
                    });
                } else {
                    dxGridCustomStateReset(self.Grid);
                }
            }
        });
        template.find("[data-delete-item-button]").dxButton({
            icon: "remove",
            hint: "Удалить элемент",
            onClick: function () {
                //self.Confirm... // EUPDEV-164
                showConfirmEx("Удаление состояния", "Вы уверены, что хотите удалить состояние '" + itemData.Name + "'?", "OK", "Закрыть", itemElement)
                    .then(function () {
                        var index = self.State.indexOf(itemData);
                        if (index > -1) {
                            self.State.splice(index, 1);
                            template.remove();
                            self.ApplyStatesChanges();
                        }
                    });
                },
            });

        template.find("[data-save-changes-button]").dxButton({
            icon: "save",
            hint: "Сохранить изменения",
            disabled: !itemData.Selected,
            onClick: function () {
                itemData.State = self.Grid.state();
                self.ApplyStatesChanges().then(function () {
                    //self.Alert("Элемент '" + itemData.Name + "' успешно сохранен"); // EUPDEV-164
                    showAlertEx("Сохранение состояния", "Элемент '" + itemData.Name + "' успешно сохранен", "OK", itemElement);
                });
            }
        });

        template.find("[data-set-default-item-button]").dxButton({
            icon: "check",
            hint: "Сделать элементом по умолчанию",
            disabled: itemData.Default,
            onClick: function () {
                $.each(self.State,
                    function (index, item) {
                        item.Default = item === itemData;
                    });
                self.ApplyStatesChanges().then(function () {
                    //self.Alert("Элемент '" + itemData.Name + "' установлен как элемент по умолчанию"); // EUPDEV-164
                    showAlertEx("Изменение состояния", "Элемент '" + itemData.Name + "' установлен как элемент по умолчанию", "OK", itemElement);
                });
            }
        });
    }

    customStateDialog.prototype.BuildStatesList = function () {
        var self = this;

        return self.Service.ReceiveDxGridCustomState(self.StateKey, self.Grid.beginCustomLoading, self.Grid.endCustomLoading).then(function (state) {
            self.State = state;
            if (self.List) {
                self.List.remove();
            }

            self.List = $("<div data-grid-states-list></div>")
                .dxList({
                    items: self.State,
                    searchEnabled: true,
                    selectionMode: "none",
                    itemTemplate: function (itemData, itemIndex, itemElement) {
                        self.BuildRowTemplate(itemData, itemIndex, itemElement);
                    }
                });

            self.PopupContent.append(self.List);

            self.SaveButtonComponent.option("onClick", function () {
                var newitem = new CustomState(self.NameTextBoxComponent.option("value"), self.Grid.state());
                $.each(self.State,
                    function (index, item) {
                        item.Selected = false;
                    });
                newitem.Selected = true;
                newitem.Default = false;
                self.State.push(newitem);
                self.ApplyStatesChanges()
                    .then(function () {
                        self.NameTextBoxComponent.option("value", "");
                    });
            });

            return self.State;
        });
    }

    customStateDialog.prototype.ApplyStatesChanges = function () {
        var self = this;
        return self.Service.SaveChanges(self.StateKey, self.State, self.Grid.beginCustomLoading, self.Grid.endCustomLoading).then(function () {
            return self.BuildStatesList();
        });
    }

    customStateDialog.prototype.Init = function () {
        var self = this;
        self.BuildCreateNewPanel();
        self.BuildStatesList().then(function () {
            self.Popup.dxPopup("instance").option({
                showCloseButton: true,
                visible: true,
                position: {
                    my: "right top",
                    at: "left bottom",
                    of: self.Button.element
                }
            });
        });
    }

    return customStateDialog;
})(customState, customStateService, appendTooltip);

// сброс состояния грида
function dxGridCustomStateReset(ev) {
    new customStateService().GridCustomStateReset(ev);
}

// ================================================================================================================================
// ================================================================================================================================

//синхронизирует чекбоксы диалога выбора столбцов в соотвествии с видимыми столбцами в гриде
function dxGridColShooserSyncSelectedColumns(grid) {
    new customStateService().GridColChooserSyncSelectedColumns(grid);
}

// ================================================================================================================================
// ================================================================================================================================


// отключение разворачивания строки, если во вложенном гриде нет данных
function onDxGridCellPrepared(options) {
    if (options.rowType === "data" && options.column.command !== "expand" && options.column.command !== "select" && options.value !== undefined) {
        var html = options.value;
        if (options.data.Url && options.column.dataType !== "boolean") {
            var targetString = options.data.OpenLinksOnBlankPage ? "target='_blank'" : "";
            html = $("<div><a class='search-result-cell-value' href='" + options.data.Url + "'" + targetString + " >" + html + "</a></div>");
        } else if (options.column.cssClass == "view-in-form"){
            html = $("<div style='height: 34px;' class='btn btn-default btn-sm glyphicon glyphicon-list-alt vertical-middle hidden-xs table-edit-row-button' title='Просмотр' onclick='viewTableRow(this, event)'></div><span class='btn btn-default btn-sm visible-xs-inline-block' onclick='viewTableRow(this, event)'>Просмотр</span>");
        }
        else {
            html = $("<div><span class='search-result-cell-value'>" + html + "</span></div>");
        }

        if (options.column.cell_classes) {
            for (var i = 0; i < options.column.cell_classes.length; i++) {
                html.addClass(options.column.cell_classes[i]);
            }
        }

        options.cellElement.html(html);
    }

    if (options.rowType === "data" && options.column.command === "expand" && !options.data.Expandable) {
        options.cellElement.removeClass("dx-datagrid-expand");
        options.cellElement.empty();
    }

    if (options.rowType === "group") {
        switch (options.column.dataType) {
            case "number": {
                if (options.cellElement.find(".money").length > 0) {
                    if (options.value && options.value !== "") {
                        var spans = options.cellElement.find(".search-result-cell-value");
                        $.each(spans, function (index, element) {
                            var current = $(element);
                            var text = current.text();
                            var isNumber = !isNaN(parseFloat(text));
                            if (isNumber) {
                                current.text(formatMoney(options.value));
                            }
                        });
                    }
                    break;
                }
            }
        }
    }

    if (options.rowType === "data") {
        switch (options.column.dataType) {
            case "number": {
                if (options.cellElement.find(".double").length > 0) {
                    var j = $(options.cellElement.html());
                    var value = j.find('span').first().text();
                    if (value && value.trim() !== "" && value.indexOf(".") === -1) {
                        j.find('span').first().text(value + ".00");
                        options.cellElement.html(j);
                    }
                } else if (options.cellElement.find(".money").length > 0) {
                    if (options.value && options.value !== "") {
                        options.cellElement.find(".search-result-cell-value").text(formatMoney(options.value));
                    }
                }
                break;
            }
            case "boolean": {
                transformBooleanCellElement(options);
                break;
            }
        }
		
		if (options.column.caption == "Срок исполнения")
		{
			if (options.value && options.value !== "" && options.value.indexOf("31.12.9999") != -1)
			{
				options.cellElement.find(".search-result-cell-value").text("Бессрочно");
			}
		}
		
    }
}


function transformBooleanCellElement(option) {
    var j = $(option.cellElement.html());
    if (j.find("input").length === 0) {
        var span = j.find('span').first().empty();
        var checked = option.value === "0" ? false : true;
        $("<input type='checkbox' disabled/>").attr("checked", checked).appendTo(span);
        option.cellElement.html(j);
    }
}

function onDxGridRowPrepared(e) {
    if (e.data === undefined) {
        return;
    }

    for (var key in e.data.Classes) {
        e.rowElement.addClass(e.data.Classes[key]);
    }

    var table = $("[data-grid-id='" + e.element.attr("id") + "']").attr("data-table-path");
    e.rowElement.attr('data-row-path', table + ":" + e.data.Key);
}

// действия, выполняемые при инициализации грида
function onDxGridInitialized(e) { 
    new customStateService().GridCustomStateLoad(e);

    e.component.option("onRowClick", function (ev) { onDxGridRowClick(ev, e.component) });
    e.component.option("onToolbarPreparing", function (ev) { onDxToolbarPreparing(ev, e.component) });
    e.component.option("onSelectionChanged", function (event) { onDxGridSelectionChanged(event, e.component) });

    var option = e.component.option();

    $.each(e.component.option().columns, function (index, columnOption) {
        e.component.columnOption(columnOption.dataField,
            {
                groupCellTemplate: function (groupCell, info) {
                    groupCellTemplate(groupCell, info);
                },

                calculateFilterExpression: function (filterValue, selectedFilterOperation) {
                    if (typeof (filterValue) == "string") {
                        filterValue = filterValue.trim();
                    }
                    // Implementation for the "between" comparison operator
                    if (selectedFilterOperation === "between" && $.isArray(filterValue)) {
                        var filterExpression = [];
                        if (filterValue[0])
                            filterExpression.push([this.dataField, ">=", filterValue[0]]);
                        if (filterValue[1])
                            filterExpression.push([this.dataField, "<=", filterValue[1]]);

                        if (filterExpression.length === 2)
                            filterExpression.splice(1, 0, "and");
                        return filterExpression;
                    } else if (this.dataType === "boolean") {
                        return [this.dataField, filterValue ? '=' : '<>', 1];
                    }

                    // Invokes the default filtering behavior
                    return this.defaultCalculateFilterExpression.apply(this, arguments);
                }
            });

        if (!option.remoteOperations) {
            e.component.columnOption(columnOption.dataField, {
                calculateSortValue: function (data) {
                    var value = this.calculateCellValue(data);
                    return value;
                }
            });
        }
        /*n.volosatov - грид ставит для колонок с типом datetime serializationFormat равный "yyyy/MM/dd", причем для одной и
        той же колонки, в одном случае может поставить правильный формат, а в другом некорректный. Закономерность не нашел. 
        Поэтому жестко задаем формат.
        */
		// Разделяем формат для datetime и nosecdatetime + проверка, чтобы не ломалась колонка действий
		if (columnOption.cell_classes != undefined) {
		
			if (columnOption.cell_classes.indexOf("nosecdatetime") !== -1) {
				columnOption.dataType = "datetime";
				columnOption.format = "dd.MM.yyyy HH:mm";
			}
			if (columnOption.dataType === "datetime") {

				e.component.columnOption(columnOption.dataField, {
						serializationFormat: "yyyy/MM/dd HH:mm:ss"
					});
			}
			
			if (columnOption.dataType === "date") {
				e.component.columnOption(columnOption.dataField, {
					serializationFormat: "yyyy/MM/dd"
				});
			}
		}
		
    });
    dxGridAddTablePath(e);

    var existingOnContentReadyHandler = e.component.option("onContentReady");
    e.component.option("onContentReady", function (ev) {

        var rowsToCollapse = e.component.option("rowsToCollapse");
        if (rowsToCollapse) {
            debugger;//ТУТ схлопываем строки!!!!
        }

        if (existingOnContentReadyHandler) {
            existingOnContentReadyHandler(ev);
        }

        addDxGridPagerButtons(e.component, e.element);
        if (!ct.utils.isLowScreenWidth()) {
            scaleWidthVisibleColumns(e.component, e.element);
        }
        
        updateCountBadge(ev);
        expandRowsIfNeeded(ev.component, ev.element);
        dxGridRemoveTitles(e.element);

        try {
            var parent = e.element.closest("tr[data-row-path]").attr('data-row-path');
            var table = $("[data-grid-id='" + e.element.attr("id") + "']").attr("data-api-table-name");
            if (parent) {
                console.log(parent + ":" + table + ":initialized");
                $(document).trigger(parent + ":" + table + ":initialized", [e.component, e.element]);
            }
            else {
                $(document).trigger(table + ":initialized", [e.component, e.element]);
            }
        }
        catch (exc) {
            console.log(exc);
        }

        // выравниваем дочерние гриды по родительскому
        dxGridSyncMasterDetailColumns(ev);
    });

    // Некорректная работа при форматировании ширины столбцов в таком случае
    //if (ct.utils.isLowScreenWidth()) {
    //    ct.dataGrid.fitColumnsWidth(e.component);
    //}

    //инвалидация грида, т.к. при первоначальной загрузке он ведет себя некорректно, а именно - не показывает текст при отсутствии данных и так до ресайза
    //костыляка для devexpress в виде updateDimensions хоть как-то решает проблему
    e.component.updateDimensions();
}

function groupCellTemplate(cellElement, cellInfo) {
    var classes = cellInfo.column.cell_classes;
    var wrapper = $("<div/>");

    var createSpanText = function (value, cssClass) {
        var span = $("<span class='search-result-cell-value'/>");
        span.html(value);
        if (cssClass)
            span.addClass(cssClass);
        return span;
    };

    wrapper.addClass(classes.join(" "));

    createSpanText(cellInfo.column.caption + ": ").appendTo(wrapper);

    var groupValueHtml = createSpanText(cellInfo.data.key);
    if (cellInfo.data.caption)
        groupValueHtml = $($.parseHTML(cellInfo.data.caption));

    groupValueHtml.appendTo(wrapper);

    if (cellInfo.data.count)
        createSpanText(" (" + cellInfo.data.count + ") ").appendTo(wrapper);

    if (cellInfo.groupContinuedMessage)
        createSpanText("(" + cellInfo.groupContinuedMessage + ")", "secondary").appendTo(wrapper);
    if (cellInfo.groupContinuesMessage)
        createSpanText("(" + cellInfo.groupContinuesMessage + ")", "secondary").appendTo(wrapper);

    cellElement.append(wrapper);
}



function dxGridAddTablePath(e) {
    var parent = e.element.closest("tr[data-row-path]").attr('data-row-path');
    var table = $("[data-grid-id='" + e.element.attr("id") + "']").attr("data-api-table-name");

    if (parent) {
        $("[data-grid-id='" + e.element.attr("id") + "']").attr("data-table-path", parent + ":" + table);
    }
    else {
        $("[data-grid-id='" + e.element.attr("id") + "']").attr("data-table-path", table);
    }
}


function expandRowsIfNeeded(component) {
    //берем все отображаемые строки
    var rows = component.getVisibleRows();

    //ключи строк, которые надо экспандить
    var expandedKeys = [];

    //ключи строк, которые являются вложенными
    var childKeys = [];
    var l = rows.length;
    for (var i = 0; i < l; i++) {
        var current = rows[i];

        if (current.data.IsExpanded)
            expandedKeys.push(current.key);

        if (current.rowType === "detail")
            childKeys.push(current.key);
    }

    //если нет вложенных видимых строк, разворачиваем те которые надо
    if (childKeys.length === 0) {
        var eLength = expandedKeys.length;
        for (var j = 0; j < eLength; j++) {
            component.expandRow(expandedKeys[j]);
        }
    }
}


// обновляем значок с количеством элементов в меню
function updateCountBadge(e) {
    var id = e.element.closest(".tab-pane").attr("id");
	var menuItem = $('[data-target="#' + id + '"]');
	var loadingSpan = menuItem.find(".loading-image-small");
	// Доп. логика, если обрабатываем гриды для вкладки "Связанные документы"
	if (id != "links-view-docs") {		
		// Для обычных гридов
		if (loadingSpan.length > 0) {
			var count = e.component.totalCount();
			loadingSpan.remove();
			menuItem.append('<span class="badge">' + count + '</span>');
			if (count == 0) {
				menuItem.parent().hide();
			} else {
				menuItem.parent().show();
			}
		}
		
	} else {
		var count = e.component.totalCount();
		if (count > 0) {
			menuItem.parent().show();
			//Показываем грид и обновляем значок только при первой загрузке
			var linksTable = $(e.element[0]).closest(".column-container");
			if (linksTable.css('display') == 'none') {
				linksTable.show();
				if ($(linksTable).prev().hasClass("column-container")) {
					$(linksTable).prev().show();
				}
				//Вместо спана загрузки подставляем количество элементов в гриде, если бадж с счетчиком уже загружен, то прибавляем к нему
				if (loadingSpan.length > 0) {
					
					loadingSpan.remove();
					menuItem.append('<span class="badge">' + count + '</span>');			
				} else {
					var badgeSpan = menuItem.find(".badge");
					if (badgeSpan.length > 0) {
						var currentCount = badgeSpan[0].textContent;
						if (!isNaN(currentCount)) {
							count += Number(currentCount);
						}
						$(badgeSpan[0]).text(count);
					}
				}
				
			}
			
			
		}
	}
    
}

// при нажатии на строку в гриде разворачиваем ее
function onDxGridRowClick(ev, grid) {
    ev.rowElement.toggleClass("dx-datagrid-wrap");
}

// изменение тулбара грида
function onDxToolbarPreparing(ev, grid) {
    addDxGridToolbarMenuItems(ev, grid);

    //если для грида разрешено отображение настроек кнопок - добавляем их в тулбар
    if (!GetGridElementBoolProperty(ev.element, "hide-grid-sett-buttons")) {
        addDxGridToolbarCustomColumnChooser(ev, grid);
        addDxGridToolbarStateItems(ev, grid);
        addCreateExportButton(ev, grid);
    }
}

//добавление кастомной кнопки для выгрузки excel
function addCreateExportButton(ev, grid) {
    ev.toolbarOptions.items.unshift(
        {
            location: "after",
            widget: "dxButton",
            options: {
                hint: "Экспортировать данные в формате Excel",
                icon: "download",
                visible: grid.option("excel_format") ? grid.option("excel_format") : 0,
                disable: true,
                onClick: function () {
                    createExportHandler(ev, grid, grid.option("excel_format"));
                }
            }
        });
    ev.toolbarOptions.items.unshift(
        {
            location: "after",
            widget: "dxButton",
            options: {
                hint: "Экспортировать данные в формате ODS",
                icon: "download",
                visible: grid.option("ods_format") ? grid.option("ods_format") : 0,
                disable: true,
                onClick: function () {
                    createExportHandler(ev, grid, grid.option("ods_format"));
                }
            }
        });
    ev.toolbarOptions.items.unshift(
        {
            location: "after",
            widget: "dxButton",
            options: {
                hint: "Добавить узел",
                icon: "repeat",
                visible: grid.option("add_roadmap") ? grid.option("add_roadmap") : 0,
                disable: false,
                onClick: function () {
                    addActivityHandler(ev, grid);
                }
            }
        });
}

function addActivityHandler(event, grid) {

    var url = grid.option("addactivity_url");
    $("#btn-ok_from_modal").unbind("click");
    console.log("handleLinkAction1");

    var openResultOnBlankPage = false;
    var useDefaultSubmit = false;
    var dontSubmit = false;
    var beforeSubmit = undefined;

    var beforeHandler = function (e, form) {
        //запоминаем текущую вкладку
        saveCurrentHash();

        if (beforeSubmit)
            return beforeSubmit(e, form);
    }


    setPreventDefault(event);

    ModalHelper({
        dialog: '#actionDialog',
        url: url,
        isTargetBlank: openResultOnBlankPage,
        beforeSubmit: beforeHandler,
        afterSubmit: undefined,
        control: null,
        event: null,
        useDefaultSubmit: useDefaultSubmit,
        dontSubmit: dontSubmit,
        keepScripts: null
    }).openWindow();
}

function createExportHandler(ev, grid, exportFormat) {
    waitingDialog.showWaiting();
    var columns = JSON.stringify(grid.state().columns);
    var loadOptionsObj = grid.getDataSource().loadOptions();
    loadOptionsObj['filter'] = grid.getCombinedFilter();
    var loadOptions = JSON.stringify(loadOptionsObj);

    var data =
    {
        'columns': columns,
        'loadOptions': loadOptions
    };

    var form = $('form').serializeArray();
    $.each(form, function (i, v) {
        var d = data[v.name];
        if (d === undefined || d === "") {
            data[v.name] = v.value;
        } else {
            data[v.name] = d + "," + v.value;
        }
    });

    var yearReq = urlParam('yearRequisite');
    var selectedYear = urlParam('selectedYear');
    var finalUrl = appendUrlArgument(grid.option("export_url"), "format", exportFormat);

    finalUrl = appendUrlArgument(finalUrl, "yearRequisite", encodeURIComponent(yearReq));
    finalUrl = appendUrlArgument(finalUrl, "selectedYear", selectedYear);

    $.ajax({
        url: finalUrl,
        type: "POST",
        cache: false,
        data: data,
        success: function (data) {
            waitingDialog.hide();
            window.location.href = getRelativeUrl("GridExport/DownloadFile?fileGuid=" + data.FileGuid + "&fileName=" + data.FileName);
        },
        error: function (error) {
            waitingDialog.hide();
            showCommonErrors([error.responseText]);
        }
    });
}

//добавление кастомной кнопки выбора столбцов
function addDxGridToolbarCustomColumnChooser(ev, grid) {
    if (GetGridElementBoolProperty(ev.element, "allow-column-chooser")) { //тут проверка на разный регистр и строковые значения "True" и "False"
        ev.toolbarOptions.items.unshift({
            location: "after",
            widget: "dxButton",
            options: {
                hint: "Выбор столбцов",
                icon: "column-chooser",
                onClick: function (btn) { dxGridCustomColumnsChooser(ev, btn); }
            }
        });
    }
}

// получение списка колонок грида для column chooser
function dxGridGetCustomChooserColumns(grid) {
    var columns = [];
    var checked = [];
    var length = grid.columnCount();
    for (var i = 0; i < length; i++) {
        var col = grid.columnOption(i);
        var dto = {
            visible: true,
            index: col.index,
            caption: col.caption,
            dataField: col.dataField
        };

        //if (col.caption !== "Действия") {
            if (col.visible) {
                checked.push(dto);
            }
            columns.push(dto);
        //}
    }

    return {
        columns: columns,
        checked: checked
    }
}

// сортировка списка колонок в column chooser
// сначала сортируется выбрана-не выбран, потом по алфавиту
function dxGridSortCustomChooserColumns(control) {
    control.beginUpdate();

    var beforeSort = control.option("items");
    var items = beforeSort.sort(function (one, two) {
        var checked1 = control.option("selectedItems").indexOf(one) !== -1;
        var checked2 = control.option("selectedItems").indexOf(two) !== -1;

        if (checked1 && !checked2) return -1;
        if (checked2 && !checked1) return 1;

        if (one.caption < two.caption) return -1;
        if (one.caption > two.caption) return 1;

        return 0;
    });
    control.option("items", items);

    control.endUpdate();
}

function appendTooltip(template, itemElement) {
    var tooltip = $("<div data-item-tooltip></div>");
    $(tooltip).dxTooltip({
        target: itemElement,
        showEvent: {
            name: "mouseenter",
            delay: 800
        },
        hideEvent: "mouseleave",
        position: "top",
        contentTemplate: function (data) {
            data.html(template);
        },
        animation: {
            show: {
                type: "pop",
                from: {
                    scale: 0.1,
                    opacity: 0
                },
                to: {
                    opacity: 1,
                    scale: 1
                }
            },
            hide: {
                type: "pop",
                from: {
                    scale: 1,
                    opacity: 1
                },
                to: {
                    opacity: 0,
                    scale: 0.1
                }
            }
        }
    });

    itemElement.append(tooltip);
    return tooltip;
}

// клик по кнопке пользовательского выбора столбцов
function dxGridCustomColumnsChooser(ev, btn) {
    var grid = ev.component;

    //инициализация popup для своего column chooser
    var popup = grid.colChooserPopup;
    if (!popup) {
        popup = grid.colChooserPopup = $("#colChooserPopup_" + ev.element[0].id).dxPopup({
            showCloseButton: true,
            visible: false,
            title: "Выбор столбцов",
            width: 350,
            height: 520,
        });
    }

    var data = dxGridGetCustomChooserColumns(grid);

    //инициализируем popup с перечнем столбцов
    var popupContent = popup.find(".dx-popup-content");
    var tooltips = popup.find("[data-item-tooltip]");
    if (popupContent.is(':empty') && !tooltips.length) {
        var listElement = document.createElement("div");
        $(listElement).addClass("grid-columns-list");

        var list = $(listElement).dxList({
            items: data.columns,
            selectionMode: "multiple",
            selectedItems: data.checked,
            showSelectionControls: true,
            itemTemplate: function (itemData, itemIndex, itemElement) {
                appendTooltip("<span>" + itemData.caption + "</span>", itemElement);
                itemElement.append("<b>" + itemData.caption + "</b>");
            },
            onSelectionChanged: function (e) {
                grid.beginUpdate();

                var length = e.addedItems.length;
                for (var i = 0; i < length; i++) {
                    grid.columnOption(e.addedItems[i].index, "visible", true);
                }

                var removedLength = e.removedItems.length;				
                for (var i = 0; i < removedLength; i++) {
					if (list._getSelectedItemIndices().length > 0) {
						grid.columnOption(e.removedItems[i].index, "visible", false);
					} else {
						list.selectItem(e.removedItems[i]);
					}
                }

                //debugger;
      
                
                grid.endUpdate();

                dxGridSortCustomChooserColumns(e.component);
                scaleWidthVisibleColumns(grid, ev.element);
                // Net6 - при вызове grid.getDataSource().load() в грид добавляется дубликат строки
                //grid.getDataSource().load();
                setTimeout(100);
                grid.refresh();
            },
            onInitialized: function (e) {
                dxGridSortCustomChooserColumns(e.component);
            }
        }).dxList("instance");

        var textElement = document.createElement("div");

        var timeoutID = null;

        $(textElement).dxTextBox({
            value: "",
            placeholder: "Поиск...",
            showClearButton: true,
            valueChangeEvent: "keyup",
            onValueChanged: function (data) {

                if (timeoutID) {
                    window.clearTimeout(timeoutID);
                    timeoutID = null;
                }

                timeoutID = window.setTimeout(function () {
                    var list = grid.colChooserList;
                    var items = list.option("items");
                    var length = items.length;

                    // фильтрация колонок в column chooser
                    for (var i = 0; i < length; i++) {
                        var item = items[i];
                        var searchQuery = data.value.toLowerCase();

                        var visible = true;
                        if (searchQuery && searchQuery.trim() !== "") {
                            visible = item.caption.toLowerCase().search(data.value.toLowerCase()) >= 0;
                        }

                        item.visible = visible;
                    }

                    list.repaint();
                }, 200);
            }
        });

        popupContent.append(textElement);
        popupContent.append(listElement);

        grid.colChooserList = list;
    }

    //делаем popup видимым
    popup.dxPopup("instance").option({
        showCloseButton: true,
        visible: true,
        position: {
            my: "right top",
            at: "left bottom",
            of: btn.element
        }
    });
}

function scaleWidthVisibleColumns(grid, gridElem) {
    if (grid.option('masterDetail') && grid.option('masterDetail').enabled) {
        return;
    }

    var total = grid.getVisibleColumns().length;
    if (total < 2) { return; }

    var column = grid.getVisibleColumns()[total - 1];
    var general_width = grid.columnOption(column.index, 'width');
    var visible_width = grid.columnOption(column.index, 'visibleWidth');

    if (general_width && StringEndsWith(general_width, "px")) {
        grid.columnOption(column.index, 'width', general_width);
        grid.columnOption(column.index, 'visibleWidth', general_width);
    }

    if (visible_width && StringEndsWith(visible_width, "px")) {
        grid.columnOption(grid.getVisibleColumns()[total - 1].index, 'width', visible_width);
        grid.columnOption(grid.getVisibleColumns()[total - 1].index, 'visibleWidth', visible_width);
    }
}


// добавление дополнительных кнопок в пэйджер
function addDxGridPagerButtons(grid, elem) {

    if (!grid.option("paging").enabled) {
        return;
    }
    if (elem.find(".dx-pages").length === 0 || elem.find(".dx-pages .grid-pager-nums").length !== 0) {
        return;
    }

    var numeric = document.createElement("div");
    var button = document.createElement("div");

    var goto = function () {
        var control = $(numeric).dxNumberBox("instance");
        var index = control.option("text") || control.option("value");
        if (index <= 0) {
            index = 1;
        }
        grid.pageIndex(index - 1);
    }

    $(numeric).dxNumberBox({
        min: 1,
        max: grid.pageCount(),
        value: grid.pageIndex() + 1,
        showSpinButtons: true,
        onKeyUp: function (ev) {
            if (ev.jQueryEvent.key === "Enter") { goto(); }
        },
        onKeyPress: function (ev) {
            var value = Number(ev.jQueryEvent.key);
            if (typeof value !== "number" || !isFinite(value) || Math.floor(value) !== value) {
                ev.jQueryEvent.preventDefault();
            }
        }
    });

    $(button).dxButton({
        icon: "spinright",
        hint: "Перейти",
        onClick: function () { goto() }
    });

    var wrapper = document.createElement("div");
    $(wrapper).addClass("grid-pager-nums");

    $(wrapper).append(numeric);
    $(wrapper).append(button);
    elem.find(".dx-pages").append(wrapper);
}

// добавление меню "действия" в тулбар
function addDxGridToolbarMenuItems(ev, grid) {
    
    if (ev.element.parent("div[data-allow-actions]").attr("data-allow-actions") !== "True") {
        return;
    }

    if (ev.element.parent("div[data-allow-selection]").attr("data-allow-selection") !== "True") {
        return;
    }
    
    var gridId = getDxGridId(ev.element);
    ev.toolbarOptions.items.unshift({
        location: "before",
        widget: "dxMenu",
        options: {
            visible: false,
            onItemClick: function (ev) {
                ev.event.stopPropagation();
                onDxGridActionClick(ev, gridId)
            },
            items: [{ text: 'Действия', id: 'root' }],
            elementAttr: { id: gridId + "-toolbar-menu" }
        }
    });
}


// добавление кнопок для управления состояниемв тулбар
function addDxGridToolbarStateItems(ev, grid) {
    var stateKey = getDxGridStateKey(ev.element);
    if (!stateKey) return;
    
    ev.toolbarOptions.items.unshift(
        {
            location: "after",
            widget: "dxButton",
            options: {
                hint: "Список состояний",
                icon: "menu",
                onClick: function (btn) {
                    var customStateDialog = new CustomStateDialog(ev, btn);
                    customStateDialog.Init();
                }
            }
        },
        {
            location: "after",
            widget: "dxButton",
            options: {
                hint: "Сбросить состояние",
                icon: "refresh",
                onClick: function () { dxGridCustomStateReset(ev.component); }
            }
        });
}


// обработка клика по элементу в меню "действия"
function onDxGridActionClick(ev, gridId) {
    if (ev.itemData.id === "root" || ev.itemData.text === "нет доступных действий") {
        return;
    }
    
    handleUrl(ev.itemData.url, ev.itemData.dialog, ev.itemData.afterSubmit, gridId);
}

// заполнения меню действия в тулбаре при изменении выбранных строк в гриде
function onDxGridSelectionChanged(ev, grid) {
    
    var menu = $("#" + getDxGridId(ev.element) + "-toolbar-menu").dxMenu("instance");

    //Отфильтровываем выделенные - удаленные строки
    var rows = ev.selectedRowsData.filter(function () {
        return grid.getSelectedRowKeys();
    });
    if (menu) {
        if (menu.lastAjaxRequest) {
            menu.lastAjaxRequest.abort();
        }

        if (rows.length > 1) {
            var isFilesTable = $(ev.element).attr("id").indexOf("files-table") !== -1;

            // Кнопка действия
            var ajaxAction = grid._options._optionManager._options.isAjax;
            if (ajaxAction) {
                var action = $(ev.element).find("div[class*='dx-actions-menu']:first");
                if (action.length) {
                    if (!$(ev.element).find("div[class*='dx-actions-menu'][data-is-ajax-act*='true']").length
						&& !$(ev.element).find("[class*='dx-datagrid-rowsview']").find("[class*='dx-menu-item'][aria-haspopup*='true']").length) {								
							ajaxAction = false;						
                    }
                }
            }

            if (ajaxAction) {
                menu.lastAjaxRequest = getContextActionsForRowsAjax(grid, menu, ev);
                return;
            } else {
                var items = getContextActionsForRows(grid, isFilesTable);
                menu.option("items", [{ text: 'Действия', id: 'root', items: items }]);
                menu.option("visible", true);
            }
        }
        else {
            menu.option("items", []);
            menu.option("visible", false);
        }
    }

    //Не удалять, переопределяется и используется в другом файле (create-document-link.js)
    //TODO: заменить на подписку на событие
    onDxGridSelectionChanged_CustomAction(ev, grid);
}

//Не удалять, переопределяется и используется в другом файле (create-document-link.js)
//TODO: заменить на подписку на событие
function onDxGridSelectionChanged_CustomAction(ev, grid) {
}

function dxGridRowNumberCellTemplate(container, options) {
    var rowNumber = options.row.dataIndex + 1;
    $("<div class='search-result-cell text'><a class='search-result-cell-value static'>" + rowNumber + "</a></div>").appendTo(container);
}
function dxGridRowActivityStatusCellTemplate(container, options) {
    if (typeof container.Fields !== 'undefined') {
        var field = this.dataField.replace(/^Fields./, "");
        var baseUrl = getBaseUrl();
        if(container.Fields[field] == "running") {
            return '<img src="' + baseUrl + '/Images/activityState/16-Yellow.png" title="выполняется" alt="выполняется"/>';
        }
        if (container.Fields[field] == "finish") {
            return '<img src="' + baseUrl + '/Images/activityState/16-Green.png" title="выполнен" alt="выполнен"/>';
        }

    }
    return "";    
}

function dxGridDateCellPrepare(param) {
    if (typeof param.Fields !== 'undefined') {
        var field = this.dataField.replace(/^Fields./, "");
        return param.Fields[field];
    }

    return "";
}

function loadActionAjax(docKey, gridId, container, objType) {
    // добавляем параметры searchType и searchBlock для корректной работы фильтра WhenHttpGetParamEquals
    var url = getBaseUrl() + '/Search/GetAvailableActions?docKeys=' + docKey + '&objType=' + objType + "&rnd=" + Math.random() +
        "&searchType=" + getUrlParameter('searchType') + "&searchBlock=" + getUrlParameter('searchBlock');

    $.ajax({
        url: url,
        type: 'GET',
        contentType: false,
        cache: false,
        processData: false,
    }).then(function (actions) {
        
        $(container).empty();
        if (actions && actions.length > 0) {
            var items = actions.map(function(action) {
                return {
                    text: action.Title,
                    dialog: action.Options.dialog,
                    afterSubmit: action.AfterSubmit,
                    url: joinGridActionUrl(action.Options.url,
                        "uniqueIds=" +
                        docKey +
                        "&returnUrl=" +
                        encodeURIComponent(window.location.href) +
                        (action.Options.tableId ? "&tableId=" + action.Options.tableId : ""))
                };
            });
          
            //var gridId = getDxGridId(options.component.element());

            var menuElement = $("<div class='dx-actions-menu'/>").dxMenu({
                onItemClick: function(ev) {
                    ev.event.stopPropagation();
                    onDxGridActionClick(ev, gridId);
                },
                items: [{ icon: 'menu', id: 'root', items: items }]
            });

            menuElement.find(".dx-menu-item-popout-container").remove();
            menuElement.appendTo(container);
         
            setTimeout(function() {
                $(menuElement.find(".dx-menu-item")[0]).click();
            } , 100);

            //setTimeout($(menuElement.find(".dx-menu-item")[0]).click(), 1000);
        }
       
        if (actions.length === 0) {      
            var items =[ {
                    text: "нет доступных действий",
                    dialog: "DialogWindow",
                    afterSubmit: null                  
                }];
          
            var menuElement = $("<div class='dx-actions-menu'/>").dxMenu({               
                items: [{
                    icon: 'menu', id: 'root', items:items }]
            });
            console.log(items);      
            menuElement.find(".dx-menu-item-popout-container").remove();
            menuElement.appendTo(container);
         
            setTimeout(function () {
                $(menuElement.find(".dx-menu-item")[0]).click();
            }, 100);
        }


        //var data = JSON.parse(response);
        //if (data.status === "OK") {
            
        //} else {
        //    console.error(error);
        //}
    }, function (error) {
        console.error(error);
    });
}

function dxGridRowMenuCellTemplateAjax(container, options) {
    
    //var actions = options.data.Actions;
    //var items = actions.map(function (action) {
    //    return {
    //        text: action.Title,
    //        dialog: action.Options.dialog,
    //        afterSubmit: action.AfterSubmit,
    //        url: joinGridActionUrl(action.Options.url, "uniqueIds=" + options.data.Key + "&returnUrl=" + encodeURIComponent(window.location.href) + (action.Options.tableId ? "&tableId=" + action.Options.tableId : ""))
    //    };
    //});

    //if (items.length === 0) {
    //    return;
    //}



    //var gridId = getDxGridId(options.component.element());
    //var onClickJs = 'loadActionAjax(' + options.data.Key + ',\'' + gridId + '\')';
    //var ajaxMenu = $('<i style="cursor: pointer" class="dx-icon dx-icon-menu" onclick="' + onClickJs + '"></i>');
    //ajaxMenu.appendTo(container);
    //return;


    var gridId = getDxGridId(options.component.element());
    var menuElement = $("<div class='dx-actions-menu' data-is-ajax-act='true'/>").dxMenu({
        onItemClick: function (ev) {
            ev.event.stopPropagation();
            onDxGridActionClick(ev, gridId);
        },
        items: [{ icon: 'menu', id: 'root', items: []}]
    });
    menuElement.find(".dx-menu-item-popout-container").remove();
    menuElement.appendTo(container);

    menuElement.on("click", function () {
        
        var par = menuElement.parent();
        par.empty();
        var loadingPane = $('<div style="visibility: visible;" class="loading-image-small"></div>');
        loadingPane.appendTo(par);
        loadActionAjax(options.data.Key, gridId, container, options.column.objType);

        //console.log( $( this ).text() );
    });

    //setTimeout($(menuElement.find(".dx-menu-item")[0]).click(), 1000);

    //var gridId = getDxGridId(options.component.element());

    //var menuElement = $("<div class='dx-actions-menu'/>").dxMenu({
    //    onItemClick: function (ev) {
    //        ev.event.stopPropagation();
    //        onDxGridActionClick(ev, gridId);
    //    },
    //    items: [{ icon: 'menu', id: 'root', items: items }]
    //});

    //menuElement.find(".dx-menu-item-popout-container").remove();
    //menuElement.appendTo(container);
}

// создание меню действий в строке грида. сделано в js,
// т.к. при использовании mvc wrapper возникают проблемы 
// с созданием шаблона меню для вложенных гридов :(
function dxGridRowMenuCellTemplate(container, options) {
    var actions = options.data.Actions;
    var items = actions.map(function (action) {
        return {
            text: action.Title,
            dialog: action.Options.dialog,
            afterSubmit: action.AfterSubmit,
            url: joinGridActionUrl(action.Options.url, "uniqueIds=" + options.data.Key + "&returnUrl=" + encodeURIComponent(window.location.href) + (action.Options.tableId ? "&tableId=" + action.Options.tableId : ""))
        };
    });

    if (items.length === 0) {
        return;
    }

    var gridId = getDxGridId(options.component.element());

    var menuElement = $("<div class='dx-actions-menu'/>").dxMenu({
        onItemClick: function (ev) {
            
            ev.event.stopPropagation();
            onDxGridActionClick(ev, gridId)
        },
        items: [{ icon: 'menu', id: 'root', items: items }]
    });

    menuElement.find(".dx-menu-item-popout-container").remove();
    menuElement.appendTo(container);
}


function joinGridActionUrl(url, url2) {

    var fixedUrl = url;
    if (fixedUrl) {
        if (fixedUrl.indexOf("?") !== -1)
            fixedUrl += "&";
        else
            fixedUrl += "?";
    }

    return fixedUrl + url2;
}

// получение списка действий для выбранных строк
// берутся действия, которые есть в каждой строке
function getContextActionsForRowsAjax(grid, menu, ev) {
    
    //var actions = {}; var action; var total = 0;

    //Отфильтровываем выделенные - удаленные строки
    var rows = grid.getSelectedRowsData().filter(function () {
        return grid.getSelectedRowKeys();
    });

    var keys = rows.map(function (x) { return x.Key; });// forEach(x=>x.Key)
    var keysString = keys.join(',');

    //var objTypeStr = "";
    //for (var j = 0; j < grid._options.columns.length; j++) {
     
    //    var col = grid._options.columns[j];
        
    //    if (col.caption === "Действия")
    //        objTypeStr = "&objType=" + col.objType;      
    //    }  
    var objTypeStr = "&objType=" + grid._options._optionManager._options.objType;

    // добавляем параметры searchType и searchBlock для корректной работы фильтра WhenHttpGetParamEquals
    var url = getBaseUrl() + '/Search/GetAvailableActions?docKeys=' + keysString + objTypeStr + "&rnd=" + Math.random() +
        "&searchType=" + getUrlParameter('searchType') + "&searchBlock=" + getUrlParameter('searchBlock');
    
    var req = $.ajax({
        url: url,
        type: 'GET',
        contentType: false,
        cache: false,
        processData: false,
    });

    req.then(function (actions) {
        //$(container).empty();

        if (actions && actions.length > 0) {
            var items = [];

            for (var j = 0; j < actions.length; j++) {
                var action = actions[j];

                items.push({
                    text: action.Title,
                    dialog: action.Options.dialog,
                    afterSubmit: action.AfterSubmit,
                    url: joinGridActionUrl(action.Options.url,
                        "uniqueIds=" +
                        keysString +
                        "&returnUrl=" +
                        encodeURIComponent(window.location.href) +
                        (action.Options.tableId ? "&tableId=" + action.Options.tableId : ""))
                });
            }

            menu.option("items", [{ text: 'Действия', id: 'root', items: items }]);
            menu.option("visible", true);
        }

      
        if (actions.length === 0) {         
                var items = [{
                    text: "нет доступных действий",
                    dialog: "DialogWindow",
                    afterSubmit: null
                }];

            menu.option("items", [{ text: 'Действия', id: 'root', items: items }]);
            menu.option("visible", true);
         }

        

        //Не удалять, переопределяется и используется в другом файле (create-document-link.js)
        //TODO: заменить на подписку на событие
        onDxGridSelectionChanged_CustomAction(ev, grid);
    });

    return req;
}

// получение параметра из URL
function getUrlParameter(sParam) {
    var sPageURL = window.location.search.substring(1),
        sURLVariables = sPageURL.split('&'),
        sParameterName,
        i;

    for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');

        if (sParameterName[0] === sParam) {
            return typeof sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
        }
    }
    return false;
};

// получение списка действий для выбранных строк
// берутся действия, которые есть в каждой строке
function getContextActionsForRows(grid, isFilesTable) {
    
    var actions = {}; var action; var total = 0;

    //Отфильтровываем выделенные - удаленные строки
    var rows = grid.getSelectedRowsData().filter(function () {
        return grid.getSelectedRowKeys();
    });
    for (var i = 0; i < rows.length; i++) {
        for (var j = 0; j < rows[i].Actions.length; j++) {
            action = rows[i].Actions[j];

            if (isFilesTable) {
                
                if (action.Title !== 'Удалить') { continue; }
                
                if (action.Title in actions) {
                    actions[action.Title].keys.push(rows[i].Key);
                    var count = ++actions[action.Title].count;
                } else {
                    actions[action.Title] = { data: action, count: 1, keys: [rows[i].Key] }
                }

            } else {

                if (action.Type === 1) { continue; }

                if (action.Options.key in actions) {
                    actions[action.Options.key].keys.push(rows[i].Key);
                    var count = ++actions[action.Options.key].count;
                    //total = total > count ? total : count;
                } else {
                    actions[action.Options.key] = { data: action, count: 1, keys: [rows[i].Key] }
                    //total = total > 1 ? total : 1;
                }
            }
        }
    }

    var items = [];
    for (var key in actions) {
        action = actions[key];

        // Убрала проверку, так как при массовом выделении строк
        // отображается действие только для первой выбранной строчки.
        //if (action.count !== total) {
        //    continue;
        //}

        if (isFilesTable) {

            var urlParts = action.data.Options.url.split('uniqueIds=');
            var docId = decodeURIComponent(urlParts[1]).split('/')[0];
            var ids = '';
            for (var k = 0; k < action.keys.length; k++) {
                if (ids)
                    ids += ',';

                ids += docId + '/' + action.keys[k];
            }
            var url = urlParts[0] + 'uniqueIds=' + encodeURIComponent(ids);

            items.push({
                text: action.data.Title,
                dialog: action.data.Options.dialog,
                afterSubmit: action.data.AfterSubmit,
                url: joinGridActionUrl(url, "returnUrl=" + encodeURIComponent(window.location.href) + (action.data.Options.tableId ? "&tableId=" + action.data.Options.tableId : ""))
            });

        } else {

            items.push({
                text: action.data.Title,
                dialog: action.data.Options.dialog,
                afterSubmit: action.data.AfterSubmit,
                url: joinGridActionUrl(action.data.Options.url, "uniqueIds=" + action.keys.join() + "&returnUrl=" + encodeURIComponent(window.location.href) + (action.data.Options.tableId ? "&tableId=" + action.data.Options.tableId : ""))
            });
        }
    }

    return items;
}



function getDxGridId(e) {
    return e.parent("div[data-grid-id]").attr("data-grid-id");
}

function getDxGridStateKey(e) {
    return e.parent("div[data-state-key]").attr("data-state-key");
}

//возвращает булевый флаг в свойстве элемента
function GetGridElementBoolProperty(elem, propertyName) {
    var stringProp = elem.parent().data(propertyName);
    return $.parseJSON(stringProp.toLowerCase()); //тут проверка на разный регистр и строковые значения "True" и "False"
}

//аналог endsWith для поддержки IE. Проверяет закзачивается ли строка указанным суффиксом
function StringEndsWith(str, suffix) {
    return typeof str === 'string' && str.indexOf(suffix, str.length - suffix.length) !== -1;
}


// синхронизация родительского и дочерних гридов
function dxGridSyncMasterDetailColumns(ev) {

    var current = ev.element.dxDataGrid('instance');

    // если мастер грид
    if (current.option('masterDetail') && current.option('masterDetail').enabled && !current.option('detail-grid')) {

        var callback = function () { dxGridSyncMasterDetails(ev); };
        ev.component.getView("columnHeadersView").resizeCompleted.remove(callback);
        ev.component.getView("columnHeadersView").resizeCompleted.add(callback);
    }
    // если дочерний грид
    else if (current.option('detail-grid')) {

        var detailElement = ev.element;
        var masterElement = ev.element.closest('.dx-datagrid').parent();

        var master = masterElement.dxDataGrid('instance');
        var detail = detailElement.dxDataGrid('instance');

        if (master.columnCount() !== detail.columnCount()) return;
        if (!detail.option('detail-grid')) { return; }

        //var padding = detail.option('master-grid') && detail.option('detail-grid') ? 30 : 0;
        //dxGridSyncMasterDetailGrid(master, detail, padding);
        dxGridSyncMasterDetailGridFix(master, detail, 1);
    }
}

// синхронизация родительского и дочерних гридов
function dxGridSyncMasterDetails(ev) {
    var master = ev.element.dxDataGrid("instance");
    var containers = master.element().find('.sync-detail-grid > div');

    if (!containers.length) { return; }

    for (var j = 0; j < containers.length; j++) {
        var detail = $(containers.get(j)).dxDataGrid('instance');
        //var padding = detail.option('master-grid') && detail.option('detail-grid') ? 30 : 0;
        //dxGridSyncMasterDetailGrid(master, detail, padding);
        dxGridSyncMasterDetailGridFix(master, detail, 1);
    }
}

// синхронизация родительского и дочернего грида (жесткое выставление ширины столбцов)
function dxGridSyncMasterDetailGridFix(master, detail, slice) {

    detail.beginUpdate();

    for (var i = 0; i < master.columnCount(); i++) {
        detail.columnOption(i, 'visibleIndex', master.columnOption(i, 'visibleIndex'));

        if (detail.option('detail-grid')) {
            detail.columnOption(i, 'visible', master.columnOption(i, 'visible'));
        }
    }

    detail.endUpdate();

    // выставляем ширину столбцов в px
    var masterCols = $(master.element()).find("tr").first().children("td").slice(slice);
    var detailCols = $(detail.element()).find("colgroup").first().children("col");

    masterCols.each(function (index) {
        detailCols.eq(index).attr("style", "width: " + masterCols.eq(index).outerWidth() + "px");
    });
}

// синхронизация родительского и дочернего грида
function dxGridSyncMasterDetailGrid(master, detail, padding) {
    detail.beginUpdate();
    for (var i = 0; i < master.columnCount(); i++) {
        if (i === 0) {
            dxGridSyncMasterDetailLeadColumn(master, detail, 'width', padding);
            dxGridSyncMasterDetailLeadColumn(master, detail, 'visibleWidth', padding);
        } else {
            detail.columnOption(i, 'width', master.columnOption(i, 'width'));
            detail.columnOption(i, 'visibleWidth', master.columnOption(i, 'visibleWidth'));
        }
        detail.columnOption(i, 'visibleIndex', master.columnOption(i, 'visibleIndex'));

        if (detail.option('detail-grid')) {
            detail.columnOption(i, 'visible', master.columnOption(i, 'visible'));
        }
    }
    detail.endUpdate();
}

// синхронизация первой видимой колонки родительского и дочернего грида
function dxGridSyncMasterDetailLeadColumn(master, detail, option, padding) {
    var value = master.columnOption(0, option);

    if (!value) {
        detail.columnOption(0, option, master.columnOption(0, option));
    }

    if ($.isNumeric(value)) {
        dxGridSyncMasterDetailLeadColumnWithPixelWidth(master, detail, option, padding);
        return;
    }

    if (StringEndsWith(value, '%')) {
        dxGridSyncMasterDetailLeadColumnWithPercentWidth(master, detail, option, padding);
        return;
    }
}

// синхронизация колонки родительского и дочернего грида с шириной в пикселях
function dxGridSyncMasterDetailLeadColumnWithPixelWidth(master, detail, option, padding) {
    var value = parseFloat(master.columnOption(0, option));
    detail.columnOption(0, option, value - padding);
}

// синхронизация колонки родительского и дочернего грида с шириной в процентах
function dxGridSyncMasterDetailLeadColumnWithPercentWidth(master, detail, option, padding) {
    var str = master.columnOption(0, option);
    var value = parseFloat(str.substring(0, str.length - 1));

    detail.columnOption(0, option, Math.floor(value - padding / (detail.element().width() / 100)) + "%");
}


// обновление данных в гриде
function dxGridReloadData(gridId) {
    var grid = $('#' + gridId).dxDataGrid('instance');
    grid.getDataSource().load().done(function () {
        //Снимаем выделение со строк, т.к. грид все ещё хранит старое состояние о выделенных строках, даже если их уже нет (удалили)
        //Если по какой-то причине, это вам помешает, то можно удалить, т.к. эта проверка продублирована в методе инициализации кнопок групповых действий. Искать по коменту - "Отфильтровываем выделенные - удаленные строки".
        grid.clearSelection();
    });
}

// получить число элементов в гриде
function dxGridTotalCount(gridId) {
    var grid = $('#' + gridId).dxDataGrid('instance');
    return grid.totalCount();
}

// удаляем из таблицы "лишние" тултипы - лечим баг в ie
function dxGridRemoveTitles(element) {
    var cells = element.find("tr.dx-row > td");
    for (var i = 0; i < cells.length; i++) { cells[i].title = ""; }
}

function buildFilter(el) {
    var q = "";
    if (el.columnIndex) {
        q += '["' + el[0] + '","' + el[1] + '","' + el[2] + '"]';
    } else {
        for (var i = 0; i < el.length; i++) {
            var subEl = el[i];
            if (subEl.columnIndex) {
                q += buildFilter(subEl);
                if (i<el.length) {
                    q += ",";
                }
            } else {
                q += '"' + subEl + '",';
            }
        }
    }
    return q;
}

// изменяем в фильтре для булевых столбцов значения, т.к. xnika не умеет
// обрабатывать true/false. используем вместо этого 1 и 0.
// function dxGridCalculateBooleanFilterExpression(filterValue) {
//     return [this.dataField, filterValue ? '=' : '<>', 1];
// }

//отрабатывает перед запросом на сервер, 
//проверяет параметры фильтра - не позволяет отправить на сервер html в querystring
//в данном случае парситься значение addressbook'a
function dxGridBeforeSend(operation, args) {
    if (operation === "load") {
        var grid = $("div[data-state-key='" + args.data.searchType + "']").children("div").dxDataGrid('instance');
        if (grid) {
            var columns = grid.getVisibleColumns();
            var getColumns = "";
            for (var j = 0; j < columns.length; j++) {
                var col = columns[j];
                if (col.colIndexId) {
                    getColumns += col.colIndexId + "||";                        
                }
            }
            args.data.getColumns = getColumns;
        }
    }


    if (operation === "load" && args.data && args.data.filter) {
        if (args.data.take == 1) {
            var grid = $("div[data-state-key='" + args.data.searchType + "']").children("div").dxDataGrid('instance');
            if (grid) {
                var filter = grid.getCombinedFilter();
                if (filter) {
                    var strFilter = buildFilter(filter);

                    //    "[[\"Fields.doc_RegCard/rc_Index/text_Статус\",\"=\",\"Внесение изменений\"],\"and\",[[\"Fields.doc_RegCard/rc_Index/text_Тип_договора\",\"contains\",\"Д\"],\"and\",[\"Fields.doc_RegCard/rc_Index/text_Подразделение\",\"contains\",\"А\"]]]"
                    args.data.filter = '[' + args.data.filter + ',"and",' + strFilter + ']';
                }
            }
        }


        var isHTML = function isHTML(str) {
            var a = document.createElement('div');
            a.innerHTML = str;

            for (var c = a.childNodes, i = c.length; i--;) {
                if (c[i].nodeType == 1) return true;
            }

            return false;
        };

        var processCondition = function processCondition(condition) {
            var result = condition;
            if (isHTML(condition)) {
                var element = $(condition);
                //елси типа адресбудака
                if (element.attr('address-book-item-key')) {
                    var key = element.attr('address-book-item-key');
                    result = key;
                    //если поле - статус деятельности 
                } else if (element.hasClass("activitystatus")) {
                    result = element.find("span").text();
                    //если поле название деятельности
                } else if (element.length === 2 && element.first().hasClass("search-result-activityName-image")) {
                    result = element.last().text();
                }
            }
            if (result && result.split)
                return "\"" + result.split('"').join('\\"').split("'").join('\\"') + "\"";
            else
                return result;
        };

        var processRecursive = function processRecursive(condition) {
			 if((typeof condition) === 'string')
             {
                 condition = condition.replaceAll('\\\\', '\\');
                 //condition = condition.replaceAll('\\"', '\"');
			 }
             var conditionArray = Array.isArray(condition) ? condition : eval(condition);

            var l = conditionArray.length;
            for (var index = 0; index < l; index++) {

                var current = conditionArray[index];
                if (current.replace) {
                    current = current.replace(/^\\+|\\+$/g, ''); // Удаляем \ с начала и конца строки
                }                
                if (current !== conditionArray[index] && current === "") { // Если строка оказалось пустой, то фильтруем по \
                    current = "\\\\";
                }

                if (Array.isArray(current)) {
                    conditionArray[index] = processRecursive(current);
                } else {
                    conditionArray[index] = processCondition(current);
                }
            }
            return "[" + conditionArray.toString() + "]";
        }


        args.data.filter = processRecursive(args.data.filter);
    }
}

// при показе вкладки обновляем гриды на ней, т.к. есть странные 
// "залипания" с ресайзом колонок, если грид был загружен на 
// на неактивной вкладке
$(document).on('shown.bs.tab', 'a[data-toggle="tab"]', function (e) {

    var thash = $(e.target).attr('data-target');

    // для "мелких" разрешений отключаем обновление размеров вкладки с маршрутами в случае, если был развернут хотя бы один маршрут,
    // т.к. это приводит к проблемам с ширинами колонок
    if (ct.utils.isLowScreenWidth()) {
        if (thash.startsWith("#routes-view")) {
            var detailTables = $(thash).find("div[id ^='routes-detail-table-']");
            if (detailTables.length > 0)
                return;
        }
    }
    var grids = $(thash).find("div.dx-widget:has(div.dx-datagrid)");
    for (var i = 0; i < grids.length; i++) {
        $(grids[i]).dxDataGrid('instance').updateDimensions();
    }
});


// добавил проверку на вводимые символы. Только цифры для поля с выбором даты
    function onContentReady(e) {
        var cells = e.element.find('.dx-datagrid-filter-row .dx-datebox');
        if (cells.length > 0) {  
            var valInput;  
            $.each(cells, function (ind, item) {
                valInput = $(item).find('input');
                $.each(valInput,
                    function(i, input) {
                        input.setAttribute("OnKeyDown", "return checkDXKey(event.key)");
                    });
            });
        }
    }

function checkDXKey(key) {
    return (key >= '0' && key <= '9') || key == '.' || key == 'Delete' || key == 'Backspace' || key =='F5';
}


; (function ($) {
    String.prototype.replaceAll = function (search, replace) {
        return this.split(search).join(replace);
    }
    $.fn.removeStyle = function (style) {
        var search = new RegExp(style + '[^;]+;?', 'g');

        return this.each(function () {
            $(this).attr('style', function (i, style) {
                return style && style.replace(search, '');
            });
        });
    };
}(jQuery));

; (function () { }(window.ct = window.ct || {}));

// Понемногу переносим функционал в модуль, чтобы не засирать глобальный объект.
// Во избежание конфликтов с уже имеющимися библиотеками именуем модули с префиксом "ct.".
; (function (common) {
    /* Webshims Html5 Polyfill */
    webshim.setOptions('basePath', getRelativeUrl("Scripts/External/js-webshim/minified/shims/"));
    webshim.polyfill("es6");
    webshim.setOptions('forms', {
        customDatalist: 'auto',
        list: {
            "popover": {
                "appendTo": "body"
            }
        }
    });

    /**
     * Работа со словарями и связанными с ними элементами.
     */
    common.calc = {

        getMinClientWidth: function () {
            return Math.min(
                window.innerWidth,
                document.documentElement.clientWidth,
                document.body.clientWidth
            );
        },

        getMinClientHeight: function () {
            return Math.min(
                window.innerHeight,
                document.documentElement.clientHeight,
                document.body.clientHeight
            );
        },

    }

    /**
     * Проверяем, прошел ли таймаут delayInSeconds между кликами по контролу control.
     * Помогает не дать пользователю случайно сделать несколько кликов подряд, без необходимости блокировать и потом разблокировать контрол.
     * @param {HTMLElement|jQuery} control Контрол, нажатие на который необходимо проверять.
     * @param {number} delayInSeconds Задержка между кликами в секундах.     
     */
    common.delayPassed = function (control, delayInSeconds) {

        var ctrl = $(control);
        if (ctrl.data("last-click-time")) {

            var seconds = (Date.now() - ctrl.data("last-click-time")) / 1000;
            if (seconds <= delayInSeconds)
                return false;
        }
        ctrl.data("last-click-time", Date.now());
        return true;
    };

    /**
     * Отправляет форму на сервер.
     * @param {HTMLElement|jQuery} form Отправляемая форма.
     * @param {function} success Коллбэк, вызываемый при успешном запросе.
     * @param {function} error Коллбэк, вызываемый при ошибке запроса.
     * @param {function} beforeSend Коллбэк, вызываемый перед запросом.
     */
    common.ajaxFormSubmit = function (form, success, error, beforeSend) {
        //TODO: Обязательно добавить блокировку кнопок перед ajax запросом, и разблокировку кнопок после запроса
        var $form = $(form);
        var actionUrl = $form.attr("action");
        var method = $form.attr('method').toUpperCase();

        if (method == 'GET') {
            $.ajax({
                url: actionUrl,
                type: 'GET',
                data: $form.serialize(),
                contentType: false,
                cache: false,
                processData: false,
                success: success,
                error: error
            });

            return;
        }

        var extractJsonPart = function (responseMessage) {
            var openBrace = "{";
            var closeBrace = "}";
            var jsonExtract = "";

            if (responseMessage[0] == "{") {
                var openBracesCnt = 1;

                for (var i = 1; i < responseMessage.length; i++) {
                    if (responseMessage[i] == openBrace) {
                        openBracesCnt++;
                    }
                    if (responseMessage[i] == closeBrace) {
                        openBracesCnt--;
                    }
                    if (openBracesCnt == 0) {
                        jsonExtract = responseMessage.substring(0, i + 1);
                        break;
                    }
                }
            }

            return jsonExtract;
        }

        var handleSuccessCall = function (data) {
            var jSonExtractString = extractJsonPart(data);
            if (jSonExtractString) {
                var jsonExtract = JSON.parse(jSonExtractString);
                if (jsonExtract.status == "ERROR") {
                    error({
                        responseText: jsonExtract.responseMessage,
                        allMessages: jsonExtract.allMessages
                    });
                }
                if (jsonExtract.status == "OK") {
                    success(jsonExtract.responseMessage, jsonExtract.afterSubmitJs, jsonExtract.allMessages, jsonExtract);
                }
            } else {
                if (!data) {
                    success(data);
                } else {
                    error({ responseText: data });
                }
            }
        };

        var handleErrorCall = function (data) {
            error(data);
        };

        //событие перед отправкой формы
        $(form).trigger("beforeSubmit");

        // check HTML5 support
        if (window.FormData !== undefined) {
            var formData = new FormData(form);

            //n.volosatov
            var isUploadAttachment = typeof UploadAttachment !== "undefined" && $(".modal-title:visible:contains('Создать версию')").length == 0;
            var ajaxFiles = getAjaxFiles(form);
            var ajaxFilesLength = ajaxFiles.length;
            var ajaxFilesProps = {};
            for (var i = 0; i < ajaxFilesLength; i++) {
                var current = ajaxFiles[i];
                var item = current.data;

                if (isUploadAttachment) {
                    var fileKey = current.key;
                    var fileProps = UploadAttachment.getFileProps(fileKey);
                    if (fileProps !== null) {
                        ajaxFilesProps[fileKey] = fileProps;
                        formData.append(item.name, item.file, fileKey);
                    } else {
                        formData.append(item.name, item.file, item.file.name);
                    }


                } else {
                    formData.append(item.name, item.file, item.file.name);
                }


            }

            if (isUploadAttachment && ajaxFilesLength > 0)
                formData.append("attachmentFilesProps", JSON.stringify(ajaxFilesProps));


            $.ajax({
                url: actionUrl,
                type: 'POST',
                data: formData,
                mimeType: "multipart/form-data",
                contentType: false,
                cache: false,
                processData: false,
                beforeSend: beforeSend,
                success: handleSuccessCall,
                error: handleErrorCall
            });
        } else {
            // generate unique iframe
            var iframeId = 'unique' + (new Date().getTime());
            var iframe = $('<iframe src="javascript:false;" name="' + iframeId + '" ></iframe>');
            iframe.hide();

            // set form target to iframe
            $form.attr('target', iframeId);

            var preloadHandler;
            preloadHandler = function () {
                iframe.unbind('load', preloadHandler);
                iframe.load(function (e) {
                    var doc = getFrameDocument(iframe[0]);
                    var docRoot = doc.body ? doc.body : doc.documentElement;
                    var data = docRoot.innerHTML;

                    handleSuccessCall(data);
                    iframe.remove();
                });

                $form.submit();
            };

            // add iframe to body
            iframe.bind('load', preloadHandler);
            iframe.appendTo('body');
        }
    };

    /**
     * Какая-то каштомная отмена действия браузера. Хз зачем, но вот так.
     * @param {Event} event Отменяемое событие.
     */
    common.preventDefault = function (event) {
        if (event.preventDefault) {
            event.preventDefault();
        } else {
            event.returnValue = false;
        }
    };

    /**
     * Работа со словарями и связанными с ними элементами.
     */
    common.dictionary = {

        DATA_SEPARATOR: '|',
        VIEW_DATA_SEPARATOR: ', ',

        /**
         * Заполняет отображаемые поля (из данных в соседнем скрытом поле).
         */
        fillDisplayFields: function () {
            var elementsToChange = [];
            $(".dict-modal-control").each(function (index, dictionaryControl) {
                var el = common.dictionary.fillSingleDisplayField($(dictionaryControl));
                if (el) elementsToChange.push(el);
            })

            setTimeout(function () {
                for (var i = 0; i < elementsToChange.length; i++) {
                    elementsToChange[i].change();
                }
            }, 100);
        },

        /**
         * Заполняет отображаемое поле (из данных в соседнем скрытом поле, single-selection).
         * @param {jQuery} $dictionaryModalControl Контрол, в котором надо заполнить отображаемое поле.
         */
        fillSingleDisplayField: function ($dictionaryModalControl) {
            var dictEditName = $dictionaryModalControl.attr("data-edit-name");
            var isTable = $dictionaryModalControl.closest(".table-edit").length > 0;

            var parentContainerSelector = isTable ? ".table-edit-row" : ".column-container";
            var hiddenDictFields = $dictionaryModalControl.closest(parentContainerSelector)
                .find(".display-field-part[dictionary-edit-name=" + dictEditName + "]");
            if (!hiddenDictFields.length) {
                hiddenDictFields = $dictionaryModalControl.closest(parentContainerSelector)
                    .parent().find(".display-field-part[dictionary-edit-name=" + dictEditName + "]");
            }
            var displayText = hiddenDictFields
                .map(function () {  // берем значения
                    return this.value;
                })
                .get()  // преобразуем в массив
                .filter(function (element) {  // фильтруем невалидные
                    return (element && $.trim(element).length);
                })
                .join(", ");  //склеиваем в строку

            var dictionaryDisplayField = $dictionaryModalControl.find(".dict-display-field");
            if (dictionaryDisplayField.val() !== displayText) {
                dictionaryDisplayField.val(displayText);//.change();

                return dictionaryDisplayField;
            }
        },

        /**
         * Заполняет отображаемые поля (из данных в ближайших скрытых полях, multi-selection).
         * @param {jQuery} $dictionaryModalControl Контрол, в котором надо заполнить отображаемые поля.
         */
        fillMultipleDisplayFields: function ($dictControl) {
            var hiddenDictRows = $dictControl.find("ul li");
            var displayTextArr = [];
            hiddenDictRows.each(function (num, row) {
                var columnTextArr = $(row).find("input.display-field-part")
                    .map(function () { //берем значения
                        return this.value;
                    })
                    .get() //преобразуем в массив
                    .filter(function (element) { //фильтруем невалидные
                        return !(element == null || $.trim(element).length === 0);
                    }); //склеиваем в строку
                var columnText = columnTextArr.length > 1 ? "(" + columnTextArr.join(",") + ")" : columnTextArr[0];
                displayTextArr.push(columnText);
            });

            var displayText = displayTextArr.
                filter(function (element) {
                    return (element != null) && $.trim(element).length !== 0;
                })
                .join(", ");

            $dictControl.find(".mult-dict-display").val(displayText).change();
        },

        fillMultipleDisplayFieldsEx: function ($dictControl) {
            var hiddenDictRows = $dictControl.find("ul.multiple-editor-list li");
            var displayTextArr = [];
            hiddenDictRows.each(function (num, row) {
                var columnTextArr = $(row).find("input.display-field-part")
                    .map(function () { //берем значения
                        return this.value;
                    })
                    .get() //преобразуем в массив
                    .filter(function (element) { //фильтруем невалидные
                        return !(element == null || $.trim(element).length === 0);
                    }); //склеиваем в строку
                var columnText = columnTextArr.length > 1 ? "(" + columnTextArr.join(this.DATA_SEPARATOR) + ")" : columnTextArr[0];
                displayTextArr.push(columnText);
            });

            var displayText = displayTextArr.
                filter(function (element) {
                    return (element != null) && $.trim(element).length !== 0;
                })
                .join(this.VIEW_DATA_SEPARATOR);

            $dictControl.find(".mult-dict-display").val(displayText)
                .change();

        },

        fillMultipleDictFieldsByList: function ($dictControl, dictionaryName) {
            var that = this;

            var hiddenDictRows = $dictControl.find("ul.multiple-editor-list li");
            var commaData = [];
            hiddenDictRows.each(function (num, row) {
                $(row).find("input")
                    .each(function (num, element) {
                        var input = $(element);
                        var value = input.attr('value');
                        if (value == undefined) {
                            value = "";
                        }

                        var d = { name: getInputName(input.attr('name')), value: value, isDisplay: input.hasClass('display-field-part'), displayValue: value };
                        var found = false;
                        for (var i = 0; i < commaData.length; i++) {
                            var commaDatum = commaData[i];
                            if (commaDatum.name == d.name) {
                                commaDatum.value = commaDatum.value + that.DATA_SEPARATOR + d.value;
                                if (commaDatum.isDisplay) {
                                    commaDatum.displayValue = commaDatum.displayValue + that.VIEW_DATA_SEPARATOR + d.displayValue;
                                }
                                found = true;
                                break;
                            }
                        };
                        if (!found) {
                            commaData.push(d);
                        }
                    })
            });


            // это был последний элемент, нужно сбросить оставшиеся значения
            if (commaData.length == 0) {
                if (dictionaryName) {
                    $dictControl.find("input[dictionary-edit-name='" + dictionaryName + "']")
                        .each(function (num, control) {
                            var input = $(control);
                            var d = { name: input.attr('name'), value: "", isDisplay: input.hasClass('display-field-part'), displayValue: "" };
                            commaData.push(d);
                        });
                }
            }

            var displayText = '';

            for (var i = 0; i < commaData.length; i++) {
                var commaDatum = commaData[i];
                var re = /:/gi;
                var newStr = commaDatum.name.replace(re, '-');
                var inputElement = $dictControl.find("input[name='" + newStr + "']");
                if (inputElement) {
                    inputElement.val(commaDatum.value);
                    if (commaDatum.isDisplay) {
                        displayText += (displayText != '') ? that.VIEW_DATA_SEPARATOR + commaDatum.displayValue : commaDatum.displayValue;
                    }
                } else {
                    console.log("Элемент с id: " + commaDatum.name + " не найден! (значение: " + commaDatum.displayValue + ")");
                }
            }

            $dictControl.find(".mult-dict-display").val(displayText).change();
        },


        /**
         * Удаляет значение из списка выбранных в справочнике элементов.
         * @param {HTMLElement} removeGlyph Элемент с кнопкой (символом) удаления.
         */
        removeFromMultipleDisplayFields: function (removeGlyph) {
            var dictControl = $(removeGlyph).closest(".dict-modal-control");
            var splittedName = $(removeGlyph).siblings("input").first().attr("name").split("-");
            var removedRowIndex = parseInt(splittedName[splittedName.length - 1]);
            var inputName = splittedName[0] + "_deleted";
            var deleteRowInput;

            if ($("[name='" + inputName + "']").length > 0) {
                deleteRowInput = $("[name='" + inputName + "']");
            } else {
                var deleteContainer = $("<div data-name='deletedTableElements'></div>");
                deleteRowInput = $("<input type='hidden' name='" + inputName + "' value='' />");
                deleteContainer.append(deleteRowInput);
                $(removeGlyph).closest("ul").parent().append(deleteContainer);
            }

            deleteRowInput.val(deleteRowInput.val() + removedRowIndex + ",");
            $(removeGlyph).closest("li").remove();

            this.fillMultipleDisplayFields(dictControl);
        },


        removeFromMultipleDisplayFieldsEx: function (removeGlyph) {

            var dictControl = $(removeGlyph).closest(".dict-modal-control");
            var hiddenDictRows = dictControl.find("ul.multiple-editor-list li");

            if ($(hiddenDictRows).length === 1) {
                this.removeAllEx(removeGlyph);
            } else {
                var splittedName = $(removeGlyph).siblings("input").first().attr("name").split("-");
                var removedRowIndex = parseInt(splittedName[splittedName.length - 1]);
                var inputName = splittedName[0] + "_deleted";
                var deleteRowInput;

                if ($("[name='" + inputName + "']").length > 0) {
                    deleteRowInput = $("[name='" + inputName + "']");
                } else {
                    var deleteContainer = $("<div data-name='deletedTableElements'></div>");
                    deleteRowInput = $("<input type='hidden' name='" + inputName + "' value='' />");
                    deleteContainer.append(deleteRowInput);
                    $(removeGlyph).closest("ul").parent().append(deleteContainer);
                }

                deleteRowInput.val(deleteRowInput.val() + removedRowIndex + this.DATA_SEPARATOR);
                $(removeGlyph).closest("li").remove();

                this.fillMultipleDictFieldsByList(dictControl, splittedName[0]);
            }
        },

        removeAllEx: function (removeGlyph) {
            var dictControl = $(removeGlyph).closest(".dict-modal-control");
            var hiddenDictRows = dictControl.find("ul.multiple-editor-list li");
            var dictFooter = dictControl.find("ul.multiple-editor-list div");
            var commaData = [];
            var dictionaryName = "";
            hiddenDictRows.each(function (num, row) {
                $(row).find("input")
                    .each(function (num, element) {
                        var input = $(element);
                        dictionaryName = input.attr("name").split("-")[0];
                        input.closest("li").remove();
                        input.remove();
                    });
            });
            $(dictFooter).remove();

            this.fillMultipleDictFieldsByList(dictControl, dictionaryName);
        }

    };

    /**
     * Отображает диалог с перечнем ошибок.
     * @param {string|Array<string>} errorMessages Текст ошибки / массив текстов ошибок.
     * @param {function} onHidden Коллбэк, вызываемый после закрытия диалога.
     * @param {boolean} isWarning Определяет заголовок модалки (Предупреждение или ошибка)
     */
    common.showCommonErrors = function (errorMessages, onHidden, isWarning) {

        var isErrorPage = false;

        if (typeof (errorMessages) !== "undefined") {

            if (typeof (errorMessages) === "string" && errorMessages.indexOf("application-errors") !== -1) {

                errorMessages = $(errorMessages).find('.application-errors .alert.alert-danger');
                isErrorPage = true;

            } else if (typeof (errorMessages) !== "string" && !Array.isArray(errorMessages)) {

                errorMessages = "Необходимо выполнить вход в систему.";
            }
        }
        //если прошел не массив ошибок, а всего одна - считаем ее как массив из 1 элемента
        if (!Array.isArray(errorMessages)) {
            errorMessages = [errorMessages];
        }

        var $dialog = $('#commonErrorsDialog');
        if (isWarning) $(".error-dlg-header").text("Предупреждение:");
        $dialog.modal('show');

        var htmlMessages = [];
        $.each(errorMessages, function (i, item) {
            if (isErrorPage)
                htmlMessages.push(item);
            else
                htmlMessages.push('<li><p class="form-control-static">' + item + '</p></li>');
        });

        var $messagesList = $dialog.find("ul");

        if (isErrorPage) {

            $messagesList.parent().html(htmlMessages);
        } else {

            $messagesList.html(htmlMessages);
        }

        if (onHidden != null) {
            $dialog.on('hidden.bs.modal', onHidden);
        }
    }

    /**
     * Экранирует не-ASCII символы в строке.
     * @param {string} str Экранируемая строка.
     * @returns {string}
     */
    common.safeAscii = function (str) {
        return str.replace(/[\u007F-\uFFFF]/g, function (chr) {
            return "\\u" + ("0000" + chr.charCodeAt(0).toString(16)).substr(-4)
        });
    };

    /**
     * Декодируем ранее закодированное значение строки на вьюхе.
     * @param {string} htmlStr 
     * @returns {string} 
     */
    common.decodeHTML = function decodeHTML(htmlStr) {
        var txt = document.createElement('textarea');
        txt.innerHTML = htmlStr;
        return txt.value;
    };

    /**
     * Создаёт уникальный (более или менее) идентификатор заданной длины с нужным префиксом.
     * @param {number} length Длина идентификатора (количество генерируемых символов).
     * @param {string} prefix Префикс для идентификатора (по умолчанию - без префикса).
     * @returns {string}
     */
    common.createId = function (length, prefix) {
        length = length || 8;
        prefix = prefix || "";
        var id = prefix;
        var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

        for (var i = 0; i < length; i++) {
            id += possible.charAt(Math.floor(Math.random() * possible.length));
        }

        return id;
    }

    common.routesGrid = {

        refresh: function () {

            //Обновляем грид с маршрутами, т.к. некоторые действия в маршрутах зависят от того, прикреплен файл или нет (выводится или сообщение о необходимости прикрепить файл, или диалог с действием).
            var routesGrid = $('div[id^="routes-table"]');
            if (routesGrid.length === 1)
                routesGrid.dxDataGrid("instance").refresh();
        }
    }

}((window.ct = window.ct || {}, window.ct.common = window.ct.common || {})));

/* Common */
if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (searchString, position) {
        position = position || 0;
        return this.indexOf(searchString, position) === position;
    };
}

if (!String.prototype.indexOfInsensitive) {
    String.prototype.indexOfInsensitive = function (s, b) {
        return this.toLowerCase().indexOf(s.toLowerCase(), b);
    }
}

if (!String.prototype.containsInsensitive) {
    String.prototype.containsInsensitive = function (s) {
        return this.indexOfInsensitive(s) !== -1;
    }
}

// костыльные функции, которые нужны, чтобы колонки, скрываемые аналитиками при просмотре документа,
// замещались другими. работают только с двумя колонками
function hideViewElementColumn(element) {
    var elementColumn = element.closest(".column-container");
    elementColumn.addClass("hidden-column");
    placeElementsInTwoColumns(elementColumn.parent());
}

function showViewElementColumn(element) {
    var elementColumn = element.closest(".column-container");
    elementColumn.removeClass("hidden-column");
    placeElementsInTwoColumns(elementColumn.parent());
}

function placeElementsInTwoColumns(container) {
    container.find("> div:not(.hidden-column)").filter(":even").css("clear", "left");
    container.find("> div:not(.hidden-column)").filter(":odd").css("clear", "none");
}

/**
 * @deprecated Use ct.common.alert(title, message)
 */
function showAlert(header, message) {
    ct.common.alert(header, message);
}


function showReplacingContentError(container, errorMessage) {
    var errorTemplate = $("<div class='page-body'><h2>Во время работы приложения произошла ошибка</h2></div>");
    var errorStandartMessage = $("<small>При необходимости получить дополнительную информацию обратитесь к администратору</small>");
    var errorPanel = $("<div class='application-errors'></div>");
    var errorBody = $("<div class='alert alert-danger' role='alert'></div>");
    errorBody.text(errorMessage);
    errorPanel.append(errorBody);
    errorTemplate.append(errorPanel);
    errorTemplate.append(errorStandartMessage);
    $(container).last().empty();
    $(container).last().append(errorTemplate);
}

function replaceContent(url,
    srcElementSelector,
    postLoadFunction,
    postLoadErrorFunction,
    errorUrl,
    preLoadScriptPath,
    postLoadScriptPath) {
    var srcContainer = $(srcElementSelector).last();
    setPreventDefault(event);

    var loadFunction = function () {
        srcContainer.load(url,
            function (response, status, xHr) {
                var errorResponse = false;
                var responseObject = $($.parseHTML(response));
                var authForm = responseObject.find("#content-login-form");

                if (authForm.length !== 0) {
                    document.location = errorUrl; // логин с переходом на главную поиска
                } else {
                    if (!$(this).html()) {
                        if (response.includes('ERROR:')) {
                            document.location = errorUrl;
                        } else {
                            var errorMessage = responseObject.attr('data-empty-body-error-message');
                            if (!errorMessage)
                                errorMessage = responseObject.find('div.application-errors > div').text();
                            if (!errorMessage)
                                errorMessage = "Во время выполнения приложения произошла ошибка.";
                            postLoadErrorFunction(errorMessage);
                        }
                    } else {
                        if (status === "error") {
                            errorResponse = true;
                            postLoadErrorFunction("Error occured: " + xHr.status + " " + xHr.statusText);
                        }

                        if (!errorResponse) {
                            if (postLoadFunction) {
                                postLoadFunction();
                            }

                            if (postLoadScriptPath) {
                                $.getScript(postLoadScriptPath);
                            }
                        }
                    }
                }
            });
    }
    if (preLoadScriptPath) {
        $.getScript(preLoadScriptPath, loadFunction);
    } else {
        loadFunction();
    }

}

function shiftModalScrollToAnchor(anchorId) {
    $('div.modal-body').animate(
        {
            scrollTop: $('div.modal-body #' + anchorId + '-accordion').offset().top - $('div.modal-body').offset().top
        }, 10);
}

function getUrlAnchor() {
    return window.location.hash.substr(1);
}
function getQueryStringParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}
function getAbsoluteUrl(relativeUrl) {
    var baseUrl = $('base').attr('href');
    if (baseUrl && baseUrl.lastIndexOf('/') == baseUrl.length - 1)
        baseUrl = baseUrl.substr(0, baseUrl.length - 1);
    if (relativeUrl && relativeUrl.indexOf('/') == 0)
        relativeUrl = relativeUrl.substr(1);

    return baseUrl + '/' + relativeUrl;
}

/**
 * @deprecated Use ct.utils.preventDefault(event)
 */
function setPreventDefault(evt) {
    if (evt) {
        if (evt.preventDefault)
            evt.preventDefault();
        else
            evt.returnValue = false;
    }
}

function stopEvent(evt) {
    if (evt && evt.stopPropagation)
        evt.stopPropagation();
    else
        window.event.cancelBubble = true;
}

function toggleVisibility(element, shown) {
    var items = jQuery(element);

    if (shown)
        items.removeClass("js-hidden");
    else
        items.addClass("js-hidden");

    items.each(function (index, item) {
        if (item.tagName != 'OPTION')
            return;

        if (shown) {
            if (jQuery(element).parent('span.toggleOption').length)
                jQuery(element).unwrap();
        } else {
            if (jQuery(element).parent('span.toggleOption').length == 0)
                jQuery(element).wrap('<span class="toggleOption" style="display: none;" />');
        }
    });
}

function getFrameDocument(frame) {
    var doc = null;

    // IE8 cascading access check
    try {
        if (frame.contentWindow) {
            doc = frame.contentWindow.document;
        }
    } catch (err) {
    }

    if (doc) {
        return doc;
    }

    try {
        // simply checking may throw in ie8 under ssl or mismatched protocol
        doc = frame.contentDocument ? frame.contentDocument : frame.document;
    } catch (err) {
        // last attempt
        doc = frame.document;
    }

    return doc;
}

function getDoc(frame) {
    var doc = null;

    // IE8 cascading access check
    try {
        if (frame.contentWindow) {
            doc = frame.contentWindow.document;
        }
    } catch (err) {
    }

    if (doc) { // successful getting content
        return doc;
    }

    try { // simply checking may throw in ie8 under ssl or mismatched protocol
        doc = frame.contentDocument ? frame.contentDocument : frame.document;
    } catch (err) {
        // last attempt
        doc = frame.document;
    }
    return doc;
}

function getTimeStamp() {
    return (new Date()).getTime();
}

// return date as YYYY-MM-DD string
function formatDate(date) {
    var d = new Date(date),
        month = '' + (d.getMonth() + 1),
        day = '' + d.getDate(),
        year = d.getFullYear();

    if (month.length < 2) month = '0' + month;
    if (day.length < 2) day = '0' + day;

    return [year, month, day].join('-');
}

function formatMoney(value) {
    if (!jQuery.isNumeric(value))
        return value;
    var moneyPrecision = 2;
    if (window.moneyPrecision)
        moneyPrecision = window.moneyPrecision;
    return value.toFixed(moneyPrecision).replace(/\d(?=(\d{3})+\.)/g, '$& ');
}

function appendUrlArgument(url, parameterName, parameterValue, replaceDuplicates, atStart /*Add param before others*/) {
    replaceDuplicates = replaceDuplicates || true;
    atStart = atStart || false;

    var cl, urlhash;
    if (url.indexOf('#') > 0) {
        cl = url.indexOf('#');
        urlhash = url.substring(cl, url.length);
    } else {
        cl = url.length;
        urlhash = '';
    }

    var sourceUrl = url.substring(0, cl);
    var urlParts = sourceUrl.split("?");
    var newQueryString = "";

    if (urlParts.length > 1 && urlParts[1] != '') {
        var parameters = urlParts[1].split("&");
        for (var i = 0; i < parameters.length; i++) {
            var parameterParts = parameters[i].split("=");
            if (!(replaceDuplicates && parameterParts[0] == parameterName)) {
                if (newQueryString == "")
                    newQueryString = "?";
                else
                    newQueryString += "&";
                newQueryString += parameterParts[0] + "=" + (parameterParts[1] ? parameterParts[1] : '');
            }
        }
    }

    if (newQueryString == "")
        newQueryString = "?";

    if (atStart) {
        newQueryString = '?' + parameterName + "=" + parameterValue + (newQueryString.length > 1 ? '&' + newQueryString.substring(1) : '');
    } else {
        if (newQueryString !== "" && newQueryString != '?')
            newQueryString += "&";
        newQueryString += parameterName + "=" + (parameterValue ? parameterValue : '');
    }

    return urlParts[0] + newQueryString + urlhash;
}



function addNewTableRow(elem, event) {
    setPreventDefault(event);

    var table = $(elem).closest('.table-edit > .table-content');

    var templateRow = table.children(".templates").children('.table-row-template').children('.table-edit-row');
    var isNestedTable = templateRow.length === 0;

    if (isNestedTable) {
        var nestedTableName = $(elem).closest(".table-row-row-view").data("table-name");
        nestedTableName = $(nestedTableName.split("-")).last()[0];

        templateRow = table.parents().find(".templates").children('.table-row-row-view').closest(".table-edit-wrapper").children('.table-edit')
            .find('.nested-table-row-template').children('.table-edit-row').filter(function () {
                return $(this).closest(".nested-table-row-template").data("table-name") === nestedTableName;
            });
    }

    var templateNestedTable = table.children(".templates").children('.table-row-row-view');
    if (!templateNestedTable || templateNestedTable.length === 0) {
        templateNestedTable = table.parents().find(".templates").children('.table-row-row-view');
    }

    var newRow = templateRow.clone(false);

    var keys = table.children('.table-edit-row').map(function () {
        return $(this).attr('data-rowkey');
    });

    var currentMaxkey;
    if (keys.length > 0) {
        currentMaxkey = Math.max.apply(Math, jQuery.map(keys, function (e) {
            return e;
        }));
    } else {
        currentMaxkey = 0;
    }

    newRow.attr('data-rowkey', currentMaxkey + 1);
    newRow.addClass('new-table-row');

    var tableName = table.parent().attr('data-name');
    var newRowKey = currentMaxkey + 1;
    var wrapper = $(elem).closest(".table-edit-wrapper");

    var parentTablePrefix = "";
    var tablePrefix = "";
    if (isNestedTable) {
        parentTablePrefix = wrapper.children(".table-edit").attr("data-name") + "-";
        tablePrefix = parentTablePrefix.split("-");
        tablePrefix = tablePrefix[tablePrefix.length - 2] + "-";
    }

    newRow.find('input:not([type=radio]), select, checkbox, textarea, ul, button[is-addressbook=true]').each(function () {

        if ($(this).attr('name')) {
            if (isNestedTable)
                $(this).attr('name', parentTablePrefix + $(this).attr('name').replace(tablePrefix, '') + "-" + newRowKey);
            else
                $(this).attr('name', $(this).attr('name') + '-' + newRowKey);
        }

        // data-field-name используется в контроле адресной книги
        if ($(this).attr('data-field-name')) {
            if (isNestedTable)
                $(this).attr('data-field-name', parentTablePrefix + $(this).attr('data-field-name').replace(tablePrefix, '') + "-" + newRowKey);
            else
                $(this).attr('data-field-name', $(this).attr('data-field-name') + '-' + newRowKey);
        }

        if ($(this).attr('data-name')) {

            if (isNestedTable)
                $(this).attr('data-name', parentTablePrefix + newRowKey);
            else
                $(this).attr('data-name', parentTablePrefix + $(this).attr('data-name') + '-' + newRowKey);
        }

        if ($(this).attr('data-parent-name')) {
            var currentValue = $(this).attr('data-parent-name');

            if (isNestedTable) {
                currentValue = currentValue.replace('parent', '').replace(tablePrefix, '');
                currentValue = parentTablePrefix + currentValue + "-" + newRowKey + "parent";
            }
            else
                currentValue = currentValue.substring(0, currentValue.length - 6) + "-" + newRowKey + "parent";
            $(this).attr('data-parent-name', currentValue);
        }

        if ($(this).attr('data-edit-required') === 'true') {
            $(this).removeAttr('data-edit-required');
            $(this).attr("required", true);
        }

        if ($(this).attr('data-dictionarygroup')) {
            $(this).attr('data-dictionarygroup',
                tableName + "-" + $(this).attr('data-dictionarygroup') + "-" + newRowKey);
        }
        if ($(this).attr('data-dictionaryParent')) {
            $(this).attr('data-dictionaryParent',
                tableName + "-" + $(this).attr('data-dictionaryparent') + "-" + newRowKey);
        }
        if ($(this).attr('data-addressbook-main-field')) {
            $(this).attr('data-addressbook-main-field',
                tableName + "-" + $(this).attr('data-addressbook-main-field') + "-" + newRowKey);
        }
    });

    newRow.find(".show-dict-btn").each(function () {
        if ($(this).attr('parent-id')) {
            $(this).attr('parent-id', tableName + "-" + $(this).attr('parent-id') + "-" + newRowKey);
        }
    });


    newRow.find("[data-dg-group]").each(function () {
        $(this).attr('data-dg-group', tableName + "-" + newRowKey + "-" + $(this).attr('data-dg-group'));
    });

    table.append(newRow);

    // если есть шаблон для вложенной таблицы, рендерим его внутри контейнера вложенной таблицы как шаблон для новой строки
    var nestedTables = templateNestedTable;
    if (nestedTables != undefined && nestedTables.length > 0) {
        var newRowRowViewDataKey = newRow.attr("data-rowkey");

        var parentTableName = wrapper.children(".table-edit").attr("data-name");

        newRow.children(".table-row-row-view").each(function () {
            $(this).remove();
        });

        nestedTables.each(function (index, table) {

            var nestedTable = $(table);

            var parentName = $(elem).closest(".table-row-row-view").data("table-name");//вложенная таблица
            // Если у нас parentName/parentTableName не из шаблонов, а из самой таблицы, то их имя будет с полным путём, в виде <grandparent_table_name>-<grandparent_row_id>-<parent_table_name>
            // а в шаблоне в data-parent-name указан только относительный путь, так что обрезаем всё лишнее.
            parentName = parentName ? parentName.split("-").pop() : parentTableName.split("-").pop(); //не вложенная таблица

            if (nestedTable.find('.table-edit').attr('data-parent-name') != parentName) return;

            var newRowRowView = nestedTable.clone(true);
            newRowRowView.find('input:not([type=radio]), select, checkbox, textarea').each(function () {
                $(this).attr('name', parentTableName + "-" + newRowRowViewDataKey + "-" + $(this).attr('name'));
                $(this).attr('data-field-name', parentTableName + "-" + newRowRowViewDataKey + "-" + $(this).attr('data-field-name')); // data-field-name используется в контроле адресной книги
                if ($(this).attr('data-dictionarygroup'))
                    $(this).attr('data-dictionarygroup', parentTableName + "-" + $(this).attr('data-dictionarygroup') + "-" + newRowRowViewDataKey);
                if ($(this).attr('data-dictionaryparent'))
                    $(this).attr('data-dictionaryparent', parentTableName + "-" + $(this).attr('data-dictionaryparent') + "-" + newRowRowViewDataKey);
            });

            newRowRowView.attr("data-rowkey", newRowRowViewDataKey);
            newRowRowView.attr("data-table-name", nestedTable.find(".table-edit").attr("data-name"));

            newRowRowView.find(".table-edit").each(function () {
                $(this).attr("data-deleted-rows-field", parentTableName + "-" + newRowRowViewDataKey + "-" + nestedTable.find(".table-edit").attr("data-deleted-rows-field"));
                $(this).attr("data-name", parentTableName + "-" + newRowRowViewDataKey + "-" + nestedTable.find(".table-edit").attr("data-name"));
            });
            newRowRowView.insertAfter(newRow.children().last());

            // чтобы сразу шаблон подчиненной таблицы появился
            var radioButton = newRow.find(".table-row-selector-radio")[0];
            if (radioButton != undefined) {
                changeNestedEditTableVisibility(radioButton);
            }
        });
    }

    newRow.find(".form-dictionary-control").each(function () {
        var item = $(this);
        if (item.attr("data-dictionaryparent") == "")
            setDictionaryField(item);
    });

    setEditTableRowVisibility('.table-edit-wrapper', table.closest('.table-edit-wrapper').parent());

    var datalistName = newRow.find('[data-wslist]').attr('data-wslist');
    newRow.find('[data-wslist]').attr('list', datalistName);
    reinitialiseScriptShort();

    var paramsObj = {
        rowKey: newRowKey,
        innerTableContainer: newRow
    };
    calcTableNUM(table);
    $(table).trigger("onTableRowAdded", paramsObj);

    window.adjustNewRowTextAreaHeight(newRow);
}


function copyTableRow(elem, event) {
    setPreventDefault(event);

    var table = $(elem).closest('.table-edit > .table-content');
    var oldRow = $(elem).closest(".table-edit-row");

    var newRow = $(elem).closest(".table-edit-row").clone(false);

    var templateRow = table.children(".templates").children('.table-row-template').children('.table-edit-row');
    var isNestedTable = templateRow.length === 0;

    if (isNestedTable) {
        var nestedTableName = $(elem).closest(".table-row-row-view").data("table-name");
        nestedTableName = $(nestedTableName.split("-")).last()[0];

    }

    var templateNestedTable = table.children(".templates").children('.table-row-row-view');
    if (!templateNestedTable || templateNestedTable.length === 0) {
        templateNestedTable = table.parents().find(".templates").children('.table-row-row-view');
    }


    lastKey = newRow.attr('data-rowkey');
    console.log(lastKey);

    var keys = table.children('.table-edit-row').map(function () {
        return $(this).attr('data-rowkey');
    });

    var currentMaxkey;
    if (keys.length > 0) {
        currentMaxkey = Math.max.apply(Math, jQuery.map(keys, function (e) {
            return e;
        }));
    } else {
        currentMaxkey = 0;
    }

    newRow.attr('data-rowkey', currentMaxkey + 1);

    var tableName = table.parent().attr('data-name');
    var newRowKey = currentMaxkey + 1;
    var wrapper = $(elem).closest(".table-edit-wrapper");

    var parentTablePrefix = "";
    var tablePrefix = "";
    if (isNestedTable) {
        parentTablePrefix = wrapper.children(".table-edit").attr("data-name") + "-";
        tablePrefix = parentTablePrefix.split("-");
        tablePrefix = tablePrefix[tablePrefix.length - 2] + "-";

        console.log(parentTablePrefix);
        console.log(tableName);
    }

    newRow.find('input:not([type=radio]), select, checkbox, textarea, ul, button[is-addressbook=true], div').each(function () {

        if ($(this).attr('name')) {
            if (isNestedTable)
                $(this).attr('name', parentTablePrefix + $(this).attr('name').replace(parentTablePrefix, '').replace('-' + lastKey, '-' + newRowKey));
            else
                $(this).attr('name', $(this).attr('name').replace('-' + lastKey, '-' + newRowKey));
        }

        if ($(this).attr('data-table-name')) {
            if (isNestedTable)
                $(this).attr('data-table-name', parentTablePrefix + $(this).attr('data-table-name').replace(parentTablePrefix, '').replace('-' + lastKey, '-' + newRowKey));
            else
                $(this).attr('data-table-name', $(this).attr('data-table-name').replace('-' + lastKey, '-' + newRowKey));
        }

        if ($(this).attr('data-deleted-rows-field')) {
            if (isNestedTable)
                $(this).attr('data-deleted-rows-field', parentTablePrefix + $(this).attr('data-deleted-rows-field').replace(parentTablePrefix, '').replace('-' + lastKey, '-' + newRowKey));
            else
                $(this).attr('data-deleted-rows-field', $(this).attr('data-deleted-rows-field').replace('-' + lastKey, '-' + newRowKey));
        }

        if ($(this).attr('data-deleted-attachment-keys')) {
            if (isNestedTable)
                $(this).attr('data-deleted-attachment-keys', parentTablePrefix + $(this).attr('data-deleted-attachment-keys').replace(parentTablePrefix, '').replace('-' + lastKey, '-' + newRowKey));
            else
                $(this).attr('data-deleted-attachment-keys', $(this).attr('data-deleted-attachment-keys').replace('-' + lastKey, '-' + newRowKey));
        }
        // data-field-name используется в контроле адресной книги
        if ($(this).attr('data-field-name')) {
            if (isNestedTable)
                $(this).attr('data-field-name', parentTablePrefix + $(this).attr('data-field-name').replace(parentTablePrefix, '').replace('-' + lastKey, '-' + newRowKey));
            else
                $(this).attr('data-field-name', $(this).attr('data-field-name').replace('-' + lastKey, '-' + newRowKey));
        }

        if ($(this).attr('data-name')) {
            console.log("FDATANAME");
            console.log(parentTablePrefix + newRowKey);
            if (isNestedTable)
                $(this).attr('data-name', parentTablePrefix + newRowKey);
            else
                $(this).attr('data-name', parentTablePrefix + $(this).attr('data-name').replace('-' + lastKey, '-' + newRowKey));
        }

        if ($(this).attr('data-parent-name')) {
            var currentValue = $(this).attr('data-parent-name');

            if (isNestedTable) {
                currentValue = currentValue.replace('parent', '').replace(tablePrefix, '');
                currentValue = parentTablePrefix + currentValue + "-" + newRowKey + "parent";
            }
            else
                currentValue = currentValue.substring(0, currentValue.length - 6).replace('-' + lastKey, '-' + newRowKey) + "parent";
            $(this).attr('data-parent-name', currentValue);
        }

        if ($(this).attr('data-edit-required') === 'true') {
            $(this).removeAttr('data-edit-required');
            $(this).attr("required", true);
        }

        if ($(this).attr('data-dictionarygroup')) {
            $(this).attr('data-dictionarygroup',
                tableName + "-" + $(this).attr('data-dictionarygroup').replace('-' + lastKey, '-' + newRowKey));
        }
        if ($(this).attr('data-dictionaryParent')) {
            $(this).attr('data-dictionaryParent',
                tableName + "-" + $(this).attr('data-dictionaryparent').replace('-' + lastKey, '-' + newRowKey));
        }
        if ($(this).attr('data-addressbook-main-field')) {
            $(this).attr('data-addressbook-main-field',
                tableName + "-" + $(this).attr('data-addressbook-main-field').replace('-' + lastKey, '-' + newRowKey));
        }
    });



    newRow.find(".show-dict-btn").each(function () {
        if ($(this).attr('parent-id')) {
            $(this).attr('parent-id', tableName + "-" + $(this).attr('parent-id').replace('-' + lastKey, '-' + newRowKey));
        }
    });

    newRow.find("span").each(function () {
        if ($(this).attr('data-related-field')) {
            $(this).attr('data-related-field', $(this).attr('data-related-field').replace('-' + lastKey, '-' + newRowKey));
        }
    });


    newRow.find("[data-dg-group]").each(function () {
        $(this).attr('data-dg-group', tableName.replace('-' + lastKey, '-' + newRowKey) + "-" + $(this).attr('data-dg-group'));
    });

    table.append(newRow);

    newRow.find(".bool-sel-ctl").each(function () {
        var item = $(this);
        var name = item.attr('name').substring(0, item.attr('name').lastIndexOf('-'));
        item.val($(oldRow[0]).find('[name^="' + name + '"]').val());
    });

    newRow.find(".form-dictionary-control").each(function () {
        var item = $(this);
        if (item.attr("data-dictionaryparent") == "")
            setDictionaryField(item);
    });

    setEditTableRowVisibility('.table-edit-wrapper', table.closest('.table-edit-wrapper').parent());

    var datalistName = newRow.find('[data-wslist]').attr('data-wslist');
    newRow.find('[data-wslist]').attr('list', datalistName);
    reinitialiseScriptShort();

    var paramsObj = {
        rowKey: newRowKey,
        innerTableContainer: newRow
    };
    calcTableNUM(table);
    $(table).trigger("onTableRowAdded", paramsObj);
}

function calcTableNUM(table) {
    var nums = table.closest(".table-edit").children(".table-content").children(".table-edit-row[data-rowkey]")
        .children(".table-edit-columns").find("input[type=hidden][name*='-NUM-']");
    var i = 1;

    nums.each(function () {
        var num = $(this);
        num.val(i);
        i++;
    });
}

function editTableRow(elem, event, js) {
    event.preventDefault();
    TableEditForm(elem, js);
}


function editTableRowByColumn(elem, event, js) {
    event.preventDefault();
    if ($(elem).closest(".table-content").find(".selector-all-row").filter(function () {
        return $(this).is(':checked');
    }).length == 0) {
        alert("Необходимо выбрать хотя бы одну строку.")
    } else {
        TableEditRowsByColumn(elem, js);
    }
}


function viewTableRow(elem, event, js) {
    event.preventDefault();
    TableViewForm(elem, js);
}


function removeTableRow(elem, event) {
    //для программного удаления 
    if (event !== undefined) {
        setPreventDefault(event);
    }

    var table = $(elem).closest('.table-edit');
    var deletingRowsField = table.find("input[type=hidden][name='" + table.attr('data-deleted-rows-field') + "']");
    var deletingRowKeys = deletingRowsField.val();
    if ($(elem).attr('groupedTable')) {
        $(elem).closest('.table-edit-row').find('.table-edit-row[data-rowkey]').each(function (index, value) {
            var deletingRowKeys = deletingRowsField.val();
            var rowGroupKey = $(value).attr('data-rowkey').split("-").pop();
            deletingRowsField.val(deletingRowKeys +
                rowGroupKey +
                ",");
        });

    } else {
        deletingRowsField.val(deletingRowKeys +
            $(elem).closest('.table-edit-row').attr('data-rowkey').split("-").pop() +
            ",");
    }
    //mark attachment keys on row to delete
    var deletingAttachmentsField = table.find("input[type=hidden][name='" + table.attr('data-deleted-attachment-keys') + "']");
    $(elem).closest('.table-edit-row').find('.attachment').each(function (index, value) {
        var attachmentKey = $(value).attr('data-attachmentKey');
        var deletingAttachmentKeys = deletingAttachmentsField.val();
        deletingAttachmentsField.val(deletingAttachmentKeys + attachmentKey + ",");
    });

    var row = $(elem).closest('.table-edit-row');
    row.find(".delete-table-row-attachment:visible").children(":first").click();

    var rowKey = row.attr("data-rowkey");
    $(table).trigger("onTableRowRemoving", rowKey);
    // Ищем нашу форму, в случае если у нас есть хотя бы одно поле типа money, то на форме висит событие submit.autoNumeric
    // Дальше мы удаляем строку из DOM, и плагин падает, т.к. он внутри себя запоминает настройки каждого поля с помощью jquery.data()
    // Поэтому удалим эвент, удалим строку и инициализируем плагин заново
    row.closest('form').off('submit.autoNumeric');
    row.remove();
    initAutonumeric();

    setEditTableRowVisibility('.table-edit-wrapper', table.closest(".table-edit-wrapper").parent());
    calcTableNUM(table);
    $(table).trigger("onTableRowRemoved", rowKey);
}

function removeAttachment(elem, event) {
    setPreventDefault(event);

    var table = $(elem).closest('.table-edit');
    var deletingAttachmentsField = table.find("input[type=hidden][name='" + table.attr('data-deleted-attachment-keys') + "']");
    var values = deletingAttachmentsField.val();

    var attachmentWrapper = $(elem).closest('.attachment-field-wrapper');

    var deletingAttachmentKey = attachmentWrapper.find(".attachment").attr("data-attachmentKey");
    deletingAttachmentsField.val(values + deletingAttachmentKey + ",");

    attachmentWrapper.find('.select-file-control').removeClass('hidden');
    attachmentWrapper.find('.view-file-control').addClass('hidden');
}

function urlParam(name) {
    var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
    if (results == null) {
        return null;
    }
    else {
        return decodeURI(results[1]) || 0;
    }
}

function createGuid() {
    function _p8(s) {
        var p = (Math.random().toString(16) + "000000000").substr(2, 8);
        return s ? "-" + p.substr(0, 4) + "-" + p.substr(4, 4) : p;
    }
    return _p8() + _p8(true) + _p8(true) + _p8();
}

function addTableRowAttachHandler() {

    setTimeout(function () {

        var attachInput = $('input[name="file-drop-area-hidden-attachmentFiles"]');

        if (attachInput.length > 0) {
            $('input[name="file-drop-area-hidden-attachmentFiles"]').click(function () {

                $('input[name^="file-drop-area-hidden-attachmentFiles"]:first').trigger("click");

                return false;
            });
        } else {
            addTableRowAttachHandler();
        }

    }, 100);
}

function addTableRowAttachment(elem, event) {
    setPreventDefault(event);

    //запоминаем идентификатор input'а, куда будет записываться
    var rowElement = elem.closest(".table-edit-row");
    var row = $(rowElement);
    var fileSelector = "[name$='-attachment-" + row.data("rowkey") + "']";
    var fileInput = row.find(fileSelector);
    //TODO: Завернуть все эти свойства в один объект
    window.attachmentName = fileInput.attr("name");
    window.attachmentKeyName = window.attachmentName.replace("attachment", "attachment_key");
    window.deleteTableRowAttachmentElement = row.find(".delete-table-row-attachment");
    window.doNotReload = true;
    window.files = "";
    window.fileKeys = "";
    window.addTableRowAttachmentWasClicked = true;
    window.filterGridColumnEnabled = true;
    window.filterGridColumn = "AttachmentDocType";
    window.filterGridColumnValue = "Документация процедуры закупки";

    var flowKey = urlParam('flowKey');
    var uniqueIds = urlParam('uniqueIds');
    var url = flowKey == null ?
        getBaseUrl() + "/ContextAction/CreateAttachment?isMultiple=false&allowedCategories=" + encodeURIComponent("Документация") + "&uniqueIds=" + uniqueIds :
        getBaseUrl() + "/ContextAction/CreateAttachment?isMultiple=false&allowedCategories=" + encodeURIComponent("Документация") + "&flowKey=" + flowKey;

    ModalHelper({
        dialog: "#actionDialog",
        url: url,
        isTargetBlank: false,
        afterSubmit: "addRowAttachment#" + url
    }).openWindow();

    if (window.location.pathname.toLowerCase().indexOf("/Edit".toLowerCase()) === -1) {
        addTableRowAttachHandler();
    }
}

function deleteTableRowAttachment(elem, event, smallDelete) {

    //скрываем кнопку удаления вложения в строку таблицы
    $(elem).parent().hide();

    //очищаем поля
    _deleteTableRowAttachment($(elem), smallDelete);
}

function _deleteTableRowAttachment(element, smallDelete) {
    //очищаем поля
    var row = element.closest(".table-edit-row");
    var rowKey = row.data("rowkey");
    var fileSelector = "[name$='-attachment-" + rowKey + "']";
    var fileInput = row.find(fileSelector);
    fileInput.val("");
    var fileKeySelector = "[name$='-attachment_key-" + rowKey + "']";
    var fileKeyInput = row.find(fileKeySelector);
    var key = fileKeyInput.val();
    fileKeyInput.val("");

    if (smallDelete)
        return;

    if (window.location.pathname.toLowerCase().indexOf("/Edit".toLowerCase()) !== -1) {

        $.ajax({
            url: getBaseUrl() + "/ContextAction/DeleteAttachmentHandler",
            type: 'POST',
            data: { clientGuid: key, uniqueIds: urlParam('uniqueIds') },
            cache: false
        });

    } else {

        //удаляем вложение
        var grid = window.grids[0]._gridInstance;
        var rows = grid.getVisibleRows();

        for (var i = 0; i < rows.length; i++) {
            var r = rows[i];
            if (r.data["AttachmentClientGuid"] == key) {
                grid.deleteRow(r.rowIndex);
                break;
            }
        }
    }
}

function disableTemplateRowValidation() {
    $('.table-row-template').find('input, select, checkbox, textarea').filter('[required]').each(function () {
        $(this).attr('data-edit-required', true);
        $(this).removeAttr('required');
    });
}

function loadLinks(control, event) {

    setPreventDefault(event);
    stopEvent(event);

    var plusMinus = $(control);

    var container = $(plusMinus.attr("data-collapse-selector"));
    if ($.trim(container.html()) === "") {

        container.addClass("text-center");
        container.append("<div class=\"loading-image\"></div>");
        var loadingImage = container.children(".loading-image").get(0);
        showLoadingIndicator(loadingImage);

        var url = plusMinus.attr("data-load-url");
        $.ajax({
            url: url,
            success: function (data) {

                container.empty();
                container.removeClass("text-center");
                container.append(data);
            },
            error: function () {
                var errorPanel = $("<div class='alert alert-danger'></div>");
                errorPanel.text("Не удалось загрузить связанные документы");
                var errorBody = $("<div class='modal-body'></div>");
                errorBody.append(errorPanel);
                container.append(errorBody);
            }
        });
    }
}


/* Ajax File Storage */

var ajaxFileStorage = {};
var ajaxFileStorageCounter = 0;

function isAjaxFileStorageSupported() {
    return window.FormData !== undefined;
}

function appendAjaxFile(form, name, file) {
    var formObj = $(form);

    var forms = $("form");
    if (forms.length > 1 && window.location.pathname.toLowerCase().indexOf("/Edit".toLowerCase()) === -1 && window.addTableRowAttachmentWasClicked)
        formObj = forms.first();

    var storage;
    var storageKey = formObj.attr('data-ajaxFileStorageKey');
    if (!storageKey) {
        storageKey = ++ajaxFileStorageCounter;
        formObj.attr('data-ajaxFileStorageKey', storageKey);

        storage = {};
        storage.counter = 0;
        storage.data = [];
        ajaxFileStorage[storageKey] = storage;
    } else
        storage = ajaxFileStorage[storageKey];

    var key = ++storage.counter;

    var item = {};
    item.name = name;
    item.file = file;
    item.id = id;
    storage.data[key] = item;
    return key;
}

function removeAjaxFile(form, key) {
    var formObj = $(form);

    var storageKey = formObj.attr('data-ajaxFileStorageKey');
    if (!storageKey)
        return;

    var storage = ajaxFileStorage[storageKey];
    if (!storage)
        return;

    var data = storage.data;
    if (data[key])
        delete data[key];

    formObj.trigger("onRemoveAjaxFile");
}

function getAjaxFiles(form) {
    var formObj = $(form);

    var storageKey = formObj.attr('data-ajaxFileStorageKey');
    if (!storageKey)
        return [];

    var storage = ajaxFileStorage[storageKey];
    if (!storage)
        return [];

    var result = [];
    for (var key in storage.data) {
        result.push({ key: key, data: storage.data[key] });
    }
    return result;
}

/* Ajax Forms */

function ajaxCall(url, method, success, error) {
    var actionUrl = url;
    method = method.toUpperCase();

    if (method == 'GET') {
        $.ajax({
            url: actionUrl,
            type: 'GET',
            contentType: false,
            cache: false,
            processData: false,
            success: success,
            error: error
        });

        return;
    }

    var extractJsonPart = function (responseMessage) {
        var openBrace = "{";
        var closeBrace = "}";
        var jsonExtract = "";

        if (responseMessage[0] == "{") {
            var openBracesCnt = 1;

            for (var i = 1; i < responseMessage.length; i++) {
                if (responseMessage[i] == openBrace) {
                    openBracesCnt++;
                }
                if (responseMessage[i] == closeBrace) {
                    openBracesCnt--;
                }
                if (openBracesCnt == 0) {
                    jsonExtract = responseMessage.substring(0, i + 1);
                    break;
                }
            }
        }

        return jsonExtract;
    }

    var handleSuccessCall = function (data) {
        var jSonExtractString = extractJsonPart(data);
        if (jSonExtractString) {
            var jsonExtract = JSON.parse(jSonExtractString);
            if (jsonExtract.status == "ERROR") {
                error({
                    responseText: jsonExtract.responseMessage,
                    allMessages: jsonExtract.allMessages
                });
            }
            if (jsonExtract.status == "OK") {
                success(jsonExtract.responseMessage, jsonExtract.afterSubmitJs);
            }
        } else {
            if (!data) {
                success(data);
            } else {
                error({ responseText: data });
            }
        }
    };

    var handleErrorCall = function (data) {
        error(data);
    };

    $.ajax({
        url: actionUrl,
        type: 'POST',
        contentType: false,
        cache: false,
        processData: false,
        success: handleSuccessCall,
        error: handleErrorCall
    });
}

function ajaxFormSubmit(form, success, error, beforeSend) {
    //TODO: Обязательно добавить блокировку кнопок перед ajax запросом, и разблокировку кнопок после запроса
    var formObj = $(form);
    var actionUrl = formObj.attr("action");
    var method = formObj.attr('method').toUpperCase();

    if (method == 'GET') {
        $.ajax({
            url: actionUrl,
            type: 'GET',
            data: formObj.serialize(),
            contentType: false,
            cache: false,
            processData: false,
            success: success,
            error: error
        });

        return;
    }

    var extractJsonPart = function (responseMessage) {
        var openBrace = "{";
        var closeBrace = "}";
        var jsonExtract = "";

        if (responseMessage[0] == "{") {
            var openBracesCnt = 1;

            for (var i = 1; i < responseMessage.length; i++) {
                if (responseMessage[i] == openBrace) {
                    openBracesCnt++;
                }
                if (responseMessage[i] == closeBrace) {
                    openBracesCnt--;
                }
                if (openBracesCnt == 0) {
                    jsonExtract = responseMessage.substring(0, i + 1);
                    break;
                }
            }
        }

        return jsonExtract;
    }

    var handleSuccessCall = function (data) {
        var jSonExtractString = extractJsonPart(data);
        if (jSonExtractString) {
            var jsonExtract = JSON.parse(jSonExtractString);
            console.log(jsonExtract);
            if (jsonExtract.status == "ERROR") {
                error({
                    responseText: jsonExtract.responseMessage,
                    allMessages: jsonExtract.allMessages,
                    fileName: jsonExtract.downloadFileName,
                    messageForUser: jsonExtract.messageForUser
                });
            }
            if (jsonExtract.status == "OK") {
                success(jsonExtract.responseMessage, jsonExtract.afterSubmitJs, jsonExtract.allMessages, jsonExtract);
            }
        } else {
            if (!data) {
                success(data);
            } else {
                error({
                    responseText: data
                });
            }
        }
    };

    var handleErrorCall = function (data) {
        error(data);
    };

    //событие перед отправкой формы
    $(form).trigger("beforeSubmit");

    // check HTML5 support
    if (window.FormData !== undefined) {
        var formData = new FormData(form);

        //n.volosatov
        var isUploadAttachment = typeof UploadAttachment !== "undefined" && $(".modal-title:visible:contains('Создать версию')").length == 0;
        var ajaxFiles = getAjaxFiles(form);
        var ajaxFilesLength = ajaxFiles.length;
        var ajaxFilesProps = {};

        for (var i = 0; i < ajaxFilesLength; i++) {
            var current = ajaxFiles[i];
            var item = current.data;

            if (isUploadAttachment) {

                var fileKey = current.key;
                var fileProps = UploadAttachment.getFileProps(fileKey);
                if (fileProps !== null) {
                    ajaxFilesProps[fileKey] = fileProps;
                    formData.append(item.name, item.file, fileKey);
                } else {
                    formData.append(item.name, item.file, item.file.name);
                }


            } else {
                formData.append(item.name, item.file, item.file.name);
            }
        }

        if (isUploadAttachment && ajaxFilesLength > 0)
            formData.append("attachmentFilesProps", JSON.stringify(ajaxFilesProps));


        $.ajax({
            url: actionUrl,
            type: 'POST',
            data: formData,
            mimeType: "multipart/form-data",
            contentType: false,
            cache: false,
            processData: false,
            beforeSend: beforeSend,
            success: handleSuccessCall,
            error: handleErrorCall
        }).then(function () {
            //resetActionsCache();
        });
    } else {
        // generate unique iframe
        var iframeId = 'unique' + (new Date().getTime());
        var iframe = $('<iframe src="javascript:false;" name="' + iframeId + '" ></iframe>');
        iframe.hide();

        // set form target to iframe
        formObj.attr('target', iframeId);

        var preloadHandler;
        preloadHandler = function () {
            iframe.unbind('load', preloadHandler);
            iframe.load(function (e) {
                var doc = getFrameDocument(iframe[0]);
                var docRoot = doc.body ? doc.body : doc.documentElement;
                var data = docRoot.innerHTML;

                handleSuccessCall(data);
                iframe.remove();
            });

            formObj.submit();
        };

        // add iframe to body
        iframe.bind('load', preloadHandler);
        iframe.appendTo('body');
    }
}

/* Loading Indicator */

function showLoadingIndicator(selector) {
    $(selector).addClass('loading-image-shown');
}

function hideLoadingIndicator(selector) {
    $(selector).removeClass('loading-image-shown');
}

/* hide block */
function hideBlock(block) {
    $(block).hide();
}
function showBlock(block) {
    $(block).show();
}

/* Navigation */

function onSelectNavigate(control) {
    document.location = control.options[control.selectedIndex].value;
}

/* Search result */

function getSearchResultSelectedUniqueIds(searchResultTable) {
    var result = [];
    var table = $(searchResultTable);

    var checkedInputs = table.find(".search-result-selector-checkbox:checked");
    checkedInputs.each(function (index, item) {
        var row = $(item).closest(".search-result-row");
        var menuItems = row.find(".search-result-column-actions li[data-itemUniqueId]");
        if (!menuItems.length)
            return;

        var uniqueId = menuItems.first().attr("data-itemUniqueId");
        if (uniqueId && $.inArray(uniqueId, result) < 0)
            result.push(uniqueId);
    });

    return result;
}

function getSearchResultSelectedUniqueIdsWithoutActionCheck(searchResultTable) {
    var result = [];
    var table = $(searchResultTable);

    var checkedInputs = table.find(".search-result-selector-checkbox:checked");
    checkedInputs.each(function (index, item) {
        var row = $(item).closest(".search-result-row");
        var uniqueId = row.attr("data-itemUniqueId");
        if (uniqueId && $.inArray(uniqueId, result) < 0)
            result.push(uniqueId);
    });

    return result;
}

function getSearchResultSelectedActionKeys(searchResultTable) {
    var result = [];
    var resultInitialised = false;
    var table = $(searchResultTable);

    var checkedInputs = table.find(".search-result-selector-checkbox:checked");
    checkedInputs.each(function (index, item) {
        var row = $(item).closest(".search-result-row");
        var menuItems = row.find(".search-result-column-actions li[data-actionKey]");

        if (!resultInitialised) {
            menuItems.each(function (actionIndex, actionItem) {
                var actionKey = $(actionItem).attr("data-actionKey");
                if (actionKey && $.inArray(actionKey, result) < 0)
                    result.push(actionKey);
            });

            resultInitialised = true;
        } else {
            var intersection = [];
            menuItems.each(function (actionIndex, actionItem) {
                var actionKey = $(actionItem).attr("data-actionKey");
                if (actionKey && $.inArray(actionKey, result) >= 0)
                    intersection.push(actionKey);
            });
            result = intersection;
        }
    });

    return result;
}

function setSearchResultTableMenuVisibility(searchResultTable) {
    var table = $(searchResultTable);
    var actionKeys = getSearchResultSelectedActionKeys(searchResultTable);

    var anyAllowedMenuItem = false;
    var anyAllowedSelectOption = false;

    table.find(".search-result-actions li[data-actionKey]").each(function (actionIndex, actionItem) {
        var actionKey = $(actionItem).attr("data-actionKey");
        var contains = $.inArray(actionKey, actionKeys) >= 0;
        anyAllowedMenuItem = anyAllowedMenuItem || contains;
        toggleVisibility(actionItem, contains);
    });

    table.find(".search-result-actions option[data-actionKey]").each(function (actionIndex, actionItem) {
        var actionKey = $(actionItem).attr("data-actionKey");
        var contains = $.inArray(actionKey, actionKeys) >= 0;
        anyAllowedSelectOption = anyAllowedSelectOption || contains;
        toggleVisibility(actionItem, contains);
    });

    toggleVisibility(table.find(".search-result-actions-selectorMenu"), anyAllowedMenuItem);
    toggleVisibility(table.find(".search-result-actions-selectorSelect"), anyAllowedSelectOption);

    table.each(function (index, item) {
        var selectionResultSelector = $(item).attr('data-selectionResult');
        if (selectionResultSelector) {
            var selectionResult = $(selectionResultSelector);
            selectionResult.val(getSearchResultSelectedUniqueIdsWithoutActionCheck(item));
        }
    });
}

function setSearchResultTableRowViewVisibility(searchResultTable) {
    var table = $(searchResultTable + ' > .search-result-table');

    table.find('.search-result-row').each(function () {
        var showTables = $(this).find('.nested-tables-visibility').is(":checked");
        var nestedTables = $(this).find('.table-row-row-view');
        if (showTables)
            nestedTables.show();
        else
            nestedTables.hide();
    });
}

function changeNestedViewTableVisibility(visibilityrBtn) {
    var nestedTables = $(visibilityrBtn).closest(".search-result-row").find("> .search-result-row-view");
    changeNestedTablesVisibility(visibilityrBtn, nestedTables);
}

function changeNestedEditTableVisibility(visibilityrBtn) {
    var nestedTables = $(visibilityrBtn).closest(".table-edit-row").find("> .table-row-row-view");
    changeNestedTablesVisibility(visibilityrBtn, nestedTables);
}

function changeNestedTablesVisibility(visibilityrBtn, nestedTables) {
    var hiddenChBox = $(visibilityrBtn).siblings(".nested-tables-visibility");
    var nestedTablesVisible = hiddenChBox.is(":checked");
    if (nestedTablesVisible) {
        hiddenChBox.prop("checked", false);
        visibilityrBtn.checked = false;
        nestedTables.hide();
        $(visibilityrBtn).trigger("checked:after", false);
    } else {
        hiddenChBox.prop("checked", true);
        visibilityrBtn.checked = true;
        nestedTables.show();
        $(visibilityrBtn).trigger("checked:after", true);
    }
}

function setEditTableRowVisibility(editTable, parentElement) {
    var table;
    if (parentElement)
        table = parentElement.find(editTable + ' > .table-edit').not(parentElement.find('.nested-table-row-template ' + editTable + ' > .table-edit'));
    else
        table = $(editTable + ' > .table-edit');

    table.find('.table-content > .table-edit-row').each(function () {
        var showTables = $(this).find('.nested-tables-visibility').is(":checked");
        var nestedTables = $(this).find('.table-row-row-view');
        if (showTables)
            nestedTables.show();
        else
            nestedTables.hide();
    });
}

function initialiseSearchResultTableScripts(searchResultTable) {

    function initialise(searchResultTable) {
        $(document).on('change', searchResultTable + " .search-result-actions-checkbox",
            function () {
                var checked = $(this).prop('checked');
                var selector = ":checked";
                if (checked) {
                    selector = ":not(:checked)";
                }
                $(searchResultTable + " .search-result-selector-checkbox" + selector).click();
                //$(searchResultTable + " .search-result-selector-checkbox").prop('checked', checked);

                setSearchResultTableMenuVisibility(searchResultTable);
            });

        $(document).on('change', searchResultTable + " .search-result-selector-checkbox",
            function () {
                var table = $(this).closest(".search-result");
                var selectedItemsDiv = table.find(".search-result-selected");
                var selectedItemsArray = selectedItemsDiv.val().split(',');
                var docId = $(this).closest(".search-result-row").attr("data-itemuniqueid");
                var newSelectedItemsString = "";

                if (!$(this).prop('checked')) {
                    $(searchResultTable + " .search-result-actions-checkbox").prop('checked', false);
                    var index = selectedItemsArray.indexOf(docId);
                    var firstPart = selectedItemsArray.slice(0, index);
                    var secondPart = selectedItemsArray.slice(index + 1, selectedItemsArray.length);
                    selectedItemsArray = firstPart.concat(secondPart);
                } else {
                    if (selectedItemsArray[0] !== "") {
                        selectedItemsArray.push(docId);
                    } else {
                        selectedItemsArray[0] = docId;
                    }
                }

                $.each(selectedItemsArray,
                    function (index, item) {
                        newSelectedItemsString += item;
                        if (index !== selectedItemsArray.length - 1) {
                            newSelectedItemsString += ",";
                        }
                    });

                selectedItemsDiv.val(newSelectedItemsString);

                var externalSelector = table.attr('data-selectionResult');
                if (externalSelector)
                    $(externalSelector).val(newSelectedItemsString);

                setSearchResultTableMenuVisibility(searchResultTable);

                // дизейбл кнопки создания извещения, если нет выбранных лотов. переподписка при загрузке новых результатов
                var table = $(this).closest(".search-result");
                var selectedItemsDiv = table.find(".search-result-selected");
                var btnDisabled = selectedItemsDiv.val() === "";
                $("#search-result-control-actions a.btn:first").attr("disabled", btnDisabled);
            });

        $(document).on('change', searchResultTable + " .search-result-selector-radio",
            function () {
                setSearchResultTableRowViewVisibility(searchResultTable);
            });
    }

    initialise(searchResultTable);
}

function initialiseTableEditScripts(innerTableContainer) {

    function initialize(innerTableContainer) {
        function invertClasses() {
            if ($(this).hasClass("show-nested-table-button")) {
                $(this).removeClass("glyphicon-th-list").removeClass("show-nested-table-button");
                $(this).addClass("hide-nested-table-button").addClass("glyphicon-pushpin");
            } else {
                $(this).removeClass("glyphicon-pushpin").removeClass("hide-nested-table-button");
                $(this).addClass("glyphicon-th-list").addClass("show-nested-table-button");
            }
        }

        $(innerTableContainer).find(".show-nested-table-button").click(invertClasses);
        $(innerTableContainer).find(".hide-nested-table-button").click(invertClasses);
    }

    $(document).on("onTableRowAdded", function (e, params) {
        if (params.innerTableContainer != null) {
            initialize(params.innerTableContainer);
        }
    });

    $(document).on("onDocumentModalWindowLoaded", function (e, params) {
        if (params.innerTableContainer != null) {
            initialize(params.innerTableContainer);
        }
    });

    initialize(innerTableContainer);
}

function onSearchResultTableMenuClick(searchResultTable, control, dialog, event) {
    var href = $(control).attr("href");
    var uniqueIds = getSearchResultSelectedUniqueIds(searchResultTable);
    var uniqueIdsUrl = encodeURIComponent(uniqueIds.join());

    setPreventDefault(event);
    openActionUrlAsModal(dialog, href + "&uniqueIds=" + uniqueIdsUrl, false);
}

function onSearchResultTableMenuClick(searchResultTable, control, event) {
    var href = $(control).attr("href");
    var uniqueIds = getSearchResultSelectedUniqueIds(searchResultTable);
    var uniqueIdsUrl = encodeURIComponent(uniqueIds.join());

    setPreventDefault(event);

    var url = href + "&uniqueIds=" + uniqueIdsUrl;

    var windowType;
    var actionName = $(control).text(); //$(control).parent().attr("data-actionkey");
    var objectType = $(searchResultTable).find(".search-result-table").attr("data-objecttype");

    var result = checkAccess(actionName, uniqueIds, objectType);

    if (!result.isPassed) {
        showUserNotification("Ошибка при проверке доступности действия для группы объектов", result.notificationMessage);
    } else {
        windowType = $(control).attr("data-windowtype");
        handleUrl(url, windowType);
    }
}

function showUserNotification(notifTitle, notifText) {
    var notificationDialog = $('#modalNotification');
    if (notificationDialog) {
        var messageContent = notificationDialog.find('#notificationWindowText');
        if (messageContent) messageContent.text(notifText);
        var messageTitle = notificationDialog.find('#notificationWindowTitle');
        if (messageTitle) messageTitle.text(notifTitle);
        notificationDialog.modal('show');
    }
}

function handleUrl(url, windowType, afterSubmit, control) {
    $("#btn-ok_from_modal").unbind("click");

    switch (windowType) {
        case "NoWindow":
            {
                TryAjaxHandleUrl(url, function (readyUrl) {
                    document.location = readyUrl;
                });
                break;
            }
        case "NoWindowWithBlank":
            {
                TryAjaxHandleUrl(url, function (readyUrl) {
                    openUrlInNewTab(readyUrl);
                });
                break;
            }
        case "DialogWindowWithResultOnBlank":
            {
                ModalHelper({
                    dialog: '#actionDialog',
                    url: url,
                    isTargetBlank: true,
                    afterSubmit: afterSubmit,
                    control: control
                }).openWindow();
                break;
            }
        case "InfoWindow":
            {
                ModalHelper({
                    dialog: '#modalInfo',
                    url: url,
                    isTargetBlank: false,
                    afterSubmit: afterSubmit,
                    control: control,
                    keepScripts: true
                }).openWindow();
                break;
            }
        case "DialogWindowDeleteAttachment":
        case "DialogWindow":
        default:
            {
                //запоминаем текущую вкладку
                saveCurrentHash();
                ModalHelper({
                    dialog: '#actionDialog',
                    url: url,
                    isTargetBlank: false,
                    afterSubmit: windowType === "DialogWindowDeleteAttachment" ? "deleteAttachment#" + url : afterSubmit,
                    control: control,
                    keepScripts: true
                }).openWindow();
                break;
            }
    }
}

//открываем урл и добавляем в querystring текущий урл
function openWindowWithReturnUrl(url) {
    var currentUrl = encodeURIComponent(document.location.pathname + document.location.search);
    document.location = url + "?returnUrl=" + currentUrl;
}

function openWindowWithReturnUrlAdditional(url) {
    var currentUrl = encodeURIComponent(document.location.pathname + document.location.search);
    document.location = url + "&returnUrl=" + currentUrl;
}

//Пробует выполнить ajax запрос с указанным url. Если все хорошо - запускаем обработку с полученным в ответе url (например, открываем в текущей либо новой вкладке).
//Если не получилось прочитать json в отчете - действуем по старому, т.е. работаем с оригинальным url
function TryAjaxHandleUrl(url, urlActionCallback) {
    $.ajax({
        url: url,
        type: 'GET',
        contentType: false,
        cache: false,
        processData: false,
        beforeSend: function (request) {
            request.setRequestHeader("NeedToReturnJson", true);
        }
    })
        .done(function (data, ttt) {
            if (data) {
                try {
                    var res = JSON.parse(data);
                    if (res) {
                        if (res.status === "ERROR") showCommonErrors(res.responseMessage);
                        else if (res.status === "OK") urlActionCallback(res.responseMessage);
                        return;
                    }
                } catch (e) {
                    //если не получилось распарсить json, сичтаем что все ок и ошибки не было
                }

                //работаем с оригинальным url (если никакого json в отвкете не пришло)
                urlActionCallback(url);
            }
        })
        .fail(function (data) {
            showCommonErrors(data);
        });
}

function checkAccess(actionName, selectedItems, objectType) {
    var isPassed = true;
    var notificationMessage;

    var url = getAbsoluteUrl("GroupActionAccessibility/VerifyAccess");
    var data = { 'uniqueIds': selectedItems, 'actionName': actionName, 'objectType': objectType };

    $.ajax({
        url: url,
        type: "POST",
        async: false,
        data: data,
        success: function (data) {
            isPassed = data.result;
            notificationMessage = data.errorMessage;
        },
        error: function (data) {
            isPassed = false;
        },
        traditional: true   // чтобы массив передался как надо
    });

    return {
        isPassed: isPassed,
        notificationMessage: notificationMessage
    }
}

function openUrlInNewTab(url) {
    window.open(url, '_blank');
}

function onSearchResultTableMenuClickNoWindow(searchResultTable, control, event) {
    var href = $(control).attr("href");
    var uniqueIds = getSearchResultSelectedUniqueIds(searchResultTable);
    var uniqueIdsUrl = encodeURIComponent(uniqueIds.join());

    setPreventDefault(event);

    if (uniqueIds.length === 0) {
        document.location = href;
    } else {
        document.location = href + "&uniqueIds=" + uniqueIdsUrl;
    }
}

function onSearchResultTableMenuSelect(searchResultTable, control, event) {
    var href = control.options[control.selectedIndex].value;
    var uniqueIds = getSearchResultSelectedUniqueIds(searchResultTable);
    var uniqueIdsUrl = encodeURIComponent(uniqueIds.join());

    setPreventDefault(event);
    document.location = href + "&uniqueIds=" + uniqueIdsUrl;
}

function toggleSearchResultRowEllipsis(control) {
    $(control).find(".search-result-ellipsis-cell").toggleClass("search-result-noellipsis-cell");
}

function toggleSearchResultCellEllipsis(control) {
    $(control).toggleClass("search-result-noellipsis-cell");
}

function toggleSearchResultParentRowEllipsis(control, event) {
    if ($(control).hasClass("search-result-row")) {
        $(control).find(".search-result-ellipsis-cell").toggleClass("search-result-noellipsis-cell");
    } else {
        $(control).closest(".search-result-row").find(".search-result-ellipsis-cell").toggleClass("search-result-noellipsis-cell");
    }

    stopEvent(event);
}

function openXmlData(control, event) {
    if ($(control).length > 0) {
        var data = $(control)[0].attributes["data"].value;
        saveTextAs(data, "download.xml");
    }

    stopEvent(event);
}

function resendToEis(control, attemptId) {
    var par = $(control).parent();
    par.empty();
    var loadingPane = $('<div style="visibility: visible;" class="loading-image-small"></div>');
    loadingPane.appendTo(par);

    var getUrl = window.location;
    var baseUrl = getUrl.protocol + "//" + getUrl.host + "/" + getUrl.pathname.split('/')[1];
    baseUrl += '/ContextAction/ReSendToEISHandler?attemptsId=' + attemptId;

    $.ajax({
        url: baseUrl,
        type: 'POST',
        contentType: false,
        cache: false,
        processData: false,
        timeout: 60 * 60 * 1000
    }).then(function (res) {
        var parsedRes = JSON.parse(res);
        if (parsedRes.status == 'OK') {
            alert('Повторная отправка в ЕИС прошло успешно');
        } else {
            alert('Ошибка приповторной отправке в ЕИС ' + parsedRes.message);
        }
        window.location.reload();
    });
}

function toggleRoutesViewCollapse(control, event) {
    setPreventDefault(event);
    stopEvent(event);

    var item = $(control);
    var processRow = item.closest(".routesView-process-row");

    var activityRow;
    if (processRow.hasClass("routesView-collapsed")) {
        activityRow = processRow.next();
        while (activityRow.length && activityRow.hasClass("routesView-activity-row")) {
            activityRow.removeClass("routesView-collapsed");
            activityRow = activityRow.next();
        }

        processRow.removeClass("routesView-collapsed");
    } else {
        activityRow = processRow.next();
        while (activityRow.length && activityRow.hasClass("routesView-activity-row")) {
            activityRow.addClass("routesView-collapsed");
            activityRow = activityRow.next();
        }

        processRow.addClass("routesView-collapsed");
    }
}

function openActionUrlAsModal(dialog, url, openResultOnBlankPage, preAjaxSubmitFunction, useDefaultSubmit) {

    var modal = $(dialog);
    var modalBody = modal.find(".modal-body-wrapper");
    var pageUrl = appendUrlArgument(url, "rand", getTimeStamp());

    modalBody.load(pageUrl + " .context-action-page-body", function () {
        if (!$(this).html()) {
            var errorUrl = $(this).attr('data-empty-body-error-url');
            if (errorUrl) {
                document.location = errorUrl;
                return;
            }

            var errorMessage = $(this).attr('data-empty-body-error-message');
            if (errorMessage) {
                var errorPanel = $("<div class='alert alert-danger'></div>");
                errorPanel.text(errorMessage);
                var errorBody = $("<div class='modal-body'></div>");
                errorBody.append(errorPanel);
                $(this).append(errorBody);

                var closeClickHandler = function (event) {
                    setPreventDefault(event);
                    modal.modal('hide');
                };

                modal.find(".btn-submit").click(closeClickHandler);
                modal.on('hidden.bs.modal', function () {
                    modal.find(".btn-submit").unbind("click", closeClickHandler);
                });

                modal.modal('show');
                return;
            }
        }

        resetDictionaryFields();
        modal.find(".action-page-scripts .action-page-script").each(function (index, item) {
            var scriptUrl = $(item).attr("data-url");
            $.getScript(scriptUrl);
        });

        reinitialiseScripts();
        modal.find(".action-page-buttons").hide();

        var form = modal.find(".action-form");

        var _hasParsleyValidation;
        //Свойство показывает есть ли у формы, parsley валидация
        var hasParsleyValidation = function () {

            if (_hasParsleyValidation == null)
                _hasParsleyValidation = form.hasClass("parsley-validation");

            return _hasParsleyValidation;
        }

        //Обработчик клика на кнопку submit формы
        var clickHandler = function (event) {
            setPreventDefault(event);

            //Если есть parsley валидация то прежде чем отправлять форму на сервер, проверяем что валидация пройдена
            if (hasParsleyValidation()) {
                var formValidator = form.parsley();
                formValidator.whenValidate().done(submitDocument);
                return false;
            }


            submitDocument();

            function submitDocument() {
                if (!openResultOnBlankPage) {
                    if ($('[name="isSignEDS"]').is(':checked')) {
                        if ($('[name="certificateList"]').find("input:checked").val() == undefined) {
                            $('[name="signInfo"]').html("<FONT color='red'>Выберите сертификат для создания подписи</FONT>");
                        }
                        else {
                            if ($('#signAttachments').is(':checked')) {
                                EDS.SignDocumentWithAtachments(
                                    function () {
                                        form.attr("target", "_blank");
                                        modal.find("button[data-dismiss='modal']").click();
                                    });
                            }
                            else {
                                var isSignAllAttachment = $('[data-name="isSignAllAttachment"]').val();
                                if (isSignAllAttachment) {
                                    EDS.SignAttachments(
                                        function () {
                                            form.attr("target", "_blank");
                                            modal.find("button[data-dismiss='modal']").click();
                                        });
                                }
                                else {
                                    var isAttachEDS = $('[name="isAttachEDS"]').is(':checked');
                                    if (isAttachEDS) {
                                        EDS.SignCreate(function () {
                                            form.attr("target", "_blank");
                                            modal.find("button[data-dismiss='modal']").click();
                                        });
                                    }
                                    else {
                                        EDS.SignCreate(function () {
                                            var isApproval = $("[data-name='activitySignature']").val();
                                            if (isApproval !== undefined) {
                                                form.find("[type='submit']").click();
                                            } else {
                                                form.attr("target", "_blank");
                                                modal.find("button[data-dismiss='modal']").click();
                                            }
                                        });
                                    }
                                }
                            }
                        }

                    }
                    else {
                        form.find("[type='submit']").click();
                    }
                }
                else {
                    form.attr("target", "_blank");
                    modal.find("button[data-dismiss='modal']").click();
                    form.find("[type='submit']").click();
                }
            }
        };

        modal.find(".btn-submit").prop('disabled', false); // Mozilla Fix
        modal.find(".btn-submit").click(clickHandler);
        modal.on('hidden.bs.modal', function () {
            modal.find(".btn-submit").unbind("click", clickHandler);
            modal.find(".modal-dialog").removeClass("modal-large");
            modal.find(".modal-dialog").removeClass("modal-medium");
        });

        var loadingImage = modal.find(".modal-footer .loading-image");
        var operationStart = function () {
            form.find("[type='submit']").prop('disabled', true);
            modal.find(".btn-submit").prop('disabled', true);

            loadingImage.each(function () {
                showLoadingIndicator($(this).get(0));
            });
        };
        var operationFinish = function () {
            form.find("[type='submit']").prop('disabled', false);
            modal.find(".btn-submit").prop('disabled', false);

            loadingImage.each(function () {
                hideLoadingIndicator($(this).get(0));
            });
        };

        //прячет/показывает разде div html-разметки
        function ChangeVisibility(divId) {
            var x = document.getElementById(divId);
            if (x.style.display === 'none') {
                x.style.display = 'block';
            } else {
                x.style.display = 'none';
            }
        }

        var operationSuccessFinish = function () {
            ChangeVisibility('div-context-submit');
            ChangeVisibility('div-context-modal');
            ChangeVisibility('send-to-eis-question');

            loadingImage.each(function () {
                hideLoadingIndicator($(this).get(0));
            });
        };

        var submitHandler;
        var formDomObject = form.get(0);
        var formDomObjectAddHandler = function () {
            $(formDomObject).bind("submit", submitHandler);
        };
        var formDomObjectRemoveHandler = function () {
            $(formDomObject).unbind("submit", submitHandler);
        };

        submitHandler = function (event) {

            if (useDefaultSubmit)
                return;

            setPreventDefault(event);
            operationStart();

            formDomObjectRemoveHandler();
            if (typeof preAjaxSubmitFunction != 'undefined') {
                preAjaxSubmitFunction();
            }
            //$("input[hidden][data-parent-name]").remove(); включить для очистки формы от фантомных записей         
            ajaxFormSubmit(
                formDomObject,
                function (data) {
                    if (data) {
                        var successMessage = modal.find(".success-message");
                        successMessage.text(data);
                        successMessage.removeClass("hide");

                        formDomObjectAddHandler();
                        operationSuccessFinish();
                    } else {
                        var returnUrl = $(formDomObject).find("input[name='returnUrl']").val();
                        if (returnUrl)
                            window.location = returnUrl;
                        else
                            window.location.reload();
                    }
                },
                function (data) {
                    var errorMessage = modal.find(".error-message");
                    errorMessage.text(data.responseText);
                    errorMessage.removeClass("hide");

                    formDomObjectAddHandler();
                    operationFinish();
                });
        };

        if (!openResultOnBlankPage)
            formDomObjectAddHandler();

        // событие загрузки модального окна
        var onModalWindowLoadedParamsObj = {
            validatedFormSelector: ".action-form",
            innerTableContainer: modal
        };
        $(document).trigger('onDocumentModalWindowLoaded', onModalWindowLoadedParamsObj);

        modal.modal('show');
    });
}

function handleLinkActionAndDisable(control, dialog, event) {
    $("#btn-ok_from_modal").unbind("click");

    function disableButton() {
        $(control).attr("style", "display:none");
    }

    var link = $(control);
    var url = link.attr("href");
    var openResultOnBlankPage = link.attr("target") == "_blank";

    setPreventDefault(event);

    ModalHelper({
        dialog: dialog,
        url: url,
        isTargetBlank: openResultOnBlankPage,
        beforeSubmit: disableButton,
        useDefaultSubmit: undefined
    }).openWindow();
}

function handleDynamicLinkAction(control, dialog, event, preprocessorFunction, param) {
    if (preprocessorFunction) preprocessorFunction(control, dialog, event, param);
}

function handleLinkAction(control, dialog, event, beforeSubmit, afterSubmit, keepScripts) {
    $("#btn-ok_from_modal").unbind("click");
    console.log("handleLinkAction1");
    var link = $(control);
    var url = link.attr("href");
    var openResultOnBlankPage = link.attr("target") == "_blank";
    var useDefaultSubmit = link.attr("data-useDefaultSubmit") == "true";
    var dontSubmit = link.attr("dontSubmit") == "true";

    var beforeHandler = function (e, form) {
        //запоминаем текущую вкладку
        saveCurrentHash();

        if (beforeSubmit)
            return beforeSubmit(e, form);
    }


    setPreventDefault(event);

    ModalHelper({
        dialog: dialog,
        url: url,
        isTargetBlank: openResultOnBlankPage,
        beforeSubmit: beforeHandler,
        afterSubmit: afterSubmit,
        control: control,
        event: event,
        useDefaultSubmit: useDefaultSubmit,
        dontSubmit: dontSubmit,
        keepScripts: keepScripts
    }).openWindow();

    //openActionUrlAsModal(dialog, url, openResultOnBlankPage, undefined, useDefaultSubmit);
}

function saveCurrentHash(hash) {
    var name = decodeURIComponent(window.location.pathname);
    var value = window.location.hash;
    updateSessionStorage(name, value);
}

function getSavedHash() {
    var name = decodeURIComponent(window.location.pathname);
    return getFromSessionStorage(name);
}

function removeSavedHash() {
    var name = decodeURIComponent(window.location.pathname);
    return removeFromSessionStorage(name);
}

function removeFromSessionStorage(name) {
    if (!sessionStorage || !name)
        return;
    return sessionStorage.removeItem(name);
}

function updateSessionStorage(name, value) {
    if (!sessionStorage)
        return;

    sessionStorage.setItem(name, value);
}

function getFromSessionStorage(name) {
    if (!sessionStorage || !name)
        return;
    return sessionStorage.getItem(name);
}

//cookies helper
function readCookie(name) {
    var nameEQ = name + "=",
        ca = document.cookie.split(';'),
        i = 0,
        c = '';
    for (i; i < ca.length; i += 1) {
        c = ca[i];
        while (c.charAt(0) === ' ') {
            c = c.substring(1, c.length);
        }
        if (c.indexOf(nameEQ) === 0) {
            return c.substring(nameEQ.length, c.length);
        }
    }
    return null;
}

function createCookie(name, value, days) {
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        var expires = "; expires=" + date.toGMTString();
    }
    else var expires = "";

    document.cookie = name + "=" + value + expires + "; path=/";
}

function createCookieMinutes(name, value, minutes) {
    if (minutes) {
        var date = new Date();
        date.setTime(date.getTime() + (minutes * 60 * 1000));
        var expires = "; expires=" + date.toGMTString();
    }
    else var expires = "";

    document.cookie = name + "=" + value + expires + "; path=/";
}

function deleteCookie(name) {
    var date = new Date();
    date.setTime(date.getTime() + (-1 * 24 * 60 * 60 * 1000));
    var expires = "; expires=" + date.toGMTString();
    document.cookie = name + '="" ;' + expires + '; path=/';
}

//можно ли создать план. если нельзя - возвращает текст ошибки
function checkCreatePlanPossible(event, form) {
    return checkOpenFormPossible(event, form);
}

function checkOpenFormPossible(event, form) {
    var deferred = jQuery.Deferred();

    var formObj = $(form);
    var actionUrl = formObj.attr("action");

    $.ajax({
        url: actionUrl,
        async: true,
        data: formObj.serialize(),
        contentType: false,
        cache: false,
        processData: false
    }).done(function (xhr, textStatus, data) {
        var resultErrors;
        try {
            var res = JSON.parse(xhr);
            if (res && res.status === "ERROR") {
                resultErrors = res.responseMessage;
            }
        } catch (e) {
            //если не получилось распарсить json, сичтаем что все ок и ошибки не было
        }

        deferred.resolve(resultErrors);
    });

    return deferred;
}

//При переходе по ссылке добавляет якорь текущего активного таба (например, требуется при редактировании переходить на такой же таб, как и при просмотре)
function appendActiveTabAnchorToLink(control, linkHashPrefix, event) {
    //определяем id блока текущего выделенного элемента
    var blockId = $("#viewNavigationTabs").find('li.active').find('a').data("block-id");

    if (blockId) {
        //Если определили id блока - перенаправляем вручную на страницу с якорем
        event.preventDefault();
        window.location.href = $(control).attr("href") + linkHashPrefix + blockId;
    } else {
        window.location.href = $(control).attr("href");
    }
}

function refreshSearchResult(control, event) {
    if ($('#' + control).data('dxDataGrid')) {
        dxGridReloadData(control);
    } else {
        var currentPageUrl = $(".current.navigation-item").data("url");
        if (currentPageUrl) searchResultLoad(control, currentPageUrl);
    }
}

function searchResultSort(control, event) {
    setPreventDefault(event);
    var url = $(control).parent("div").find(".sortUrl").val();
    if (!(control.dataset.sorttype === "AZ" && $(control).hasClass("search-result-header-asc"))) {
        var urlSym = url.indexOf('?') > -1 ? '&' : '?';
        url = url + urlSym + "sortKey=" + encodeURIComponent(control.dataset.fieldkey) + "&sort=" + control.dataset.sorttype;
    }

    searchResultLoad(control, url);
}

function searchResultNavigate(control, event) {
    setPreventDefault(event);
    var url = $(control).attr('href');
    searchResultLoad(control, url);
}

function searchResultLoad(control, url) {
    url = url + "&r=" + Math.random() * 99999;
    var navigation = $(control).closest('.search-result-navigation');
    if (navigation.hasClass('loading'))
        return;
    var searchResult = $(control).closest('.search-result');
    if (searchResult.length > 0) {

        navigation.addClass('loading');
        waitingDialog.show('Поиск');
        var selectedItemsString = $(control).closest(".search-result").find(".search-result-selected").val();
        var selectedItemsArray = selectedItemsString ? selectedItemsString.split(',') : [];

        /*n.volosatov: поиск с get'а на пост. берем сохраненные данные формы и передаем в метод load, 
        если значения будут то load сделает пост + обрезаем урл до queryString'a и добавлем страницу в пост дату
        */
        var formdata = $("#hfSearchFormData").val() ? JSON.parse($("#hfSearchFormData").val()) : null;
        if (formdata) {
            var page = getQueryStringParameterByName("page", url);
            if (page) {
                formdata.push({
                    "name": "page",
                    "value": page
                });
            }
            //url = url.split("?")[0];
        }
        /*end*/

        searchResult.load(url + " .search-result", formdata,
            function () {
                var selectedItemsDiv = searchResult.find(".search-result-selected");
                selectedItemsDiv.val(selectedItemsString);
                var searchResultRows = $(".search-result-table > div.search-result-row");
                $.each(searchResultRows,
                    function (index, row) {
                        var rowCheckBox = $(row).find(".search-result-selector-checkbox");
                        var docId = $(row).attr("data-itemuniqueid");
                        if (selectedItemsArray.indexOf(docId) !== -1) {
                            rowCheckBox.attr("checked", true);
                        }
                    });
                waitingDialog.hide();
                navigation.removeClass('loading');
                reinitialiseScripts();
            });
    }
}

function getSelectedSearchResultIds(searchResultTable) {
    var selectedItemsDiv = $(searchResultTable).find(".search-result-selected");
    return selectedItemsDiv.val().split(',');
}

//функция для блокировки при взятии на редактирование

function editButtonCustomLogicPreprocessorFunction(control, dialog, event, param) {

    var overrideLockHandler = function () {
        $.post(param.TryToForceUnLockUrl, { documentKey: param.DocumentKey }, function (data) {
            if (data && data.success) {
                editButtonCustomLogicPreprocessorFunction(control, dialog, event, param);
            }
        });
    };
    event.preventDefault();

    //Не даем пользователю случайно сделать несколько кликов подряд.
    if (!ct.common.delayPassed(control, 6))
        return;

    $.post(param.TryToLockUrl, { documentKey: param.DocumentKey }, function (data) {
        if (data && data.success) {
            appendActiveTabAnchorToLink(control, '#regcard-', event);
        } else { //id dfadmin
            if (param.CanOverrideEditLock) {
                ModalHelper({
                    dialog: dialog,
                    url: param.FailToLockWithOverrideUrl,
                    isTargetBlank: false,
                    beforeSubmit: overrideLockHandler,
                    control: control,
                    event: event,
                    useDefaultSubmit: false,
                    dontSubmit: true,
                }).openWindow();
            } else { //normal user
                ModalHelper({
                    dialog: '#modalInfo',
                    url: param.FailToLockUrl,
                    isTargetBlank: false,
                    beforeSubmit: null,
                    control: control,
                    event: event,
                    useDefaultSubmit: false,
                    dontSubmit: true,
                }).openWindow();
            }
        }
    });
}


/* Mobile */

function bootstrapForceCollapse(control) {
    var item = $(control);

    var headerLink = item.find('.panel-heading a[data-toggle=collapse]');
    var bodyBlock = item.find('.panel-collapse');

    if (headerLink.length)
        headerLink.addClass('collapsed');

    if (bodyBlock.length) {
        bodyBlock.removeClass('in');
        bodyBlock.css('height', '0px');
    }
}

function setMobileDefaults() {
    var xsMaxWidth = 767;
    var width = $(window).width();

    if (width <= xsMaxWidth) {
        bootstrapForceCollapse('#documentView-controlCard-accordion');
        bootstrapForceCollapse('#documentView-documentLinks-accordion');
        bootstrapForceCollapse('#documentView-attachments-accordion');

        var anchor = getUrlAnchor();
        if (anchor.indexOf('activity-') != 0)
            bootstrapForceCollapse('#documentView-routes-accordion');

        bootstrapForceCollapse('#registerView-controlCard-accordion');
        bootstrapForceCollapse('#registerView-documentLinks-accordion');
        bootstrapForceCollapse('#registerView-attachments-accordion');
    }
}

function reinitialiseMobileSettings() {
    var smMaxWidth = 991;
    var width = $(window).width();

    if (width <= smMaxWidth) {
        $('input[type="file"][multiple]').prop('multiple', false);
    }
}

setMobileDefaults();

/* Scripts */

function setReadOnlyWithCheckbox() {
    $("input[type='checkbox'][readonly]").readonly();
    $("select.bool-sel-ctl[readonly]").readonly();
    $("select.bool-sel-ctl[readonly]").addClass('readonly-field');
}

function onSelectBoolChange() {
    var item = $(this);
    var checked = item.is(':checked');
    if (checked) {
        item.next().val('1');
    } else {
        item.next().val('0');
    }
}

function onSelectTableChange() {
    var item = $(this);
    var checked = item.is(':checked');
    if (checked) {
        item.closest(".table-content").find(".selector-all-row").prop("checked", true);;
    } else {
        item.closest(".table-content").find(".selector-all-row").prop("checked", false);;
    }
}

function setEnabledWithRadios() {
    $(".enabled-with-radio").each(function () {
        var item = $(this);
        var radioId = item.attr("data-radio");
        var radio = $("#" + radioId);
        var disabled = !radio.is(':checked');

        item.prop("disabled", disabled);

        var isRequired = item.attr("data-required");
        var isRequiredValue = isRequired && (isRequired.toLowerCase() == "true" || isRequired.toLowerCase() == "required");
        if (isRequiredValue)
            item.prop("required", !disabled);

        $(this).find("input, select, textarea").each(function () {
            var childItem = $(this);
            childItem.prop("disabled", disabled);
            if (isRequiredValue)
                childItem.prop("required", !disabled);
        });
    });
}

function setEnabledWithSelect() {
    $(".enabled-with-select").each(function () {
        var item = $(this);
        var selectId = item.attr("data-select");
        var selectValues = item.attr("data-select-value").split(',');
        var select = $("#" + selectId);
        var value = select.val();

        var disabled = true;
        for (var i = 0; i < selectValues.length; i++) {
            if ($.trim(selectValues[i]) == value) {
                disabled = false;
                break;
            }
        }

        item.prop("disabled", disabled);

        var isRequired = item.attr("data-required");
        var isRequiredValue = isRequired && (isRequired.toLowerCase() == "true" || isRequired.toLowerCase() == "required");
        if (isRequiredValue)
            item.prop("required", !disabled);

        $(this).find("input, select, textarea").each(function () {
            var childItem = $(this);
            childItem.prop("disabled", disabled);
            if (isRequiredValue)
                childItem.prop("required", !disabled);
        });
    });
}

function setVisibleWithSelect() {
    var hidden = true;

    function checkVisibility(item) {
        var selectId = item.attr("data-select");
        var selectValues = item.attr("data-select-value").split(',');
        var select = $("#" + selectId);
        var value = select.val();

        for (var i = 0; i < selectValues.length; i++) {
            if ($.trim(selectValues[i]) == value) {
                hidden = false;
                break;
            }
            hidden = true;
        }
    }

    $(".visible-with-select").each(function () {
        var item = $(this);
        if (!item.attr("data-select-value")) {
            // надо определить видимость блока
            var itemInBlock = item.find("[data-select-value]").first();
            checkVisibility(itemInBlock);
        } else {
            checkVisibility(item);
        }

        if (!hidden)
            item.removeClass("js-hidden");
        else
            item.addClass("js-hidden");
    });
}

function setRequiredWithRadios() {
    $(".required-with-radio").each(function () {
        var item = $(this);
        var radioSelector = item.attr("data-radio-selector");

        var isRequired = false;
        $(radioSelector).each(function () {
            if ($(this).is(':checked'))
                isRequired = true;
        });

        item.prop("required", isRequired);
        item.removeClass('user-error');

        $(this).find("input, select, textarea").each(function () {
            var childItem = $(this);
            childItem.prop("required", isRequired);
            childItem.removeClass('user-error');
        });
    });
}

function cloneJObject(obj) {
    var clone = obj.clone(false);

    var sourceElements = obj.find('input, select, textarea');
    var clonedElements = clone.find('input, select, textarea');
    clonedElements.each(function (index) {
        var sourceElement = $(sourceElements.get(index));

        var inputType = sourceElement.attr('type');
        if (sourceElement.get(0).tagName != 'INPUT' || inputType != 'file')
            $(this).val(sourceElement.val());
    });

    return clone;
}

function activateMultipleEditors() {
    $(".multiple-editor:not(.inited)").each(function () {
        var editor = $(this);

        var appendButton = $('<div class="multiple-editor-append btn btn-default btn-sm glyphicon glyphicon-plus"></div>');
        appendButton.insertAfter(editor);

        var buttonParent = appendButton.parent();
        if (!buttonParent.hasClass('clearfix'))
            buttonParent.addClass('clearfix');

        var input = editor.find("input, select, textarea");
        input.attr('data-required', input.prop('required'));

        editor.toggleClass('empty', !input.val());
        editor.addClass("inited");
    });
}

function multipleEditorAppend() {
    var item = $(this);
    var itemWrapper = item.prev();

    var input = itemWrapper.find("input, select, textarea");
    var inputVal = $.trim(input.val());
    if (!inputVal)
        return;

    var existValues = [];

    var editorList = null;
    editorList = itemWrapper.nextAll('.multiple-editor-list');

    if (editorList.length === 0) {
        editorList = $("<ul class='multiple-editor-list'></ul>").insertAfter(item);
    }

    editorList.children().each(function () {
        $(this).children('input[type="hidden"]').each(function () {
            existValues.push($(this).val());
        });
    });

    if (existValues.indexOf(inputVal) >= 0)
        return;

    var listItem = $("<li></li>");

    var hiddenField = $("<input type='hidden'>");
    hiddenField.attr('name', input.attr('name'));
    hiddenField.val(inputVal);
    hiddenField.appendTo(listItem);

    var textField = $("<span></span>");
    if (input.get(0).tagName == 'SELECT')
        textField.text(input.children(':selected').text());
    else
        textField.text(inputVal);

    textField.appendTo(listItem);

    var removeItem = $('<div class="multiple-editor-remove glyphicon glyphicon-remove-circle"></div>');
    removeItem.appendTo(listItem);

    listItem.appendTo(editorList);

    input.prop('required', false);
    input.closest('.multiple-editor').toggleClass('empty', false);
    input.val('');
}

function multipleEditorRemove() {
    var removeItem = $(this);
    var listItem = removeItem.closest('.multiple-editor-list li');
    var editorList = removeItem.closest('.multiple-editor-list');
    var editor = editorList.parent();
    listItem.remove();

    var displayField = editor.find(".mult-dict-display");
    var displayName = editor.
        find('input[data-name="name"]').
        map(function () {
            return $(this).val();
        }).
        get().
        join(", ");
    displayField.val(displayName);
}

function activateCollapseButtons() {
    $(".collapse-button").each(function () {
        var item = $(this);
        if (item.hasClass('collapse-button-inited'))
            return;

        if (!item.hasClass('glyphicon'))
            item.addClass('glyphicon');

        //item.live('click', function (event) {
        item.on('click', function (event) {
            setPreventDefault(event);
            stopEvent(event);

            item.toggleClass('collapse-button-collapsed');
            setCollapseButton(this);
        });

        setCollapseButton(this);
        item.addClass('collapse-button-inited');
    });
}

function onFileEditorAppendFiles(editor, files) {
    var item = $(editor);
    var maxFileSize = item.attr('data-maxFileSize');
    var errorSelector = item.attr('data-errorSelector');
    var errorMessage = item.attr('data-errorMessage');

    if (!window.FileReader)
        return;

    if (!$(errorSelector).hasClass('hide'))
        $(errorSelector).addClass('hide');

    var filteredFiles = [];
    var isOverflow = false;

    for (var sourceIndex = 0; sourceIndex < files.length; sourceIndex++) {
        var sourceFile = files[sourceIndex];
        if (maxFileSize > 0 && sourceFile.size > maxFileSize)
            isOverflow = true;
        else
            filteredFiles.push(sourceFile);
    }

    var showOverflowError = function () {
        if (!isOverflow)
            return;

        $(errorSelector).html(errorMessage);
        $(errorSelector).removeClass('hide');
    };

    if (!filteredFiles.length) {
        item.val('');
        showOverflowError();
        return;
    }

    if (!isAjaxFileStorageSupported())
        return;

    var form = item.closest('form').get(0);
    var name = item.attr('data-name');
    var list = item.parent().find('.file-drop-area-list');
    var newDoc = window.location.pathname.toLowerCase().indexOf("/BasedOn".toLowerCase()) !== -1;
    var isDialog = (newDoc && !$("#" + name).is(":visible")) ||
        (!newDoc && window.addTableRowAttachmentWasClicked);

    for (var filteredIndex = 0; filteredIndex < filteredFiles.length; filteredIndex++) {

        if (isDialog && filteredIndex > 0)
            break;

        if (!item.prop('multiple')) {
            var ajaxFileKeys = [];
            list.find('.file-drop-area-remove-icon').each(function () { ajaxFileKeys.push($(this).attr("data-ajaxFileKey")); });
            list.empty();

            for (var index = 0; index < ajaxFileKeys.length; index++) {
                removeAjaxFile(form, ajaxFileKeys[index]);
            }
        }

        var filteredFile = filteredFiles[filteredIndex];


        //n.volosatov        
        if (typeof UploadAttachment !== "undefined" && $(".modal-title:visible:contains('Создать версию')").length == 0) {
            var ajaxFileKey = appendAjaxFile(form, name, filteredFile);

            if (isDialog && typeof window.files !== 'undefined') {
                window.files = files[0].name;
            }

            UploadAttachment.addFile(item, ajaxFileKey, filteredFile.name);

            //в задачке EUPDEV-2913 сказано, что если док новы и диалоговое окно - ничего закрывать автоматом не надо
            //if (isDialog && newDoc) {
            //    $("#actionDialog").modal('hide');
            //    addRowAttachment();
            //}

        } else {

            var ajaxFileKey = appendAjaxFile(form, name, filteredFile);
            var listItem = $("<li></li>");

            var fileNameItem = $("<span class='file-drop-area-file-name'></span>");
            fileNameItem.text(filteredFile.name);
            listItem.append(fileNameItem);

            var removeItem = $('<div class="glyphicon glyphicon-remove-circle file-drop-area-remove-icon"></div>');
            removeItem.attr("data-ajaxFileKey", ajaxFileKey);

            removeItem.click(function (event) {
                setPreventDefault(event);
                stopEvent(event);

                var key = $(this).attr("data-ajaxFileKey");
                var itemForm = item.closest('form').get(0);
                removeAjaxFile(itemForm, key);
                $(this).closest('li').remove();

                var inputItem = $(itemForm).find("input[type='file']");
                var isEmpty = !getAjaxFiles(itemForm).length;
                inputItem.prop('required', inputItem.attr('data-required').toLowerCase() == 'true' && isEmpty);
                inputItem.closest('.file-drop-area').toggleClass('empty', isEmpty);
            });

            listItem.append(removeItem);
            list.append(listItem);
        }
    }

    // вызываем только 1 раз после добавления всех выбранных файлов
    $(form).trigger("onAppendAjaxFiles");

    var isDropAreaEmpty = !getAjaxFiles(form).length;
    item.prop('required', item.attr('data-required').toLowerCase() == 'true' && isDropAreaEmpty);
    item.closest('.file-drop-area').toggleClass('empty', isDropAreaEmpty);
    item.val('');
    showOverflowError();
}

function onFileEditorChange(event) {
    onFileEditorAppendFiles(this, event.target.files);
}

function onFileDropAreaDrop(control, event) {
    setPreventDefault(event);
    stopEvent(event);

    var editor = $(control).find("input[type='file']").get(0);
    onFileEditorAppendFiles(editor, event.dataTransfer.files);
}

function activateAjaxFileEditors() {
    if (!isAjaxFileStorageSupported())
        return;

    $('body').off('change', 'input[type="file"]');
    $("body").on('change', 'input[type="file"]', onFileEditorChange);

    var onDropAreaClick = function () {
        var dropArea = $(this).closest('.file-drop-area');
        var input = dropArea.find("input[type='file']");
        input.click();
    };

    $(".file-drop-area:not(.inited)").each(function () {
        var dropArea = $(this);

        if (dropArea.closest(".table-row-template").length > 0)
            return;

        var input = dropArea.find("input[type='file']");
        var id = input.attr('id');
        input.attr('id', '');
        dropArea.attr('id', id);
        input.attr('data-name', input.attr('name'));
        input.attr('name', 'file-drop-area-hidden-' + input.attr('name'));
        input.attr('data-required', input.prop('required'));

        input.click(stopEvent);
        dropArea.find('.file-drop-area-title').click(onDropAreaClick);

        if (window.FileReader) {
            var areaControl = dropArea.get(0);

            areaControl.ondragover = function () {
                $(this).toggleClass('hover', true);
                return false;
            };

            areaControl.ondragleave = function () {
                $(this).toggleClass('hover', false);
                return false;
            };

            areaControl.ondrop = function (event) {
                $(this).toggleClass('hover', false);
                onFileDropAreaDrop(this, event);
            };
        }

        dropArea.toggleClass('empty', true);
        dropArea.addClass("inited");
    });
}

function activateDataListIcons() {
    $('[list], [data-wslist]').each(function () {
        var item = $(this);
        var parent = item.parent();
        if (parent.hasClass('ui-wrapper'))
            return;

        item.wrap("<div></div>");
        parent = item.parent();
        parent.addClass('ui-wrapper');

        var tool = $("<div></div>");
        tool.addClass('ui-tool-button');
        tool.addClass('ui-tool-dropdown');
        tool.prependTo(parent);
    });
}

function setCollapseButton(control) {
    var item = $(control);
    var selector = item.attr('data-collapse-selector');

    if (item.hasClass('collapse-button-collapsed')) {
        item.addClass('glyphicon-plus');
        item.removeClass('glyphicon-minus');
        $(selector).addClass('js-hidden');
    } else {
        item.removeClass('glyphicon-plus');
        item.addClass('glyphicon-minus');
        $(selector).removeClass('js-hidden');
    }
}

function resetDictionaryFields() {
    var dictionaryControls = $(".form-dictionary-control");
    dictionaryControls.each(function () {
        var item = $(this);
        if (item.attr("data-dictionaryparent") == "")
            setDictionaryField(item);
    });
}

function setDictionaryField(item) {
    var selectedDictItem;
    var childDictControls = $(".form-dictionary-control[data-dictionaryparent='" + item.attr('name') + "']");

    if (childDictControls.length > 0) {
        if (item.is('select')) {
            selectedDictItem = item.find(":selected")[0];
        } else if (item.is('input')) {
            var datalist = $("datalist[id='" + item.attr('list') + "']");
            selectedDictItem = datalist.find("option[value='" + item.val() + "']")[0];
        }

        childDictControls.each(function () {
            var child = $(this);
            if (child.is('select')) {
                var dataEntryParent = $(selectedDictItem).attr('data-entryid');
                child.find("option").each(function () {
                    var option = $(this);
                    var parentEntryAttr = option.attr("data-entryparent");
                    if (parentEntryAttr == null || parentEntryAttr == false) {
                        option.toggleOption(true);
                    } else if (parentEntryAttr == dataEntryParent) {
                        option.toggleOption(true);
                    } else {
                        option.toggleOption(false);
                    }
                });
            } else if (child.is('input')) {
                child.removeAttr('list');
                child.attr('list', $(selectedDictItem).attr('data-entryid'));
            }
            child.change();
        });

        reinitialiseScripts();
    }

    //n.volosatov - хак для возможности писать новые значения в поле словаря при редактирование атачмента
    if (item.parents(".modal").length > 0) {
        var currentValue = item.val();
        var autocompleteElementID = item.attr("list");
        if (autocompleteElementID) {
            var autocompleteElement = $("#" + autocompleteElementID);
            var hasValue = false;
            $.each(autocompleteElement.children(), function (i, element) {
                hasValue = currentValue === $(element).val();
                if (hasValue)
                    return false;
            });
            if (!hasValue) {
                var random = Math.floor((Math.random() * 9999999) + 1000000);
                var entryId = autocompleteElementID + "-" + random;
                var optionsStr = "<option data-entrykey='" + currentValue + "' data-entryid='" + entryId + "' data-entryparent='" + autocompleteElementID + "' value='" + currentValue + "'>" + currentValue + "</option>";
                var newOption = $(optionsStr);
                autocompleteElement.append(newOption);
            }
        }
    }
}

jQuery.fn.toggleOption = function (show) {
    jQuery(this).toggle(show);
    if (show) {
        if (jQuery(this).parent('span.toggleOption').length)
            jQuery(this).unwrap();
    } else {
        if (jQuery(this).parent('span.toggleOption').length == 0)
            jQuery(this).wrap('<span class="toggleOption" style="display: none;" />');
    }
};

function onFormDictionaryControlChange() {
    var item = $(this);

    setDictionaryField(item);

    var dictionaryGroup = item.attr('data-dictionaryGroup');
    if (!dictionaryGroup)
        return;

    if (item.hasClass('form-dictionary-control-changing'))
        return;

    item.addClass('form-dictionary-control-changing');

    var selectedOption;
    if (item.is("select")) {
        selectedOption = item.children('option[value="' + item.val() + '"]');
    } else {
        var datalistId = item.attr("list");
        selectedOption = $("#" + datalistId).find('option[value="' + item.val() + '"]');
    }
    var selectedEntryKey = selectedOption.attr('data-entryKey');

    var groupDictionaries = $('.form-dictionary-control[data-dictionaryGroup="' + dictionaryGroup + '"]');
    groupDictionaries.each(function () {
        var groupDictionary = $(this);
        if (groupDictionary.hasClass('form-dictionary-control-changing'))
            return;

        var groupDictionarySelectedOption;
        if (groupDictionary.is("select")) {
            groupDictionarySelectedOption = groupDictionary.children('option[data-entryKey="' + selectedEntryKey + '"]');
        } else {
            var listId = groupDictionary.attr("list");
            groupDictionarySelectedOption = $("#" + listId).find('option[data-entryKey="' + selectedEntryKey + '"]');
        }
        //var groupDictionarySelectedOption = groupDictionary.find('option[data-entryKey="' + selectedEntryKey + '"]');
        var value = groupDictionarySelectedOption.attr('value');
        groupDictionary.val(value);
    });

    item.removeClass('form-dictionary-control-changing');
}

function wrapUrls() {
    var urlPattern = /((http(s)?:\/\/)(www\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256}(\.[a-z]{2,6})?)\b([-a-zA-Z0-9@:%_\+.~#?&//=]*))/g;
    var wrappedLinkPattern = /((<a href.+)(http(s)?:\/\/)(www\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256}(\.[a-z]{2,6})?)\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)<\/a>)/g;

    $('.documentView').find('.documentView-field-value, .search-result-cell-value').html(function (_, html) {
        if (wrappedLinkPattern.test(html))
            return html;
        return html.replace(urlPattern, '<a href="$1" title="$1" target="_blank">$1</a>');
    });
}

//$("input[type='radio']").live("change", setEnabledWithRadios);
//$("input[type='radio']").live("change", setRequiredWithRadios);
$("body").on('change', 'input[type="radio"]', setEnabledWithRadios);
$("body").on('change', 'input[type="radio"]', setRequiredWithRadios);

//$("select").live("change", setEnabledWithSelect);
//$("select").live("change", setVisibleWithSelect);
$(document).on('change', 'select', setEnabledWithSelect);
$(document).on('change', 'select', setVisibleWithSelect);

//$(".multiple-editor-append").live("click", multipleEditorAppend);
//$(".multiple-editor-remove").live("click", multipleEditorRemove);
$("body").on('click', '.multiple-editor-append', multipleEditorAppend);
$("body").on('click', '.multiple-editor-remove', multipleEditorRemove);


//$("input[type='file']").live('change', onFileEditorChange);
$("body").on('change', 'input[type="file"]', onFileEditorChange);

$(".multiple-editor-append").on('change', 'click', multipleEditorRemove);

//$(".form-dictionary-control").live('change', onFormDictionaryControlChange);
$("body").on('change', '.form-dictionary-control', onFormDictionaryControlChange);

/*initialiseSearchResultTableScripts('.search-result');*/


/**
 * Назначает контролы выбора календарей и ввода времени.
 * Зависит от Modernizr, JQuery, JQuery.UI.Datepicker, Inputmask
 * Аккуратно, здесь очень много хардкода под генератор форм легкого клиента. 
 */
function updateDatepickers() {

    var update = function () {

        if ($.fn.datetimepicker) {

            function hasNonStaticParent(el) {

                var parent = el;
                if (parent) {
                    if (parent.css('position') === 'static') {
                        parent = parent.parents().filter(function () {
                            return $(this).css('position') !== 'static';
                        }).first();
                    }
                }

                return parent.length !== 0;
            }

            function resolveWrapper(el) {
                var wrapper = el.closest(".table-edit-wrapper, .modal-content-wrapper");
                return wrapper && hasNonStaticParent(wrapper) ? wrapper : null;
            }

            $("div.input-group.date[data-type='date']").each(function () {

                $(this).datetimepicker({
                    format: 'DD.MM.YYYY',
                    locale: 'ru',
                    widgetPositioning: {
                        // принудительно выставляем правое выравнивание календаря, чтобы не выходил за границу окна
                        horizontal: "right"
                    },
                    disabledTimeIntervals: [[moment({ h: 0, m: 0, s: 1 }), moment({ h: 23, m: 59, s: 59 })]],
                    widgetParent: resolveWrapper($(this))
                });
            });

            $("div.input-group.date[data-type='datetime']").each(function () {

                $(this).datetimepicker({
                    format: 'DD.MM.YYYY HH:mm:ss',
                    locale: 'ru',
                    widgetPositioning: {
                        // принудительно выставляем правое выравнивание календаря, чтобы не выходил за границу окна
                        horizontal: "right"
                    },
                    widgetParent: resolveWrapper($(this))
                });
            });

            $("div.input-group.date[data-type='nosecdatetime']").each(function () {

                $(this).datetimepicker({
                    format: 'DD.MM.YYYY HH:mm',
                    locale: 'ru',
                    widgetPositioning: {
                        // принудительно выставляем правое выравнивание календаря, чтобы не выходил за границу окна
                        horizontal: "right"
                    },
                    widgetParent: resolveWrapper($(this))
                });
            });

            $("div.input-group.date[data-type='time']").each(function () {

                $(this).datetimepicker({
                    format: 'hh:mm:ss',
                    locale: 'ru',
                    widgetPositioning: {
                        // принудительно выставляем правое выравнивание календаря, чтобы не выходил за границу окна
                        horizontal: "right"
                    },
                    widgetParent: resolveWrapper($(this))
                });
            });

            $("div.input-group.year[data-type='year']").each(function () {

                $(this).datetimepicker({
                    format: "YYYY",
                    locale: 'ru',
                    widgetPositioning: {
                        // принудительно выставляем правое выравнивание календаря, чтобы не выходил за границу окна
                        horizontal: "right"
                    },
                    widgetParent: resolveWrapper($(this))
                });
            });
        }

        try {
            if (typeof ChronoGroups !== 'undefined')
                ChronoGroups.Init();
        }
        catch (ex) {
            console.log(ex);
        }

        //хак для отобарадения датапикера в таблице, при редактирование документа.
        //у таблицы и у ячейки может стоять overflow, что не дает отобразить окошко выбора пикеру.
        //ломает календарь, input'ы исчезают
        /*var pickers = $("div.input-group.date[data-type='date']");
        $.each(pickers,
            function (index, element) {
                var current = $(element);
                if (current.parents(".table-edit-row").length > 0) {
                    current.on('dp.show',
                        function () {
                            var parent = $(this).parent();
                            var originPosition = parent.position().left;
                            parent.addClass("date-fix-position");
                            parent.css({ 'left': originPosition });

                            var parentCell = parent.parents(".table-edit-column.date.search-result-no-ellipsis-cell");

                            if (parentCell.length > 0)
                                parentCell.css("overflow-x", "visible");
                        });

                    current.on('dp.hide',
                        function () {
                            var parent = $(this).parent();
                            parent.removeClass("date-fix-position");

                            var parentCell = parent.parents(".table-edit-column.date.search-result-no-ellipsis-cell");

                            if (parentCell.length > 0)
                                parentCell.css("overflow-x", "hidden");

                        });
                } else if (current.parents(".modal-body").length > 0) {
                    var modalBodyElement = $(".modal-body");
                    if (modalBodyElement.find("form").height() < 250) {
                        //modalBodyElement.css("overflow-y", "visible"); //ломает модалку CreateDocumentLink
                    } else {
                        modalBodyElement.css("overflow-y", "auto");
                    }
                }
            });*/
    };

    // Событие появления модального окна редактирования, ищем элементы повторно
    $(document).on('shown.bs.modal', function () {
        update();
    });

    // Событие добавления строки в таблицу, ищем элементы повторно
    $(document).on('onTableRowAdded', function () {
        update();
    });

    // Событие загрузки документа через Ajax
    $(document).on('onDocumentAjaxLoaded', function () {
        update();
    });

    // Событие происходит когда в селекте выбирается элемент, 
    // который должен поставить disabled на другие элементы
    $(document).on('change', "input[type='checkbox'][hidden-ctl='true']", onSelectBoolChange);

    $(document).on('change', "input[type='checkbox'].selector-all-rows", onSelectTableChange);

    $(document).on('change', 'select', function () {


        if ($(this).hasClass("bool-sel-ctl")) {

            //  $(this).children('option[selected]').removeAttr("selected");
            //  $(this).children('option[value="' + $(this).val() + '"]').attr("selected", "selected");


            if ($(this).val() == "1") {
                $(this).prev().prop("checked", true);
            } else {
                $(this).prev().prop("checked", false);
            }
        }
        // Постараемся не ломать поведение по-умолчанию если на странице нет полей которые надо 
        // скрывать в зависимости от значения селекта
        if ($(".enabled-with-select".length > 0)) {
            update();
        }
    });

    update();
}

/* dynamic loading */

var dynamicLoading = {
    elements: [],
    isRunning: false,

    getUniqueSelector: function (selector) {
        var spaceIndex = selector.indexOf(' ');

        var urlPart, selectorPart;
        if (spaceIndex < 0) {
            urlPart = selector;
            selectorPart = '';
        } else {
            urlPart = selector.substr(0, spaceIndex);
            selectorPart = selector.substr(spaceIndex + 1);
        }

        var randDelimiter = urlPart.indexOf('?') >= 0 ? "&" : "?";
        var randPart = "rand=" + new Date().getTime();

        var result = urlPart + randDelimiter + randPart;
        if (spaceIndex >= 0)
            result += ' ' + selectorPart;

        return result;
    },

    loadOne: function (callback) {
        if (this.elements.length < 1)
            return false;

        var element = this.elements[0];
        this.elements.shift();

        var item = $(element.node);
        var wrapper = $("<div>");

        var selector = this.getUniqueSelector(element.url);
        wrapper.load(selector, function () {
            item.after(wrapper.html());
            item.remove();

            callback();
        });

        return true;
    },

    loadNext: function () {
        var _ = this;
        if (_.isRunning)
            return;

        _.isRunning = _.loadOne(function () {
            _.isRunning = false;
            _.loadNext();
        });
    },

    push: function (node, url) {
        this.elements.push({ node: node, url: url });
        this.loadNext();
    }
};

function startReplaceScripts() {
    $("[data-replace-url]").each(function () {
        var item = $(this);

        var url = item.attr('data-replace-url');
        item.removeAttr('data-replace-url');

        dynamicLoading.push(item.get(0), url);
    });

    $("[data-badge-url]").each(function () {
        var item = $(this);

        var url = item.attr('data-badge-url');
        item.removeAttr('data-badge-url');
        url = dynamicLoading.getUniqueSelector(url);

        setTimeout(function () { delayedLoadBadgeCount(url, item) }, 1000);
    });
}


function delayedLoadBadgeCount(url, item) {
    if ($(".dx-loadpanel.dx-state-invisible").length == 0 && $(".dx-loadpanel").length == 1) {
        setTimeout(function () { delayedLoadBadgeCount(url, item) }, 1000);
        return;
    }

    $.get(url,
        function (data) {
            if (data && data > 0) {
                var badge = $("<span class='badge'></span>");
                badge.html(data);

                item.after(badge);
                item.after("<span> </span>");
                item.remove();
            } else {
                item.remove();
            }
        });
}


function reinitialiseScripts() {

    function reinitialise() {
        reinitialiseMobileSettings();
        setReadOnlyWithCheckbox();
        setEnabledWithRadios();
        setRequiredWithRadios();
        setEnabledWithSelect();
        setVisibleWithSelect();
        setSearchResultTableMenuVisibility('.search-result');
        setSearchResultTableRowViewVisibility('.search-result');
        setEditTableRowVisibility('.table-edit-wrapper');
        activateMultipleEditors();
        activateCollapseButtons();
        activateAjaxFileEditors();
        activateDataListIcons();
        ct.common.dictionary.fillDisplayFields();
        startReplaceScripts();

        wrapUrls();
        disableTemplateRowValidation();

        $.fn.modal.Constructor.prototype.enforceFocus = function () {
            var modal_this = this;

            $(document)
                .on('focusin.modal',
                    function (e) {
                        if (!modal_this.$element.has(e.target).length) {
                            //modal_this.$element.focus();
                        }
                    });
        };

        initAutonumeric();

        $(document).updatePolyfill();
    }

    // подписки
    $(document).on("onDocumentAjaxLoaded",
        function () {
            reinitialise();
        });

    reinitialise();
}



function reinitialiseScriptShort() {
    reinitialiseMobileSettings();

    setEnabledWithRadios();
    setRequiredWithRadios();
    setReadOnlyWithCheckbox();
    setEnabledWithSelect();
    setVisibleWithSelect();
    setSearchResultTableMenuVisibility('.search-result');
    setSearchResultTableRowViewVisibility('.search-result');
    setEditTableRowVisibility('.table-edit-wrapper');
    activateMultipleEditors();
    activateCollapseButtons();
    activateAjaxFileEditors();
    activateDataListIcons();
    ct.common.dictionary.fillDisplayFields();
    startReplaceScripts();
    //wrapUrls();
    disableTemplateRowValidation();
    enableToolTips();

    $.fn.modal.Constructor.prototype.enforceFocus = function () {
        var modal_this = this;

        $(document).on('focusin.modal', function (e) {


            if (!modal_this.$element.has(e.target).length) {
                //modal_this.$element.focus();
            }
        });
    };

    initAutonumeric();

    $(document).updatePolyfill();
}

var waitingDialog = waitingDialog || (function ($) {
    'use strict';

    // Creating modal dialog's DOM
    var $dialog = $(
        '<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;">' +
        '<div class="modal-dialog modal-sm">' +
        '<div class="modal-content">' +
        '<div class="modal-body" style="text-align:center;">' +
        '<div><h3 class="loading-message"></h3></div>' +
        '<div class="loading-image loading-image-shown">' +
        '</div>' +
        '</div></div></div>');

    return {

        dlg: $dialog,

        show: function (message, options) {
            var it = this;
            if ($(".modal-backdrop:visible").length === 0) {

                $dialog.find("h3").text(message);
                $dialog.find(".modal-content").css("visibility", "visible");
                $dialog.find(".loading-image.loading-image-shown").removeAttr("style");
                $dialog.modal();
            } else {

                setTimeout(function () {
                    it.show(message, options);
                }, 350);
            }
        },
        showCtrlShiftSkip: function (event, message, options) {
            var it = this;
            if (!event.ctrlKey && !event.shiftKey) {
                it.show(message, options);
            }
        },
        showWaiting: function (force) {
            var it = this;
            if (force || $(".modal-backdrop:visible").length === 0) {

                $dialog.find("h3").text("");
                $dialog.find(".modal-content").css("visibility", "hidden");
                $dialog.find(".loading-image.loading-image-shown").css("opacity", 0.15);
                $dialog.modal();
            } else {

                setTimeout(function () {
                    it.showWaiting();
                }, 350);
            }
        },
        hide: function () {
            $dialog.modal('hide');
        },
        hideWithCheck: function () {
            var it = this;
            if (it.isVisible()) {
                it.hide();

                setTimeout(function () {
                    it.hideWithCheck();
                }, 350);
            }
        },
        isVisible: function () {
            return $(".modal-backdrop:visible").length > 0;
        }
    };

})(jQuery);

function initAutonumeric() {
    $(".form-control.money:not([data-edit-required])").autoNumeric('init', {
        aSep: ' ',
        aDec: '.',
        vMin: '0.00',
        vMax: "99999999999999999999999999999999999999999.99",
        wEmpty: '',
        mRound: 'B',
        mDec: window.moneyPrecision
    });

    $(".form-control[data-number-type='integer']:not([data-edit-required])").autoNumeric('init', {
        aSep: '',
        aDec: '.',
        vMin: '0',
        vMax: "99999999999999999999999999999999999999999",
        wEmpty: 'zero',
        lZero: 'keep',
        mRound: 'B'
    });

    $(".form-control[data-number-type='double']:not([data-edit-required])").each(function (index, value) {
        var item = $(value);
        item.autoNumeric('init', {
            aSep: '',
            aDec: '.',
            vMin: '0.00',
            vMax: "99999999999999999999999999999999999999999.99",
            mDec: item.attr('data-accuracy') ? item.attr('data-accuracy') : '2',
            wEmpty: '',
            mRound: 'B'
        });
    });
}

/*Begin - Parsley validation*/
function addParsleyValidation(formSelector) {

    function addValidation(formSelector) {
        var form = $(formSelector).first();
        var parsleyForm = form.parsley({
            inputs: '[required]',
            excluded: "input[type=button], input[type=submit], input[type=reset], input[type=hidden], [disabled], [data-parsley-disabled], [data-parsley-disabled] *",
            triggerAfterFailure: 'input change',
            validationThreshold: 3,
            focus: 'none',
            uiEnabled: true,
            errorsWrapper: '<ul class="parsley-errors-list help-block tooltip-text"></ul>'
        })
            .on("form:error",
                function () {
                    var parsleyForm = this;
                    openTabAndFocusField(getFirstErrorField(parsleyForm));
                })
            .on("field:validated",
                function () {
                    var parsleyField = this;
                    displayError(parsleyField);
                })
            .on("form:validated",
                function () {
                    var parsleyForm = this;
                    highlightTabsWithErrorFields(parsleyForm);
                });


        addRequiredForLabels(parsleyForm.fields);
        turnOffBrowserValidation(formSelector);
    }

    addValidation(formSelector);

    $(document).on("onDocumentAjaxLoaded",
        function (event, params) {
            if (params && params.validatedFormSelector) {
                addValidation(params.validatedFormSelector);
            }
        });
}

//window.addEventListener('load', checkDateField, true);
function checkDateField() {
    $('[data-type="date"]').attr('data-parsley-date', '');
}

function turnOffBrowserValidation(formSelector) {
    var form = $(formSelector).first();

    if (!form.hasClass("parsley-validation")) {
        form.addClass("parsley-validation");
        //отключаем для формы стандартную валидацию
        form.attr('novalidate', 'novalidate');
    }
}

function addRequiredForLabels(parsleyFields) {
    if (parsleyFields == undefined)
        return;

    $.each(parsleyFields,
        function (index, field) {
            if (field.constraintsByName.required != null) {
                var labelEl = getLabelContainer(field.$element);
                labelEl.addClass("label-required");
            }
        });
}

function displayError(parsleyField) {

    var fieldFormGroupEl = parsleyField.$element.closest(".documentView-field-value");
    var labelFormGroupEl = getLabelContainer(parsleyField.$element);

    if (parsleyField.$element.is("input[type='file']")) {
        var container = parsleyField.$element.parent();
        var button = container.find(".file-drop-area-title");
        if (!parsleyField.isValid()) {
            container.addClass("has-error");
            //button.addClass("form-control");
        } else {
            container.removeClass("has-error");
            //button.removeClass("form-control");
        }
    }

    if (!parsleyField.isValid()) {
        fieldFormGroupEl.addClass("has-error");
        labelFormGroupEl.addClass("has-error");
    } else {
        fieldFormGroupEl.removeClass("has-error");
        labelFormGroupEl.removeClass("has-error");
    }
}

function getLabelContainer($field) {
    /*    return $(".documentView-field-label[data-related-field='" + $field.attr("data-field-name") + "']").first();*/
    return $("#rel-" + $field.attr("data-field-name")).first();
    //return $field.closest(".tab-pane")
    //    .find(".documentView-field-label[data-related-field='" + $field.attr("data-field-name") + "']").first();
}

function getFirstErrorField(parsleyForm) {
    var firstErrorField = null;
    for (var i = 0; i < parsleyForm.fields.length; i++) {
        if (parsleyForm.fields[i].isValid() !== true) { //TODO: it also could return null !
            firstErrorField = parsleyForm.fields[i].$element;
            break;
        }
    }
    return firstErrorField;
}

function openTabAndFocusField($field) {
    if ($field == null)
        return;

    var tab = $field.closest(".tab-pane");

    var tabId = tab.attr("id");
    //открываем вкладку с полем
    $("a[href*=" + tabId + "]").first().tab("show");

    //фокус на поле; таймаут на случай если вкладка не успела открыться
    setTimeout(function () { $field.focus(); }, 100);
}

function highlightTabsWithErrorFields(parsleyForm) {
    parsleyForm.$element
        .find(".tab-pane")
        .each(function (index, tabContent) {
            var tabContentId = tabContent.id;
            var $tabContent = $(tabContent);

            var tabButton = $("a[href*=" + tabContentId + "]");

            if ($tabContent.find(".parsley-error").length > 0 && !tabButton.hasClass("tab-has-error")) {
                tabButton.addClass("tab-has-error");
            } else if (!$tabContent.has(".parsley-error").length > 0 && tabButton.hasClass("tab-has-error")) {
                tabButton.removeClass("tab-has-error");
            }
        });
}

function addRegEditValidations() {
    scopes.onRegister(function () {
        addParsleyValidation(".register-form");
    });

    scopes.onEdit(function () {
        addParsleyValidation("form.edit-form");
    });

    addViewDecodeHtml();
}
/*End- Parsley validation*/

function addViewDecodeHtml() {
    scopes.onView(function () {

        var fields = $(".documentView-field-value");
        $.each(fields, function (index, element) {
            var current = $(element);
            if (current.find("input").length === 0) {
                if (element.className.indexOf("field-type-url") === -1) {
                    current.text(ct.common.decodeHTML(current.text()));
                }
            }
        });
    });
}
/**
 * @deprecated Use ct.common.dictionary.fillDisplayFields
 */
function fillDictDisplayValues() {
    $(".dict-modal-control").each(function (index, dictControl) {
        fillDipslayValueForDict($(dictControl));
    });
}

/**
 * @deprecated Use ct.common.dictionary.fillSingleDisplayField
 */
function fillDipslayValueForDict($dictControl) {
    var dictEditName = $dictControl.attr("data-edit-name");
    var isTable = $dictControl.closest(".table-edit").length > 0;

    var parentContainerSelector = isTable ? ".table-edit-row" : ".column-container";
    var hiddenDictFields = $dictControl.closest(parentContainerSelector).find(".display-field-part[dictionary-edit-name=" + dictEditName + "]");
    if (hiddenDictFields.length == 0) {
        hiddenDictFields = $dictControl.closest(parentContainerSelector).parent().find(".display-field-part[dictionary-edit-name=" + dictEditName + "]");
    }
    var displayText = hiddenDictFields
        .map(function () {       //берем значения
            return this.value;
        })
        .get()                  //преобразуем в массив
        .filter(function (element) {//фильтруем невалидные
            return element == null || $.trim(element).length === 0
                ? false
                : true;
        })
        .join(", ");            //склеиваем в строку

    var dictDisplayField = $dictControl.find(".dict-display-field");
    if (dictDisplayField.val() !== displayText) {
        dictDisplayField.val(displayText).change();
    }
}

/**
 * @deprecated Use ct.common.dictionary.fillMultipleDisplayFields
 */
function fillDisplayVlaueForMultipleDict($dictControl) {
    var hiddenDictRows = $dictControl.find("ul.multiple-editor-list li");
    var displayTextArr = [];
    hiddenDictRows.each(function (num, row) {
        var columnTextArr = $(row).find("input.display-field-part")
            .map(function () { //берем значения
                return this.value;
            })
            .get() //преобразуем в массив
            .filter(function (element) { //фильтруем невалидные
                return !(element == null || $.trim(element).length === 0);
            }); //склеиваем в строку
        var columnText = columnTextArr.length > 1 ? "(" + columnTextArr.join(",") + ")" : columnTextArr[0];
        displayTextArr.push(columnText);
    });

    var displayText = displayTextArr.
        filter(function (element) {
            return (element != null) && $.trim(element).length !== 0;
        })
        .join(", ");

    $dictControl.find(".mult-dict-display").val(displayText).change();
}




/**
 * @deprecated Use ct.common.dictionary.removeFromMultipleDisplayFields
 */
function removeFromMultipleDict(removeGlyph) {
    var dictControl = $(removeGlyph).closest(".dict-modal-control");
    var splittedName = $(removeGlyph).siblings("input").first().attr("name").split("-");
    var removedRowIndex = parseInt(splittedName[splittedName.length - 1]);
    var inputName = splittedName[0] + "_deleted";
    var deleteRowInput;

    if ($("[name='" + inputName + "']").length > 0) {
        deleteRowInput = $("[name='" + inputName + "']");
    } else {
        var deleteContainer = $("<div data-name='deletedTableElements'></div>");
        deleteRowInput = $("<input type='hidden' name='" + inputName + "' value='' />");
        deleteContainer.append(deleteRowInput);
        $(removeGlyph).closest("ul").parent().append(deleteContainer);
    }

    deleteRowInput.val(deleteRowInput.val() + removedRowIndex + ",");
    $(removeGlyph).closest("li").remove();

    fillDisplayVlaueForMultipleDict(dictControl);
}

function verticalTabs() {

    // Открывает первую вкладку и записывает хеш в урл
    var openFirstTab = function (viewTabs, updateHash) {
        var foundTab = viewTabs.find('a:first');
        foundTab.click();

        if (updateHash === false) {
            return;
        }

        if (updateHash === undefined || updateHash === true) {
            var hash = foundTab.attr('data-target');

            if (hash) {
                window.location.hash = hash;
            }
        }
    };

    // Автоматическое открытие вкладки при отображении и регистрации
    var onViewAndRegister = function () {
        // При обновлении страницы сохраняем анкор таба в url через хэш
        var viewTabs = $('#registerView .nav-tabs, #documentView .nav-tabs, #editView .nav-tabs');

        // Если табов нет, то и делать нечего
        if (viewTabs.length == 0) {
            return;
        }

        // При клике на любой из табов перезаписываем хеш в строке урла  
        $(viewTabs).on("click", "a[data-toggle]", function () {
            var href = $(this).attr('href');

            if (!href) {
                return;
            }

            var hash = href.split('#')[1];

            if (!hash) {
                return;
            }

            location.hash = hash;
        });


        var hash = location.hash;
        //если нет хэша в урле, попробуем найти сохраненный в sessionStorage и сразу удалем его
        if (!hash) {
            hash = getSavedHash();
            if (hash)
                removeSavedHash();
        }
        // Если нет хеша, то открываем первую вкладку
        if (!hash) {
            openFirstTab(viewTabs);
            return;
        }

        var foundTab = viewTabs.find("a[data-target='" + hash + "']");
        if (foundTab.length > 0) {
            // Хеш есть, пытаемся найти вкладку и перейти на неё
            foundTab.click();
        } else {
            // Нужного хеша нет, открываем первую вкладку
            openFirstTab(viewTabs);
        }
    }

    onViewAndRegister();
}

function toTopButton() {
    var button = $("#back-to-top");

    $(window).scroll(function () {
        if ($(this).scrollTop() > 50) {
            button.fadeIn();
        } else {
            button.fadeOut();
        }
    });

    button.click(function () {
        button.tooltip("hide");
        $("body,html").animate({
            scrollTop: 0
        }, 800);
        return false;
    });

    button.tooltip("show");
}

function bindDictionaryButtons() {
    // Смотрим на появление новых элементов button.show-dict-btn т.к.
    // при редактировании разметка с кнопками загружается позже и кнопок ещё не существует
    $(document).on("click", "button.show-dict-btn", function (event) {
        event.preventDefault();
        HierarDictionary(event.target);
        //hierar = HierarDictionary(event.target);
    });
}

function bindDictionaryDisplayField() {
    $(document).on("change", ".display-field-part",
        function (ev) {
            var $inputToDisplay = $(ev.target);
            var dictionaryName = $inputToDisplay.attr("dictionary-edit-name");
            var isTable = $inputToDisplay.closest(".table-edit").length > 0;
            var containerSelector = isTable ? ".table-edit-row" : ".column-container";
            var $dictControl = $inputToDisplay.closest(containerSelector).find(".dict-modal-control[data-edit-name=" + dictionaryName + "]");
            fillDipslayValueForDict($dictControl);
        }
    );

    $(document).on("change", ".dict-display-field",
        function (ev) {
            var field = $(ev.target);
            var isTable = field.closest(".table-edit").length > 0;
            var containerSelector = isTable ? ".form-group" : ".column-container";
            var group = field.closest(containerSelector);
            var input = group.find(".display-field-part");
            //если поле для отображение собирается из нескольких частей то восстановить части уже невозможно, поэтому в поля ничего не пишем.
            if (input.legth === 0) {
                input.val(field.val());
            }
        }
    );
}

function enableToolTips() {
    $('body').tooltip({ selector: '[data-toggle="tooltip"]', container: "body" });
}

function initReportSections() {
    $('.report-element').on('show.bs.collapse',
        function () {
            $(this).prev('.report-section').addClass('active');
        });

    $('.report-element').on('hide.bs.collapse',
        function () {
            $(this).prev('.report-section').removeClass('active');
        });
}

function filterDictionaryItems(dictionaryName, itemKeys, iShow, columnName) {
    if (!dictionaryName) {
        console.warn("не задано имя массива. FilterDictionaryItems");
        return;
    }

    if (!itemKeys || !Array.isArray(itemKeys)) {
        console.warn("не задан массив разрешенных значений. FilterDictionaryItems");
        return;
    }

    if (typeof iShow === 'undefined') {
        iShow = false;
    }

    var id = dictionaryName + "_allowed_items";

    var value = {
        codes: itemKeys,
        isShow: iShow,
        columnName: columnName
    };

    var dictionayAllowItems = $("#" + id);
    if (dictionayAllowItems.length === 0) {
        dictionayAllowItems = $('<input>').attr({
            type: 'hidden',
            id: id,
            name: id,
            disabled: true
        }).appendTo($(document.body));
    }

    dictionayAllowItems.val(JSON.stringify(value));
}

/**
 * Отображает диалог с перечнем ошибок.
 * @deprecated Use ct.common.showCommonErrors instead.
 */
function showCommonErrors(errors, callback) {
    ct.common.showCommonErrors(errors, callback);
}

function showNotification(dialogTitle, messages) {
    var dlg = $('#notificationDialog');
    var dlgBody = dlg.find(".modal-body");
    dlg.modal('show');

    if (dialogTitle)
        dlg.find(".modal-title").text(dialogTitle);

    if (messages instanceof jQuery) {
        dlgBody.append(messages);
    } else {

        if (!Array.isArray(messages))
            messages = [messages];

        if (messages.length === 1) {
            var p = $("<p class='form-control-static'></p>");
            p.text(messages[0]);
            dlgBody.append(p);
        } else {
            var items = [];
            $.each(messages, function (i, message) {
                items.push('<li><p class="form-control-static">' + message + '</p></li>');
            });
            var list = $("<ul>");
            list.html(items);
            dlgBody.append(list);
        }
    }
}

function showConfirmEx(dialogTitle, message, yesText, noText, itemElement) {
    var self = this;
    var defer = $.Deferred();

    var dlg = $('#notificationDialog');

    var container = $(itemElement).closest(".dx-overlay-wrapper");

    setContainerStyles(container);

    if (dlg) {

        var dlgBody = dlg.find(".modal-body");
        var dlgButtons = dlg.find(".modal-footer");

        if (dlgButtons) {
            var buttons = $("<button type='button' class='btn btn-primary' data-dismiss='modal' id='btnYes'>" + yesText + "</button>" +
                "<button type='button' class='btn btn-default' data-dismiss='modal' id='btnNo'>" + noText + "</button>");
            dlgButtons.empty();
            dlgButtons.append(buttons);
        }

        dlg.modal('show');

        dlgButtons.find("#btnYes").click(function () {
            resetContainerStyles(container);
            defer.resolve();
        });

        dlgButtons.find("#btnNo").click(function () {
            resetContainerStyles(container);
            defer.reject();
        });


        if (dialogTitle) {
            dlg.find(".modal-title").text(dialogTitle).addClass("dialog-modal-title");
        }

        if (dlgBody) {
            dlgBody.empty();
            var p = $("<p class='form-control-static dialog-text'></p>");
            p.text(message);
            dlgBody.append(p);
        }
    } else {
        //alert("Элемент с id = notificationDialog не найден!")
        resetContainerStyles(container);
        defer.fail("Элемент с id = notificationDialog не найден!");
    }

    return defer.promise();
}

function setContainerStyles(container) {
    if (container && container.length) {
        container.removeStyle('z-index').removeClass("dialog-modal-reset").addClass("dialog-modal-backdrop");
    } else {
        console.log("Container (set) not found!");
    }
}


function resetContainerStyles(container) {
    if (container && container.length) {
        container.removeClass("dialog-modal-backdrop").addClass("dialog-modal-reset");
    } else {
        console.log("Container (reset) not found!");
    }
}


function showAlertEx(dialogTitle, message, okText, itemElement) {
    var self = this;

    var dlg = $('#notificationDialog');

    var container = $(document).find(".dx-overlay-wrapper");

    setContainerStyles(container);

    if (dlg) {

        var dlgBody = dlg.find(".modal-body");
        var dlgButtons = dlg.find(".modal-footer");

        if (dlgButtons) {
            var buttons = $("<button type='button' class='btn btn-primary' data-dismiss='modal' id='btnOk'>" + okText + "</button>");
            dlgButtons.empty();
            dlgButtons.append(buttons);
        }

        dlg.modal('show');

        dlgButtons.find("#btnOk").click(function () {
            resetContainerStyles(container);
            dlg.modal("hide");
            clearTimeout(timeoutId);
        });

        if (dialogTitle) {
            dlg.find(".modal-title").text(dialogTitle).addClass("dialog-modal-title");
        }

        if (dlgBody) {
            dlgBody.empty();
            var p = $("<p class='form-control-static dialog-text'></p>");
            p.text(message);
            dlgBody.append(p);
        }

        var timeoutId = setTimeout(function () {
            resetContainerStyles(container);
            dlg.modal("hide");
        }, 3000);

    } else {
        resetContainerStyles(container);
    }

    return;
}




//Получение базового урл сайта. 
//Пример: В проде вернет "/edo", на дев машине вернет "/".
function getBaseUrl() {

    var str = $("base").attr('href');
    if (!str)
        return str;
    if (str.substr(str.length - 1) === '/') {
        return str.substr(0, str.length - 1);
    }
    return str;
}


//Получить правильный relative путь для url. 
//Пример: getRelativeUrl("/someUrl") и getRelativeUrl("someUrl") вернет "/edo/someUrl" на проде и "/someUrl" на дев машине.
function getRelativeUrl(url) {

    var relativeUrl = getBaseUrl();
    if (url && relativeUrl !== undefined && relativeUrl !== null) {

        if (relativeUrl === "/") {
            relativeUrl = "";
        }

        relativeUrl = url[0] === "/" ? (relativeUrl + url) : (relativeUrl + "/" + url);
    }

    return relativeUrl;
}

//Получить ключ Department по уникальному названию Department
function getDepartmentKey(name, after) {

    if (name) {

        /* addressBookToolSelectable - кастомное значение указывать нельзя согласно требованиям безопасности
         * [EUPDEV-3843] Исправить множественные возможности проведения атаки «Внедрение XPath-операторов» (3.6)
        var url = "/AddressBook/GetAddressBookJson?editAddressBookTypes=dep&addressBookDataType=Department&addressBookToolSelectable=" +
            encodeURIComponent("Department, Department, '" + name + "'") +
            "&selectedValue=" +
            encodeURIComponent(name);
        */
        var url = "/AddressBook/GetAddressBookDepartmentJson?department=" + encodeURIComponent(name);

        $.getJSON(getRelativeUrl(url), function (data) {

            if (data) {

                var key = data.children[0].key;
                after(key);
            }
        });
    }
}

//Получить ключ WorkGroup по уникальному названию WorkGroup
function getWorkGroupKey(name, after) {

    if (name) {

        /* addressBookToolSelectable - кастомное значение указывать нельзя согласно требованиям безопасности*/
        var url = "/AddressBook/GetAddressBookWorkGroupJson?workGroup=" + encodeURIComponent(name);

        $.getJSON(getRelativeUrl(url), function (data) {

            if (data) {

                var key = data.children[0].key;
                after(key);
            }
        });
    }
}

//Получить все WorkGroup текущего пользователя
function getUserWorkGroups(after) {

    /* addressBookToolSelectable - кастомное значение указывать нельзя согласно требованиям безопасности         
    var url = "AddressBook/GetAddressBookJson?editAddressBookTypes=SelectableTypes&addressBookToolSelectable=WorkGroup,WorkGroup,{currentUserParents}&addressBookDataType=WorkGroup";
    */
    var url = "/AddressBook/GetAddressBookUserWorkGroupsJson";

    $.getJSON(getRelativeUrl(url), function (data) {

        if (data) {
            after(data.children);
        }
    });
}

//Получить ключ AccessGroup по уникальному названию AccessGroup
function getAccessGroupKey(name, after) {

    if (name) {

        /* addressBookToolSelectable - кастомное значение указывать нельзя согласно требованиям безопасности*/
        var url = "/AddressBook/GetAddressBookAccessGroupJson?accessGroup=" + encodeURIComponent(name);

        $.getJSON(getRelativeUrl(url), function (data) {

            if (data) {

                var key = data.children[0].key;
                after(key);
            }
        });
    }
}

//Получить все AccessGroup текущего пользователя
function getUserAccessGroups(after) {

    /* addressBookToolSelectable - кастомное значение указывать нельзя согласно требованиям безопасности*/
    var url = "/AddressBook/GetAddressBookUserAccessGroupsJson";

    $.getJSON(getRelativeUrl(url), function (data) {

        if (data) {
            after(data.children);
        }
    });
}

$(document).ready(function () {
    resetDictionaryFields();
    reinitialiseScripts();
    $.fn.modal.Constructor.prototype.enforceFocus = function () {
        var modal_this = this;

        $(document).on('focusin.modal', function (e) {
            //win.focus();

            if (!modal_this.$element.has(e.target).length) {
                //modal_this.$element.focus();
            }
        });
    };

    enableToolTips();
    updateDatepickers();
    verticalTabs();
    toTopButton();
    bindDictionaryButtons();
    bindDictionaryDisplayField();
    initialiseSearchResultTableScripts(".search-result");
    initialiseTableEditScripts($(document));
    initReportSections();

    WorkflowNotificationManager.showNotifications();

    if (typeof scopes !== 'undefined') {
        addRegEditValidations();
        scopes.run();
    }

    // подписка на событие здесь, потому что до выполнения кастомных скриптов из списка
    // должна пройти реинициализация скриптов
    $(document).on('onDocumentAjaxLoaded',
        function (event, params) {
            if (params && params.documentType) {
                scopes.run(params.documentType);
            };
        });

    $(document).on('onDocumentModalWindowLoaded',
        function (event, params) {
            addParsleyValidation(params.validatedFormSelector);
        });
});

function getInputName(inputName) {
    if (inputName.indexOf(":") !== -1) {
        var str = inputName.split('-');
        var allstr = str[0].split(':');

        var newStr = "";
        for (var i = 1; i < allstr.length; i++) {
            newStr = newStr + allstr[i] + "-";
        }
        return newStr + str[1] + "-" + str[2];
    }
    else
        return inputName.split('-')[1];
};

function Scopes() {
    /* Используется в кастомных скриптах потоков, 
     * для применения различных правил при редактирвоании/создании/просмотре документов
     */
    var onRegisterFuncs = [];
    var onEditFuncs = [];
    var onViewFuncs = [];
    var onSearchFuncs = [];

    var onSearchTempFuncs = [];
    var onRegisterTempFuncs = [];
    var onEditTempFuncs = [];
    var onViewTempFuncs = [];

    // добавление функций для конкретных потоков. они могут очищаться для замены на функции другого потока
    this.onRegisterTemp = function (f) {
        onRegisterTempFuncs.push(f);
    };

    this.onEditTemp = function (f) {
        onEditTempFuncs.push(f);
    };

    this.onViewTemp = function (f) {
        onViewTempFuncs.push(f);
    };

    this.onSearchTemp = function (f) {
        onSearchTempFuncs.push(f);
    }

    this.onRegister = function (f) {
        onRegisterFuncs.push(f);
    };

    this.onEdit = function (f) {
        onEditFuncs.push(f);
    };

    this.onView = function (f) {
        onViewFuncs.push(f);
    };

    this.onSearch = function (f) {
        onSearchFuncs.push(f);
    }

    this.onAll = function (f) {
        onRegister(f);
        onEdit(f);
        onView(f);
        onSearch(f);
    }

    this.run = function () {
        var targetFuncsArray = [];
        var targetTempFuncsArray = [];

        if ($("#editView").length > 0) {
            targetFuncsArray = onEditFuncs;
            targetTempFuncsArray = onEditTempFuncs;
        }

        if ($("#registerView").length > 0) {
            targetFuncsArray = onRegisterFuncs;
            targetTempFuncsArray = onRegisterTempFuncs;
        }

        if ($("#documentView").length > 0) {
            targetFuncsArray = onViewFuncs;
            targetTempFuncsArray = onViewTempFuncs;
        }

        if ($("#replaced-search-content").length > 0) {
            $.each(onSearchFuncs,
                function (num, func) {
                    targetFuncsArray.push(func);
                });
            $.each(onSearchTempFuncs,
                function (num, func) {
                    targetTempFuncsArray.push(func);
                });
        }

        if (targetFuncsArray != undefined && targetTempFuncsArray != undefined) {
            $.each(targetFuncsArray,
                function (num, func) {
                    func();
                });

            $.each(targetTempFuncsArray,
                function (num, func) {
                    func();
                });
        }
    };

    // очищение временных функций. на вкладке поиска аяксом вставляются формы для разных потоков.
    // там надо очищать скрипты для ненужных потоков, чтобы избежать конфликтов 
    this.clearTempFuncs = function () {
        onRegisterTempFuncs = [];
        onEditTempFuncs = [];
        onViewTempFuncs = [];
        onSearchTempFuncs = [];
    }
}

var scopes = new Scopes();

var dsc = (function ($) {
    //декларирование переменных
    var
        configMap = {
            extended_title: 'Нажмите чтобы скрыть',
            retracted_title: 'Нажмите чтобы скрыть',
            slider_opened_em: 42,
            slider_closed_em: 0
        },
        stateMap = {
            px_per_em: 0,
            slider_hidden_px: 0,
            slider_closed_px: 0,
            slider_opened_px: 0
        },
        $slider,
        toggleSlider, getEmSize, setPxSizes, initModule;

    //Сервисные функции
    setPxSizes = function (containerSize) {
        var px_per_em, opened_height_em;

        px_per_em = getEmSize($slider.first());

        opened_height_em = configMap.slider_opened_em;
        if (containerSize != undefined) {
            opened_height_em = opened_height_em / 3 * containerSize;
        }

        stateMap.px_per_em = px_per_em;
        stateMap.slider_closed_px = configMap.slider_closed_em * px_per_em;
        stateMap.slider_opened_px = opened_height_em * px_per_em;
    };

    getEmSize = function (elem) {
        return Number(
            getComputedStyle(elem[0], '').fontSize.match(/\d*\.?\d*/)[0]
        );
    };
    //Основной функционал
    toggleSlider = function () {
        var
            slider_height = $slider.height();

        if (slider_height <= stateMap.slider_closed_px) {
            $slider
                .animate({ height: stateMap.slider_opened_px })
                .attr('title', configMap.extended_title);
            return true;
        }

        else if (slider_height >= stateMap.slider_opened_px) {
            $slider
                .animate({ height: stateMap.slider_closed_px })
                .attr('title', configMap.retracted_title);
            return true;
        }
        // не срабатывать, если слайдер раздвигается/сдвигается
        return false;
    };
    //Открытые методы и свойства
    initModule = function ($container, containerSize) {
        $slider = $container;
        setPxSizes(containerSize);
        toggleSlider(containerSize);
        return true;
    };

    return { initModule: initModule };

}(jQuery));

// fix "back button" usage with bootstrap tabs
$(document).ready(function () {
    var handler = function (e) {
        var activeTab = $("[data-target='" + location.hash + "']");
        if (activeTab.length) {
            activeTab.tab('show');
        }
    };

    window.onpopstate = handler;
    window.onhashchange = handler;
});

var WorkflowNotificationManager = (function () {

    var propName = "WorkflowNextSteps";

    function getWorkflowNotificationData() {
        var data = getFromSessionStorage(propName);
        if (data) {
            removeFromSessionStorage(propName);
            return JSON.parse(data);
        } else {
            data = readCookie(propName);
            if (data) {
                deleteCookie(propName);
                var encoded = decodeURIComponent(data).split('+').join(' ');
                return JSON.parse(encoded);
            }
        }
        return null;
    }

    function showNotifications() {

        var data = getWorkflowNotificationData();
        if (!data)
            return;

        var messages = data.msgs;
        if (!messages)
            return;

        var l = messages.length;
        var wrapper = $("<div/>");
        for (var i = 0; i < l; i++) {
            var current = messages[i];

            var itemWrapper = $("<div class='panel panel-default'/>");

            var headerWrapper = $("<div class='panel-heading'></div>");
            headerWrapper.html(current.wfname);
            var bodyWrapper = $("<div class='panel-body'/>");
            bodyWrapper.html(current.text);

            itemWrapper.append(headerWrapper);
            itemWrapper.append(bodyWrapper);
            wrapper.append(itemWrapper);
        }
        var title = data.title ? data.title : " ";
        showNotification(title, wrapper);
    }

    function isNotificationData(str) {
        return str.indexOf("wfname") !== -1 && str.indexOf("msgs") !== -1;
    }

    function saveNotificationData(data) {
        var savedData = getFromSessionStorage(propName);
        if (savedData) {
            var dataJson = JSON.parse(savedData);
            var newData = typeof data === "string" ? JSON.parse(data) : data;
            dataJson.msgs = dataJson.msgs.concat(newData.msgs);
            data = JSON.stringify(dataJson);
        }
        updateSessionStorage("WorkflowNextSteps", data);
    }

    return {
        showNotifications: showNotifications,
        isNotificationData: isNotificationData,
        saveNotificationData: saveNotificationData
    }

}());


window.onscroll = function () { stickyBlock(); }

function stickyBlock() {
    var elements = $("div[fixed]");
    elements.each(function (index, elem) {
        var elemOffset = getOffsetRect(elem);
        if (!elem.classList.contains('fixed-block')) {
            if (window.pageYOffset > elemOffset) {
                elem.classList.add("fixed-block");
                $(elem).width($(elem).parent().parent().width());
            }
        }
        else if (window.pageYOffset <= elem.offsetTop) {
            elem.classList.remove("fixed-block");
            elem.style.width = null;
        }
    });
}

function getOffsetRect(elem) {
    var box = elem.getBoundingClientRect();

    var body = document.body;
    var docElem = document.documentElement;

    var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;
    var clientTop = docElem.clientTop || body.clientTop || 0;
    var top = box.top + scrollTop - clientTop;

    return Math.round(top);
}

function resetActionsCache() {
    var actMenu = $(".basic-actions .dymanic-actions");
    if (actMenu.length == 0) {
        var isDocView = $('#documentView.panel.panel-default').length > 0;
        if (isDocView) window.location.reload();//перезагружаем страницу только на форме просомтра, а не редактирования
    }

    actMenu.empty();
    actMenu.append('<div class="item-ajax-loading"><div class= "loading-image" id = "content-change-pasword-loading-image">&nbsp;</div></div>');
}

function dropDownHandle(docId) {
    $('.basic-actions').on('show.bs.dropdown',
        function (aaa) {
            if ($(".basic-actions .loading-image").length === 0) return;//если часиков уже нет, значит прогрузили уже

            $(".basic-actions .loading-image").css({ visibility: 'visible' });

            $.ajax({
                url: getAbsoluteUrl("Document/GetDocLazyActions"),
                cache: false,
                type: "GET",
                data: { docId: docId },
                beforeSend: function (request) {
                    request.setRequestHeader("OriginalReturnUrl", window.location.href);
                },
                success: function (actions) {
                    var actMenu = $(".basic-actions .dymanic-actions");
                    actMenu.empty();

                    $.each(actions, function (index, elem) {
                        var linkHtml = '<a title="' + elem.DisplayName + '" href="' + elem.Href + '" class="item-ajax-action" onclick="' + elem.OnClick + '" target="' + elem.Target + '">' + elem.DisplayName + '</a>';
                        actMenu.append(linkHtml);
                    });

                    if (actions.length === 0) actMenu.append('<div class="item-ajax-action">нет доступных действий</div>');

                    if (typeof customDropDownHandle === "function") customDropDownHandle();
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    showAlert("Ошибка загрузки действий", errorThrown);
                },
                traditional: true
            });
        });

    $('.basic-route-actions').on('show.bs.dropdown',
        function (aaa) {
            if ($(".basic-route-actions .loading-image").length === 0) return;//если часиков уже нет, значит прогрузили уже

            $(".basic-route-actions .loading-image").css({ visibility: 'visible' });

            $.ajax({
                url: getAbsoluteUrl("Document/GetRouteLazyActions"),
                cache: false,
                type: "GET",
                data: { docId: docId },
                beforeSend: function (request) {
                    request.setRequestHeader("OriginalReturnUrl", window.location.href);
                },
                success: function (actions) {
                    var actMenu = $(".basic-route-actions .dymanic-actions");
                    actMenu.empty();

                    $.each(actions, function (index, elem) {
                        var linkHtml = '<a title="' + elem.DisplayName + '" href="' + elem.Href + '" class="item-ajax-action" onclick="' + elem.OnClick + '" target="' + elem.Target + '">' + elem.DisplayName + '</a>';
                        actMenu.append(linkHtml);
                    });

                    if (actions.length === 0) actMenu.append('<div class="item-ajax-action">нет доступных действий</div>');
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    showAlert("Ошибка загрузки действий", errorThrown);
                },
                traditional: true
            });
        });
}


function switchYear(year) {
    var newUrl = window.location.toString();
    if (!year) {
        var url = new URL(newUrl);
        url.searchParams.delete('selectedYear');
        window.location = url;
    } else {
        newUrl = newUrl.replace(/(selectedYear=)[^\&]+/, '$1' + year);
        if (newUrl.indexOf('selectedYear') === -1) newUrl = newUrl + '&selectedYear=' + year;
        window.location = newUrl;
    }
}

function updateQueryStringParameter(uri, key, value) {
    var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
    var separator = uri.indexOf('?') !== -1 ? "&" : "?";
    if (uri.match(re)) {
        return uri.replace(re, '$1' + key + "=" + value + '$2');
    }
    else {
        return uri + separator + key + "=" + value;
    }
}

function replaceUrlToNavigate(url) {
    return url.replaceAll("&amp;", '&');
}


function startDisplayHandlingProgress(jsonResponseData) {
    debugger;
    $('#loadingProgressBlock').removeClass('hide');
    $('#loadingProgressImage').css('visibility', 'visible');

    //$('#asyncResultContainer').show();
    var docKey = jsonResponseData.uniqueIds;

    var loadingText = $('#loadingProgressText');
    loadingText.show();
    loadingText.text('Обновление статуса загрузки...');

    UpdateEisAsyncProcStatus(docKey);
}

function UpdateEisAsyncProcStatus(docKey) {
    $.ajax({
        url: getBaseUrl() + "/ContextAction/GetAsyncProcessUploadStatus",
        type: 'GET',
        data: { docKey: docKey },
        cache: false,
        success: function (data) {
            debugger;
            if (data && data.statusCode) {
                var stat = '';

                if (data.statusCode == '0') stat = 'Обработка';
                if (data.statusCode == '1') stat = 'Ошибка';
                if (data.statusCode == '2') stat = 'Успешно';
                if (data.statusCode == '3') stat = 'В очереди';

                var resultText = 'Статус: ' + stat + '.<br/>Детали: ' + data.statusText;

                $('#loadingProgressText').html(resultText);


                if (data.statusCode == '2' || data.statusCode == '1') {
                    //Если статус - ошибка или успешно, значит дальше нет смысла опрашивать сервер
                    $('#loadingProgressImageSpan').hide(); //css('visibility', 'collapse');

                    if (data.statusCode == '2') {
                        $('#loadingProgressBlock').addClass('hide');
                        $('#success-message').text('Асинхронная выгрузка успешно завершена!');
                    }
                }
                else
                    setTimeout(function () { UpdateEisAsyncProcStatus(docKey) }, 5000);
            }

        }
    });
}

function isNullOrWhiteSpace(str) {
    return (!str || str.length === 0 || /^\s*$/.test(str))
}

function changeDocStatus(status) {
    var regstatus = $("*.documentView-field-value[data-name='Статус'], input[name='regstatus']");
    regstatus.val(status);
}
/* FileSaver.js
 *  A saveAs() & saveTextAs() FileSaver implementation.
 *  2014-06-24
 *
 *  Modify by Brian Chen
 *  Author: Eli Grey, http://eligrey.com
 *  License: X11/MIT
 *    See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md
 */

/*global self */
/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs = saveAs
  // IE 10+ (native saveAs)
  || (typeof navigator !== "undefined" &&
      navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator))
  // Everyone else
  || (function (view) {
      "use strict";
      // IE <10 is explicitly unsupported
      if (typeof navigator !== "undefined" &&
          /MSIE [1-9]\./.test(navigator.userAgent)) {
          return;
      }
      var
            doc = view.document
            // only get URL when necessary in case Blob.js hasn't overridden it yet
          , get_URL = function () {
              return view.URL || view.webkitURL || view;
          }
          , save_link = doc.createElementNS("http://www.w3.org/1999/xhtml", "a")
          , can_use_save_link = !view.externalHost && "download" in save_link
          , click = function (node) {
              var event = doc.createEvent("MouseEvents");
              event.initMouseEvent(
                  "click", true, false, view, 0, 0, 0, 0, 0
                  , false, false, false, false, 0, null
              );
              node.dispatchEvent(event);
          }
          , webkit_req_fs = view.webkitRequestFileSystem
          , req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem
          , throw_outside = function (ex) {
              (view.setImmediate || view.setTimeout)(function () {
                  throw ex;
              }, 0);
          }
          , force_saveable_type = "application/octet-stream"
          , fs_min_size = 0
          , deletion_queue = []
          , process_deletion_queue = function () {
              var i = deletion_queue.length;
              while (i--) {
                  var file = deletion_queue[i];
                  if (typeof file === "string") { // file is an object URL
                      get_URL().revokeObjectURL(file);
                  } else { // file is a File
                      file.remove();
                  }
              }
              deletion_queue.length = 0; // clear queue
          }
          , dispatch = function (filesaver, event_types, event) {
              event_types = [].concat(event_types);
              var i = event_types.length;
              while (i--) {
                  var listener = filesaver["on" + event_types[i]];
                  if (typeof listener === "function") {
                      try {
                          listener.call(filesaver, event || filesaver);
                      } catch (ex) {
                          throw_outside(ex);
                      }
                  }
              }
          }
          , FileSaver = function (blob, name) {
              // First try a.download, then web filesystem, then object URLs
              var
                    filesaver = this
                  , type = blob.type
                  , blob_changed = false
                  , object_url
                  , target_view
                  , get_object_url = function () {
                      var object_url = get_URL().createObjectURL(blob);
                      deletion_queue.push(object_url);
                      return object_url;
                  }
                  , dispatch_all = function () {
                      dispatch(filesaver, "writestart progress write writeend".split(" "));
                  }
                  // on any filesys errors revert to saving with object URLs
                  , fs_error = function () {
                      // don't create more object URLs than needed
                      if (blob_changed || !object_url) {
                          object_url = get_object_url(blob);
                      }
                      if (target_view) {
                          target_view.location.href = object_url;
                      } else {
                          window.open(object_url, "_blank");
                      }
                      filesaver.readyState = filesaver.DONE;
                      dispatch_all();
                  }
                  , abortable = function (func) {
                      return function () {
                          if (filesaver.readyState !== filesaver.DONE) {
                              return func.apply(this, arguments);
                          }
                      };
                  }
                  , create_if_not_found = { create: true, exclusive: false }
                  , slice
              ;
              filesaver.readyState = filesaver.INIT;
              if (!name) {
                  name = "download";
              }
              if (can_use_save_link) {
                  object_url = get_object_url(blob);
                  save_link.href = object_url;
                  save_link.download = name;
                  click(save_link);
                  filesaver.readyState = filesaver.DONE;
                  dispatch_all();
                  return;
              }
              // Object and web filesystem URLs have a problem saving in Google Chrome when
              // viewed in a tab, so I force save with application/octet-stream
              // http://code.google.com/p/chromium/issues/detail?id=91158
              if (view.chrome && type && type !== force_saveable_type) {
                  slice = blob.slice || blob.webkitSlice;
                  blob = slice.call(blob, 0, blob.size, force_saveable_type);
                  blob_changed = true;
              }
              // Since I can't be sure that the guessed media type will trigger a download
              // in WebKit, I append .download to the filename.
              // https://bugs.webkit.org/show_bug.cgi?id=65440
              if (webkit_req_fs && name !== "download") {
                  name += ".download";
              }
              if (type === force_saveable_type || webkit_req_fs) {
                  target_view = view;
              }
              if (!req_fs) {
                  fs_error();
                  return;
              }
              fs_min_size += blob.size;
              req_fs(view.TEMPORARY, fs_min_size, abortable(function (fs) {
                  fs.root.getDirectory("saved", create_if_not_found, abortable(function (dir) {
                      var save = function () {
                          dir.getFile(name, create_if_not_found, abortable(function (file) {
                              file.createWriter(abortable(function (writer) {
                                  writer.onwriteend = function (event) {
                                      target_view.location.href = file.toURL();
                                      deletion_queue.push(file);
                                      filesaver.readyState = filesaver.DONE;
                                      dispatch(filesaver, "writeend", event);
                                  };
                                  writer.onerror = function () {
                                      var error = writer.error;
                                      if (error.code !== error.ABORT_ERR) {
                                          fs_error();
                                      }
                                  };
                                  "writestart progress write abort".split(" ").forEach(function (event) {
                                      writer["on" + event] = filesaver["on" + event];
                                  });
                                  writer.write(blob);
                                  filesaver.abort = function () {
                                      writer.abort();
                                      filesaver.readyState = filesaver.DONE;
                                  };
                                  filesaver.readyState = filesaver.WRITING;
                              }), fs_error);
                          }), fs_error);
                      };
                      dir.getFile(name, { create: false }, abortable(function (file) {
                          // delete file if it already exists
                          file.remove();
                          save();
                      }), abortable(function (ex) {
                          if (ex.code === ex.NOT_FOUND_ERR) {
                              save();
                          } else {
                              fs_error();
                          }
                      }));
                  }), fs_error);
              }), fs_error);
          }
          , FS_proto = FileSaver.prototype
          , saveAs = function (blob, name) {
              return new FileSaver(blob, name);
          }
      ;
      FS_proto.abort = function () {
          var filesaver = this;
          filesaver.readyState = filesaver.DONE;
          dispatch(filesaver, "abort");
      };
      FS_proto.readyState = FS_proto.INIT = 0;
      FS_proto.WRITING = 1;
      FS_proto.DONE = 2;

      FS_proto.error =
      FS_proto.onwritestart =
      FS_proto.onprogress =
      FS_proto.onwrite =
      FS_proto.onabort =
      FS_proto.onerror =
      FS_proto.onwriteend =
          null;

      view.addEventListener("unload", process_deletion_queue, false);
      saveAs.unload = function () {
          process_deletion_queue();
          view.removeEventListener("unload", process_deletion_queue, false);
      };
      return saveAs;
  }(
	   typeof self !== "undefined" && self
	|| typeof window !== "undefined" && window
	|| this.content
));
// `self` is undefined in Firefox for Android content script context
// while `this` is nsIContentFrameMessageManager
// with an attribute `content` that corresponds to the window

if (typeof module !== "undefined" && module !== null) {
    module.exports = saveAs;
} else if ((typeof define !== "undefined" && define !== null) && (define.amd != null)) {
    define([], function () {
        return saveAs;
    });
}

String.prototype.endsWithAny = function () {
    var strArray = Array.prototype.slice.call(arguments),
        $this = this.toLowerCase().toString();
    for (var i = 0; i < strArray.length; i++) {
        if ($this.indexOf(strArray[i], $this.length - strArray[i].length) !== -1) return true;
    }
    return false;
};

var saveTextAs = saveTextAs
|| (function (textContent, fileName, charset) {
    fileName = fileName || 'download.txt';
    charset = charset || 'utf-8';
    textContent = (textContent || '').replace(/\r?\n/g, "\r\n");
    if (saveAs && Blob) {
        var blob = new Blob([textContent], { type: "text/plain;charset=" + charset });
        saveAs(blob, fileName);
        return true;
    } else {//IE9-
        var saveTxtWindow = window.frames.saveTxtWindow;
        if (!saveTxtWindow) {
            saveTxtWindow = document.createElement('iframe');
            saveTxtWindow.id = 'saveTxtWindow';
            saveTxtWindow.style.display = 'none';
            document.body.insertBefore(saveTxtWindow, null);
            saveTxtWindow = window.frames.saveTxtWindow;
            if (!saveTxtWindow) {
                saveTxtWindow = window.open('', '_temp', 'width=100,height=100');
                if (!saveTxtWindow) {
                    window.alert('Sorry, download file could not be created.');
                    return false;
                }
            }
        }

        var doc = saveTxtWindow.document;
        doc.open('text/html', 'replace');
        doc.charset = charset;
        if (fileName.endsWithAny('.htm', '.html')) {
            doc.close();
            doc.body.innerHTML = '\r\n' + textContent + '\r\n';
        } else {
            if (!fileName.endsWithAny('.txt')) fileName += '.txt';
            doc.write(textContent);
            doc.close();
        }

        var retValue = doc.execCommand('SaveAs', null, fileName);
        saveTxtWindow.close();
        return retValue;
    }
})

/**
 * В данном файле собраны методы которые используются в afterSubmitJs параметрах разных кнопок
 */

//Уменьшаем счетчик оповещений после нажатия "Удалить", "Пометить прочитанным" на уведомлении. Обновляем грид.
function afterSubmit_UpdateNotification(gridId) {

    new NotificationHub().NotifyCurrentUserGroup();
}
; (function () { }(window.ct = window.ct || {}));
; (function (custom) {

    /**
     * Показываем диалоговое окно с информацией о технической поддержке.     
     */
    custom.showSupportDialog = function () {
        ct.ui.alert('Техническая поддержка', '1. <a href="http://cspp.vtb24.ru/ess/ess.do?ctx=docEngine&file=hpctplincidents&query=tpl.id%3D%2263839297913%22&action=&title=&queryHash=66446abb" target="_blank">Портал службы поддержки пользователей</a> <br />2. <a href="mailto:SPP3@vtb.ru?subject=Письмо в Техническую поддержку (iProc)">Письмо в Техническую поддержку (iProc)</a> <br />3. ЦСПП - тел.: <a href="tel:555555">55-55-55</a>');
    };
	
	/**
     * Показывает waitingDialog и потом перезагружает страницу.     
     */
	custom.wait5Sec = function (f) {

        setTimeout(function () {
            waitingDialog.showWaiting();
        }, 500);

        setTimeout(function () {

            if (f && typeof (f) === "function") {
                f();
            } else {
                window.location.reload();
            }

        }, 3500);
    };

    custom.wait10Sec = function (f) {

        setTimeout(function () {
            waitingDialog.showWaiting();
        }, 500);

        setTimeout(function () {

            if (f && typeof (f) === "function") {
                f();
            } else {
                window.location.reload();
            }

        }, 8500);
    };

    custom.wait15Sec = function (f) {

        setTimeout(function () {
            waitingDialog.showWaiting();
        }, 500);

        setTimeout(function () {

            if (f && typeof (f) === "function") {
                f();
            } else {
                window.location.reload();
            }

        }, 14500);
    };
	
	custom.wait20Sec = function (f) {

        setTimeout(function () {
            waitingDialog.showWaiting();
        }, 500);

        setTimeout(function () {

            if (f && typeof (f) === "function") {
                f();
            } else {
                window.location.reload();
            }

        }, 20500);
    };

}((window.ct = window.ct || {}, window.ct.custom = window.ct.custom || {})));


var ExtContractorManager = function (store, treePanel, win) {

    var findExternalContractor = function() {

        var orgFilterPanel = $('#itemFormPanel-suppliers-body');
        var getUrl = window.location;
        var baseUrl = getUrl.protocol + "//" + getUrl.host;// + "/" + getUrl.pathname.split('/')[1];
        baseUrl += '/ExtContractor/GetFilteredContractor';

        var filter = {
            orgName: orgFilterPanel.find('[data-field-name="fullOrgName"]').val(),
            orgType: orgFilterPanel.find('[dictionary-edit-name="TipUrLico"]').val(),
            isNoResident: orgFilterPanel.find('[data-field-name="nerez"]:checked').length > 0,
            isIndividEnterp: orgFilterPanel.find('[data-field-name="ip"]:checked').length > 0,
            code: orgFilterPanel.find('[data-field-name="idNonres"]').val(),
            inn: orgFilterPanel.find('[data-field-name="inn"]').val(),
            kpp: orgFilterPanel.find('[data-field-name="kpp"]').val(),

            lastName: orgFilterPanel.find('[data-field-name="lastName"]').val(),
            firstName: orgFilterPanel.find('[data-field-name="firstName"]').val(),
            middleName: orgFilterPanel.find('[data-field-name="middleName"]').val()
        };

        if (!filter.orgType) {
            Ext.Msg.alert('Ошибка', 'Выберите тип контрагента');
            return;
        }
        
        if(filter.orgType==='U' && (!filter.inn || !filter.kpp))
        {
            Ext.Msg.alert('Ошибка','Необходимо указать ИНН и КПП');
            return;
        }


        if ((filter.orgType === 'U' && (!filter.inn || !filter.kpp)) ||
            ((filter.orgType === 'UF' || filter.orgType === 'PF') && !filter.orgName && !filter.code) ||
            ((filter.orgType === 'IP') && !filter.orgName && !filter.inn) ||
            ((filter.orgType === 'P') && !filter.inn && !filter.firstName && !filter.lastName && !filter.middleName)
            ) {
                Ext.Msg.alert('Ошибка', 'Невозможно отправить пустой запрос');
                return;
        }
        win.mask("Поиск в смежных системах");
        $.ajax(
                {
                    type: "POST",
                    dataType: "json",
                    url: baseUrl,
                    data: filter
                })
            .done(function(response) {
				$('.x-component.x-border-box.x-mask.x-component-default[id^="loadmask-"]').hide();
                store.clearData();
                treePanel.view.refresh();

                if (response.data) {
                    var newItems = [];

                    response.data.forEach(function(client) {
                        var rec = {
                            id: client.Id,
                            code: client.Id,
                            "Наименование": client.Name,
                            "ИНН": client.Inn,
                            "КПП": client.Kpp,
                            leaf: true,
                            enabled: true,
                            parentid: null,
                            children: null,
                            expanded: false,
                            source: client.Source
                        };
                        newItems.push(rec);
                    });

                    var newStore = Ext.create('Ext.data.Store',
                        {
                            model: 'Dictionary',
                            data: newItems
                        });

                    treePanel.reconfigure(newStore);
                    treePanel.view.refresh();
                } else {
                    var errorTitle = 'Произошла ошибка';
                    var errorMessage = response.error || response.responseMessage;

                    if (errorMessage === 'Внешние контрагенты не найдены') {
                        errorTitle = 'Внешние контрагенты не найдены';

                        if ((filter.orgType === 'U' || filter.orgType === 'UF' || filter.isIndividEnterp)) {
                            errorMessage = 'По указанным реквизитам в ПКБ контрагента не найдено';
                        } else {
                            errorMessage = 'Необходимо проверить параметры поискового запроса либо инициировать заведение нового контрагента через группу НСИ';
                        }

                    } 

                    Ext.Msg.alert(errorTitle, errorMessage);
                }
            }).always(function () {
                win.unmask();
            });
        
    }

    var saveChoosenContractor = function (selectedContractorId, selectedRowsDebug, fillSelected, inn, name, loadDictionaryDataRow, callbackFunc, doneFunc, failFunc) {
       
		var contractorRow = selectedRowsDebug[0];
		var getUrl = window.location;
		var baseUrl = getUrl.protocol + "//" + getUrl.host;// + "/" + getUrl.pathname.split('/')[1];
		baseUrl += '/ExtContractor/SaveContractor';

		var contractorType = contractorRow.get('source');

		var selectedOrgType = '';
		var orgFilterPanel = $('#itemFormPanel-suppliers-body');
		var filter = {
			orgType: orgFilterPanel.find('[dictionary-edit-name="TipUrLico"]').val(),
			isIndividEnterp: orgFilterPanel.find('[data-field-name="ip"]:checked').length > 0
		};

		if (filter.orgType === 'P' || filter.orgType === 'PF') {
			selectedOrgType = '1';
		} else if (filter.orgType === 'U' || filter.orgType === 'UF' || filter.isIndividEnterp) {
			selectedOrgType = '2';
		}
		
		if(contractorType == 'sap'){
			if(selectedOrgType == '1'){
				selectedOrgType = 'ФЛ';
			}else{
				selectedOrgType = 'ЮЛ';
			}
			selectedContractorId = selectedContractorId.replace('SAP','')
		}else{
			if(filter.isIndividEnterp){
				  selectedOrgType = '3';
			}
		}

        callbackFunc();

        setTimeout(function () {

		    waitingDialog.show("Добавление контрагента...");
			
		    $.ajax(
				    {
					    type: "POST",
					    dataType: "json",
					    url: baseUrl,
					    data: {
						    contractorId: selectedContractorId,
						    contractorType: contractorType,
						    orgType: selectedOrgType,
						    inn: inn,
						    name: name
					    }
				    })
			    .done(function (response) {                

				    if (response.data) {
                        if (fillSelected) {
                            var code = response.data;
                            contractorRow.set('code', code);

                            doneFunc();

                            loadDictionaryDataRow(code).done(function (resp) {

                                var rows = JSON.parse(resp.data);
                                var rowData = rows.children[0];

                                if (rowData["Код клиента в SAP"] == "") {

                                    Ext.Msg.show({
                                        title: 'Внимание',
                                        msg: 'Контрагент отсутствует в SAP УВХД.<br/>1. Оформите запрос на группу НСИ на добавление контрагента. Шаблон письма и печатной формы запроса доступны на карточке контрагента по кнопке "Запрос в НСИ".<br/>2. После добавления контрагента в SAP УВХД, убедитесь, что на карточке контрагента заполнено поле "Код SAP", после чего перевыберите контрагента на карточке документа.',
                                        width: 700,
                                        closable: false,
                                        buttons: Ext.Msg.YESCANCEL,
                                        buttonText:
                                        {
                                            yes: 'Запрос в НСИ',
                                            cancel: 'Вернуться к заполнению'
                                        },
                                        multiline: false,
                                        fn: function (buttonValue, inputText, showConfig) {
                                            if (buttonValue == "yes") {
                                                var id = contractorRow.data.ИД_контрагента;
                                                var getUrl = window.location;
                                                var baseUrl = getUrl.protocol + "//" + getUrl.host;// + "/" + getUrl.pathname.split('/')[1];

                                                var urle = baseUrl + '/ContextAction/HandleDocumentAction?uniqueIds=' + id + '&actionName=%D0%97%D0%B0%D0%BF%D1%80%D0%BE%D1%81%20%D0%B2%20%D0%9D%D0%A1%D0%98&location=DocumentView&viewSourceType=SearchView&returnUrl=' + encodeURIComponent(baseUrl) + '%2FSearch%2FDocumentView%2F' + id + '%3FsearchTemplateName%3DOrganizationsMenu%23regcard-view-tlcInfo';
                                                window.open(urle, '_blank');
                                            }
                                        }
                                    });
                                }

                                contractorRow.data = rowData;
                                contractorRow.raw = rowData;

                                fillSelected(selectedRowsDebug);
                                waitingDialog.hide();
                            }).fail(function (e) {
                                waitingDialog.hide();
                                Ext.Msg.alert('Произошла ошибка при сохранении выбранного контрагента', e);
                            });

                        } else {
                            failFunc();
                        }
                    } else {
                        failFunc();
					    waitingDialog.hide();
					    Ext.Msg.alert('Произошла ошибка при сохранении выбранного контрагента', response.error || response.responseMessage);
				    }
			    })
                .fail(function (e) {
                    failFunc();
				    waitingDialog.hide();
				    Ext.Msg.alert('Произошла ошибка при сохранении выбранного контрагента', e);
                });

        }, 50);
    }

    return{
        findExternalContractor: findExternalContractor,
        saveChoosenContractor: saveChoosenContractor
    }
};


var ExpertsManager = function (store, tree) {

    var isExpert = function (docId, userLogin, resFunc) {
        var getUrl = window.location;
        var baseUrl = getUrl.protocol + "//" + getUrl.host;// + "/" + getUrl.pathname.split('/')[1];
        baseUrl += '/Expert/IsExpertForDoc';

        $.ajax(
                {
                    type: "GET",
                    dataType: "json",
                    url: baseUrl,
                    data: {
                        docId: docId,
                        userLogin: userLogin
                    }
                })
            .done(function(response) {
                resFunc(response);
            });
    };

    var findExpert = function () {
        var orgFilterPanel = $('#itemFormPanel-expert-body');
        var searchVal = orgFilterPanel.find('[name="typedSearchField"]').val().trim();

        var getUrl = window.location;
        var baseUrl = getUrl.protocol + "//" + getUrl.host;// + "/" + getUrl.pathname.split('/')[1];
        if (!searchVal) {
            Ext.Msg.alert('Ошибка', 'Введите данные эксперта');
            return;
        }
        if (store.storeId.indexOf('adrList') > -1) {
            baseUrl += '/Expert/GetFilteredExpertsLazy';
            baseUrl = baseUrl + "?filter=" + encodeURIComponent(searchVal);
            store.proxy.url = baseUrl;
            store.load();
        } else {
        baseUrl += '/Expert/GetFilteredExperts';
            $.ajax(
                    {
                        type: "POST",
                        dataType: "json",
                        url: baseUrl,
                        data: {
                            filter: searchVal
                        }
                    })
                .done(function(response) {
                    store.clearData();
                    tree.view.refresh();

                    if (response.data) {
                            //Удаляем ноды все дочерние для корневого

                            var rootNode = store.getRootNode();
                            var allChilds = rootNode.childNodes;
                            for (cs in allChilds) {
                                rootNode.removeChild(allChilds[cs]);
                            }

                            response.data.forEach(function(expert) {
                                var rec = {
                                    id: expert.VtbPersonNumber,
                                    key: expert.VtbPersonNumber,
                                    name: expert.FullName + ' (' + expert.DepartmentName + ')',
                                    leaf: true,
                                    enabled: true,
                                    parentid: null,
                                    children: null,
                                    expanded: false,
                                    selectable: "true"
                                };

                                rootNode.appendChild(rec);
                            });

                    } else {
                        Ext.Msg.alert('Произошла ошибка', response.error || response.responseMessage);
                    }
                });
        }
    }

    var saveChoosenExpert = function (storebookTpl, registerName, fillSelected) {
        if (!(registerName === "expert" || (registerName === "performerName" && ($(".modal-title:visible").text() === "Создать этап" || $(".modal-title:visible").text() === "Делегировать")) || (registerName === "performerNames" && $(".modal-title:visible").text() === "Запрос дополнительного согласования"))) return;//Пока просто тупая проверка - если кнопка по имени не соотвествет экспертам - ничего не делаем
		
		//должен быть выбран только один эксперт
        if (storebookTpl.length !== 1){
			Ext.Msg.alert('Произошла ошибка', 'Должен быть выбран только один эксперт');
			return;
		}

        var getUrl = window.location;
        var baseUrl = getUrl.protocol + "//" + getUrl.host;// + "/" + getUrl.pathname.split('/')[1];
        baseUrl += '/Expert/SaveExpert';
		waitingDialog.showWaiting(true);
		
        $.ajax(
                {
                    type: "POST",
                    dataType: "json",
                    url: baseUrl,
                    data: {
                        vtbPersonNumber: storebookTpl[0].key,
						curUserLogin: $(".header-menu-user-name").data("user-sid")       
                    }
                })
            .done(function (response) {
				waitingDialog.hide();
                if (response.data) {
                    if (fillSelected) {
                        storebookTpl[0].key = response.data;
                        fillSelected();
                    }
                } else {
                    Ext.Msg.alert('Произошла ошибка при сохранении выбранного контрагента', response.error || response.responseMessage);
                }
            });
    }

    return {
        findExpert: findExpert,
        saveChoosenExpert: saveChoosenExpert,
        isExpert: isExpert
    }
};

/*
(function () {

    if (!window.chrome) {

        $(document).ready(function () {

            setTimeout(function () {
                if ($(".dx-dialog-message:contains('Мы переходим на Google Chrome')").length === 0) {

                    showBrowserWarning();
                }
            }, 100);
			
			function showBrowserWarning() {
                var dlg = DevExpress.ui.dialog.custom({
                    title: "Информация",
                    message: "<p><b>Мы переходим на Google Chrome.</b></p><p>Пожалуйста, используйте браузер Google Chrome для доступа к системе управления закупками iProc (E1).</p><p>Google Chrome является целевым браузером для внутренних пользователей Банка.</p><p>В связи с этим будет ограничена поддержка браузера Internet Explorer.</p><p><b>Важно!</b></p><p>Для корректной работы подписания необходимо самостоятельно установить расширения КриптоПро для Chrome через Центр программного обеспечения.</p>",
                    buttons: [{
                        text: "OK",
                        onClick: function (e) {
                            showBrowserWarning();
                        }
                    }]
                });
                dlg.show();
            }
                 
        });        
    }

})();
*/
var utils = (function () {

    function initExtenders() {
        extendRegExp();
    }

    /* public Методы 
     * Сюда добавлять новые public утилит методы
     */
    
    function escapeRegExp(regExp) {
        return regExp.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }
    /* public Методы */

    /* private Методы 
     * Сюда добалять методы только для использование в пределах utils.js
     */
    

    function extendRegExp() {
        RegExp.escape = escapeRegExp;
    }
    /* private Методы */

    initExtenders();

    return {
        escapeRegExp: escapeRegExp
    };
})()
LawSwitcher = (function () {

    function getLawSwitcher() {

        return $("#lawSwitcher");
    }

    function getLawTitle() {

        var lawSwitcher = getLawSwitcher();
        var lawTitle = lawSwitcher.prop("checked") ? lawSwitcher.attr("data-on") : lawSwitcher.attr("data-off");

        return lawTitle;
    }

    function Enabled() {

        if (GetLaw()) {
            return true;
        }

        return false;
    }

    function GetLaw() {

        var lawTitle = getLawTitle();
        var law = typeof lawTitle != 'undefined' && lawTitle != null ? lawTitle.split('-')[1] : "";

        return law;
    }

    function Is44Law() {
        return GetLaw() === "44";
    }

    function Is223Law() {
        return GetLaw() === "223";
    }

    function Toggle() {

        waitingDialog.showWaiting();
        var actionUrl = getLawSwitcher().attr("data-action");        
        var law = GetLaw();

        $.ajax({
            url: actionUrl,
            type: "POST",
            dataType: "json",
            cache: false,
            async: true,
            data: { law: law },
            success: function (data) {

                var d = data.data;
                if (d && d.Success) {
                    window.location = buildReloadUrl();
                }
            },
            error: function () {
                waitingDialog.hide();
            }
        });

        function buildReloadUrl() {
            var newUrl = window.location.protocol + "//" + window.location.host;

            var pathParts = window.location.pathname.split("/");

            if (pathParts.length > 1) {
                //TODO: Переписать с использованием одной из функций из common.js: getBaseUrl, getAbsoluteUrl, getRelativeUrl.
                var newPath = "/";
                var controllerName = pathParts[1]; //первый элемент пустой
                // if (controllerName.toLocaleLowerCase() === "edo") {
                    // controllerName = pathParts[2];
                    // newPath += "edo/";
                // }


                switch (controllerName) {
                    case "Administration":
                    case "Reports":
                    case "Performer":
                    case "Control":
                        newPath += controllerName;
                        break;
                    case "Search":
                        {
                            newPath += "Search/Search";
                            var searchTmpl = getQueryStringParameterByName("searchTemplateName", window.location.search);
                            if (searchTmpl)
                                newPath += "?searchTemplateName=" + searchTmpl;
                        }
                        break;
                    case "Document":
                    case "Edit":
                    case "Register":
                        break;
                }
                return newUrl + newPath;
            }
            return newUrl + window.location.pathname;
        }
    }    

    return {
        Enabled: Enabled,
        GetLaw: GetLaw,
        Is44Law: Is44Law,
        Is223Law: Is223Law,        
        Toggle: Toggle
    }

})();

//Сервис уведомлений. Получает количество уведомлений и обновляет счетчик уведомлений в верхнем правом углу.
var NotificationService = (function ($) {
    "use strict";

    function NotificationService() {
        var self = this;

        self.base = $("base").attr("href");
        if (self.Base === "/") self.base = "";
    }

    //Получает количество уведомлений (прочитанных или непрочитанных).
    NotificationService.prototype.GetCount = function (readed, useMaxCount) {
        var self = this;
        var defer = $.Deferred();

        $.ajax({
            type: "get",
            url: getRelativeUrl("Notification/Count"),
            cache: false,
            data: { readed: readed, useMaxCount: useMaxCount },
            error: function (error) { defer.reject(error) },
            success: function (data) { defer.resolve(data) }
        });

        return defer.promise();
    }

    //Форматирует текст который выводится в счетчике уведомлений.
    NotificationService.prototype.CountToText = function (count) {
        if (count < 1) return "";
        if (count > 99) return "99+";

        return count;
    }

    //Возвращает разный css стиль счетчика уведомлений в правом верхнем углу, для разного количества уведомлений.
    NotificationService.prototype.CountToClass = function (count) {
        if (count < 1)   return "empty";
        if (count < 10)  return "small";
        if (count < 100) return "middle";

        return "large";
    }

    NotificationService.prototype.AllClasses = function () {
        return "empty small middle large";
    }

    //Получает количество непрочитанных уведомлений и обновляем счетчик уведомлений в правом верхнем углу.
    NotificationService.prototype.ShowCount = function () {
        var self = this;
        
        self.GetCount(false, true).then(function (count) {
            self.ShowEnvelopeCount(count);
        });
    }

    //Обновляет счетчик уведомлений в верхнем правом углу.
    NotificationService.prototype.ShowEnvelopeCount = function (count) {
        var self = this;
        var number = parseInt(count);

        //Обновляем стиль счетчика в верхнем правом углу
        var newClass = self.CountToClass(number);
        var notificationItem = $("#notifications-item");
        var classes = notificationItem.attr("class");

        if (classes.indexOf(newClass) === -1) {
            notificationItem
                .removeClass(self.AllClasses())
                .addClass(newClass);
        }

        //Обновляем счетчик уведомлений в верхнем правом углу
        $("#notifications-badge").text(self.CountToText(number));        
    }

    return NotificationService;
})($);


//Signalr хаб уведомлений. Используется для оперативного обновления счетчиков уведомлений во всех вкладках браузера клиента.
var NotificationHub = (function ($) {
    "use strict";

    function NotificationHub() {
    }

    //Подписчики на событие - новое уведомление. Подписчиком может быть страница уведомлений, где недостаточно просто обновить один счетчик уведомлений.
    NotificationHub.prototype.OnNewMessageHandlers = [];

    //Подписаться на событие - новое уведомление.
    NotificationHub.prototype.OnNewMessageSubscribe = function (fn) {
        var self = this;

        self.OnNewMessageHandlers.push(fn);
    }

    //Инициализация signalr хаба уведомлений.
    NotificationHub.prototype.InitSignalRHub = function () {
        var self = this;
        
        $.connection.notificationHub.client.newMessage = function () {

            function updateNotifications() {
                //Если есть подписчики, то дергаем их
                if (self.OnNewMessageHandlers.length > 0) {
                    self.OnNewMessageHandlers.forEach(function (item) {
                        item.call();
                    });
                } else { //Если подписчиков нет, то просто обновляем счетчик уведомлений
                    new NotificationService().ShowCount();
                }
            }

            updateNotifications();

            //Некоторые уведомления приходят до изменения в БД (создание сущности), поэтому делаем повторный запрос через setTimeout
            setTimeout(function () {
                updateNotifications();
            }, 4000);
        };

        //Используем longPolling, т.к. остальные транспорты не работают с включенной Анонимной проверкой подлинности без параметра [Authorize] над хабом.
        //Анонимная проверка подлинности нам нужна, а параметр [Authorize] использовать мы не можем, т.к. у нас кастомная аутентификация и Context.User.Identity.Name пустой в хабе (т.е. никто не попадет в хаб, если его [Authorize] пометить).
        //Если перепишут аутентификацию и Context.User.Identity.Name будет не пустым, то пометить .cs класс хаба атрибутом Authorize и отключите в js использование { transport: 'longPolling' }
        $.connection.hub.start({ transport: 'longPolling' });
    }

    //Уведомить текущую группу пользователя о новом уведомлении.
    NotificationHub.prototype.NotifyCurrentUserGroup = function () {
        $.connection.notificationHub.server.notifyCurrentUserGroup();
    }

    return NotificationHub;
})($);

